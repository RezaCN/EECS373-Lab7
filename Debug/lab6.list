
lab6.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000039b0  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000006c  08003b50  08003b50  00013b50  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003bbc  08003bbc  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08003bbc  08003bbc  00013bbc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003bc4  08003bc4  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003bc4  08003bc4  00013bc4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003bc8  08003bc8  00013bc8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08003bcc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000c4  20000070  08003c3c  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000134  08003c3c  00020134  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009138  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001557  00000000  00000000  000291d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000008a8  00000000  00000000  0002a730  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000810  00000000  00000000  0002afd8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00015a8a  00000000  00000000  0002b7e8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000075da  00000000  00000000  00041272  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000869d7  00000000  00000000  0004884c  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000cf223  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000026e0  00000000  00000000  000cf2a0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000070 	.word	0x20000070
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08003b38 	.word	0x08003b38

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000074 	.word	0x20000074
 80001dc:	08003b38 	.word	0x08003b38

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002a4:	f000 b972 	b.w	800058c <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9e08      	ldr	r6, [sp, #32]
 80002c6:	4604      	mov	r4, r0
 80002c8:	4688      	mov	r8, r1
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	d14b      	bne.n	8000366 <__udivmoddi4+0xa6>
 80002ce:	428a      	cmp	r2, r1
 80002d0:	4615      	mov	r5, r2
 80002d2:	d967      	bls.n	80003a4 <__udivmoddi4+0xe4>
 80002d4:	fab2 f282 	clz	r2, r2
 80002d8:	b14a      	cbz	r2, 80002ee <__udivmoddi4+0x2e>
 80002da:	f1c2 0720 	rsb	r7, r2, #32
 80002de:	fa01 f302 	lsl.w	r3, r1, r2
 80002e2:	fa20 f707 	lsr.w	r7, r0, r7
 80002e6:	4095      	lsls	r5, r2
 80002e8:	ea47 0803 	orr.w	r8, r7, r3
 80002ec:	4094      	lsls	r4, r2
 80002ee:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002f2:	0c23      	lsrs	r3, r4, #16
 80002f4:	fbb8 f7fe 	udiv	r7, r8, lr
 80002f8:	fa1f fc85 	uxth.w	ip, r5
 80002fc:	fb0e 8817 	mls	r8, lr, r7, r8
 8000300:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000304:	fb07 f10c 	mul.w	r1, r7, ip
 8000308:	4299      	cmp	r1, r3
 800030a:	d909      	bls.n	8000320 <__udivmoddi4+0x60>
 800030c:	18eb      	adds	r3, r5, r3
 800030e:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 8000312:	f080 811b 	bcs.w	800054c <__udivmoddi4+0x28c>
 8000316:	4299      	cmp	r1, r3
 8000318:	f240 8118 	bls.w	800054c <__udivmoddi4+0x28c>
 800031c:	3f02      	subs	r7, #2
 800031e:	442b      	add	r3, r5
 8000320:	1a5b      	subs	r3, r3, r1
 8000322:	b2a4      	uxth	r4, r4
 8000324:	fbb3 f0fe 	udiv	r0, r3, lr
 8000328:	fb0e 3310 	mls	r3, lr, r0, r3
 800032c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000330:	fb00 fc0c 	mul.w	ip, r0, ip
 8000334:	45a4      	cmp	ip, r4
 8000336:	d909      	bls.n	800034c <__udivmoddi4+0x8c>
 8000338:	192c      	adds	r4, r5, r4
 800033a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800033e:	f080 8107 	bcs.w	8000550 <__udivmoddi4+0x290>
 8000342:	45a4      	cmp	ip, r4
 8000344:	f240 8104 	bls.w	8000550 <__udivmoddi4+0x290>
 8000348:	3802      	subs	r0, #2
 800034a:	442c      	add	r4, r5
 800034c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000350:	eba4 040c 	sub.w	r4, r4, ip
 8000354:	2700      	movs	r7, #0
 8000356:	b11e      	cbz	r6, 8000360 <__udivmoddi4+0xa0>
 8000358:	40d4      	lsrs	r4, r2
 800035a:	2300      	movs	r3, #0
 800035c:	e9c6 4300 	strd	r4, r3, [r6]
 8000360:	4639      	mov	r1, r7
 8000362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000366:	428b      	cmp	r3, r1
 8000368:	d909      	bls.n	800037e <__udivmoddi4+0xbe>
 800036a:	2e00      	cmp	r6, #0
 800036c:	f000 80eb 	beq.w	8000546 <__udivmoddi4+0x286>
 8000370:	2700      	movs	r7, #0
 8000372:	e9c6 0100 	strd	r0, r1, [r6]
 8000376:	4638      	mov	r0, r7
 8000378:	4639      	mov	r1, r7
 800037a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800037e:	fab3 f783 	clz	r7, r3
 8000382:	2f00      	cmp	r7, #0
 8000384:	d147      	bne.n	8000416 <__udivmoddi4+0x156>
 8000386:	428b      	cmp	r3, r1
 8000388:	d302      	bcc.n	8000390 <__udivmoddi4+0xd0>
 800038a:	4282      	cmp	r2, r0
 800038c:	f200 80fa 	bhi.w	8000584 <__udivmoddi4+0x2c4>
 8000390:	1a84      	subs	r4, r0, r2
 8000392:	eb61 0303 	sbc.w	r3, r1, r3
 8000396:	2001      	movs	r0, #1
 8000398:	4698      	mov	r8, r3
 800039a:	2e00      	cmp	r6, #0
 800039c:	d0e0      	beq.n	8000360 <__udivmoddi4+0xa0>
 800039e:	e9c6 4800 	strd	r4, r8, [r6]
 80003a2:	e7dd      	b.n	8000360 <__udivmoddi4+0xa0>
 80003a4:	b902      	cbnz	r2, 80003a8 <__udivmoddi4+0xe8>
 80003a6:	deff      	udf	#255	; 0xff
 80003a8:	fab2 f282 	clz	r2, r2
 80003ac:	2a00      	cmp	r2, #0
 80003ae:	f040 808f 	bne.w	80004d0 <__udivmoddi4+0x210>
 80003b2:	1b49      	subs	r1, r1, r5
 80003b4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80003b8:	fa1f f885 	uxth.w	r8, r5
 80003bc:	2701      	movs	r7, #1
 80003be:	fbb1 fcfe 	udiv	ip, r1, lr
 80003c2:	0c23      	lsrs	r3, r4, #16
 80003c4:	fb0e 111c 	mls	r1, lr, ip, r1
 80003c8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003cc:	fb08 f10c 	mul.w	r1, r8, ip
 80003d0:	4299      	cmp	r1, r3
 80003d2:	d907      	bls.n	80003e4 <__udivmoddi4+0x124>
 80003d4:	18eb      	adds	r3, r5, r3
 80003d6:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 80003da:	d202      	bcs.n	80003e2 <__udivmoddi4+0x122>
 80003dc:	4299      	cmp	r1, r3
 80003de:	f200 80cd 	bhi.w	800057c <__udivmoddi4+0x2bc>
 80003e2:	4684      	mov	ip, r0
 80003e4:	1a59      	subs	r1, r3, r1
 80003e6:	b2a3      	uxth	r3, r4
 80003e8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003ec:	fb0e 1410 	mls	r4, lr, r0, r1
 80003f0:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80003f4:	fb08 f800 	mul.w	r8, r8, r0
 80003f8:	45a0      	cmp	r8, r4
 80003fa:	d907      	bls.n	800040c <__udivmoddi4+0x14c>
 80003fc:	192c      	adds	r4, r5, r4
 80003fe:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000402:	d202      	bcs.n	800040a <__udivmoddi4+0x14a>
 8000404:	45a0      	cmp	r8, r4
 8000406:	f200 80b6 	bhi.w	8000576 <__udivmoddi4+0x2b6>
 800040a:	4618      	mov	r0, r3
 800040c:	eba4 0408 	sub.w	r4, r4, r8
 8000410:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000414:	e79f      	b.n	8000356 <__udivmoddi4+0x96>
 8000416:	f1c7 0c20 	rsb	ip, r7, #32
 800041a:	40bb      	lsls	r3, r7
 800041c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000420:	ea4e 0e03 	orr.w	lr, lr, r3
 8000424:	fa01 f407 	lsl.w	r4, r1, r7
 8000428:	fa20 f50c 	lsr.w	r5, r0, ip
 800042c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000430:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000434:	4325      	orrs	r5, r4
 8000436:	fbb3 f9f8 	udiv	r9, r3, r8
 800043a:	0c2c      	lsrs	r4, r5, #16
 800043c:	fb08 3319 	mls	r3, r8, r9, r3
 8000440:	fa1f fa8e 	uxth.w	sl, lr
 8000444:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000448:	fb09 f40a 	mul.w	r4, r9, sl
 800044c:	429c      	cmp	r4, r3
 800044e:	fa02 f207 	lsl.w	r2, r2, r7
 8000452:	fa00 f107 	lsl.w	r1, r0, r7
 8000456:	d90b      	bls.n	8000470 <__udivmoddi4+0x1b0>
 8000458:	eb1e 0303 	adds.w	r3, lr, r3
 800045c:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000460:	f080 8087 	bcs.w	8000572 <__udivmoddi4+0x2b2>
 8000464:	429c      	cmp	r4, r3
 8000466:	f240 8084 	bls.w	8000572 <__udivmoddi4+0x2b2>
 800046a:	f1a9 0902 	sub.w	r9, r9, #2
 800046e:	4473      	add	r3, lr
 8000470:	1b1b      	subs	r3, r3, r4
 8000472:	b2ad      	uxth	r5, r5
 8000474:	fbb3 f0f8 	udiv	r0, r3, r8
 8000478:	fb08 3310 	mls	r3, r8, r0, r3
 800047c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000480:	fb00 fa0a 	mul.w	sl, r0, sl
 8000484:	45a2      	cmp	sl, r4
 8000486:	d908      	bls.n	800049a <__udivmoddi4+0x1da>
 8000488:	eb1e 0404 	adds.w	r4, lr, r4
 800048c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000490:	d26b      	bcs.n	800056a <__udivmoddi4+0x2aa>
 8000492:	45a2      	cmp	sl, r4
 8000494:	d969      	bls.n	800056a <__udivmoddi4+0x2aa>
 8000496:	3802      	subs	r0, #2
 8000498:	4474      	add	r4, lr
 800049a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800049e:	fba0 8902 	umull	r8, r9, r0, r2
 80004a2:	eba4 040a 	sub.w	r4, r4, sl
 80004a6:	454c      	cmp	r4, r9
 80004a8:	46c2      	mov	sl, r8
 80004aa:	464b      	mov	r3, r9
 80004ac:	d354      	bcc.n	8000558 <__udivmoddi4+0x298>
 80004ae:	d051      	beq.n	8000554 <__udivmoddi4+0x294>
 80004b0:	2e00      	cmp	r6, #0
 80004b2:	d069      	beq.n	8000588 <__udivmoddi4+0x2c8>
 80004b4:	ebb1 050a 	subs.w	r5, r1, sl
 80004b8:	eb64 0403 	sbc.w	r4, r4, r3
 80004bc:	fa04 fc0c 	lsl.w	ip, r4, ip
 80004c0:	40fd      	lsrs	r5, r7
 80004c2:	40fc      	lsrs	r4, r7
 80004c4:	ea4c 0505 	orr.w	r5, ip, r5
 80004c8:	e9c6 5400 	strd	r5, r4, [r6]
 80004cc:	2700      	movs	r7, #0
 80004ce:	e747      	b.n	8000360 <__udivmoddi4+0xa0>
 80004d0:	f1c2 0320 	rsb	r3, r2, #32
 80004d4:	fa20 f703 	lsr.w	r7, r0, r3
 80004d8:	4095      	lsls	r5, r2
 80004da:	fa01 f002 	lsl.w	r0, r1, r2
 80004de:	fa21 f303 	lsr.w	r3, r1, r3
 80004e2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80004e6:	4338      	orrs	r0, r7
 80004e8:	0c01      	lsrs	r1, r0, #16
 80004ea:	fbb3 f7fe 	udiv	r7, r3, lr
 80004ee:	fa1f f885 	uxth.w	r8, r5
 80004f2:	fb0e 3317 	mls	r3, lr, r7, r3
 80004f6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004fa:	fb07 f308 	mul.w	r3, r7, r8
 80004fe:	428b      	cmp	r3, r1
 8000500:	fa04 f402 	lsl.w	r4, r4, r2
 8000504:	d907      	bls.n	8000516 <__udivmoddi4+0x256>
 8000506:	1869      	adds	r1, r5, r1
 8000508:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 800050c:	d22f      	bcs.n	800056e <__udivmoddi4+0x2ae>
 800050e:	428b      	cmp	r3, r1
 8000510:	d92d      	bls.n	800056e <__udivmoddi4+0x2ae>
 8000512:	3f02      	subs	r7, #2
 8000514:	4429      	add	r1, r5
 8000516:	1acb      	subs	r3, r1, r3
 8000518:	b281      	uxth	r1, r0
 800051a:	fbb3 f0fe 	udiv	r0, r3, lr
 800051e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000522:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000526:	fb00 f308 	mul.w	r3, r0, r8
 800052a:	428b      	cmp	r3, r1
 800052c:	d907      	bls.n	800053e <__udivmoddi4+0x27e>
 800052e:	1869      	adds	r1, r5, r1
 8000530:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000534:	d217      	bcs.n	8000566 <__udivmoddi4+0x2a6>
 8000536:	428b      	cmp	r3, r1
 8000538:	d915      	bls.n	8000566 <__udivmoddi4+0x2a6>
 800053a:	3802      	subs	r0, #2
 800053c:	4429      	add	r1, r5
 800053e:	1ac9      	subs	r1, r1, r3
 8000540:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000544:	e73b      	b.n	80003be <__udivmoddi4+0xfe>
 8000546:	4637      	mov	r7, r6
 8000548:	4630      	mov	r0, r6
 800054a:	e709      	b.n	8000360 <__udivmoddi4+0xa0>
 800054c:	4607      	mov	r7, r0
 800054e:	e6e7      	b.n	8000320 <__udivmoddi4+0x60>
 8000550:	4618      	mov	r0, r3
 8000552:	e6fb      	b.n	800034c <__udivmoddi4+0x8c>
 8000554:	4541      	cmp	r1, r8
 8000556:	d2ab      	bcs.n	80004b0 <__udivmoddi4+0x1f0>
 8000558:	ebb8 0a02 	subs.w	sl, r8, r2
 800055c:	eb69 020e 	sbc.w	r2, r9, lr
 8000560:	3801      	subs	r0, #1
 8000562:	4613      	mov	r3, r2
 8000564:	e7a4      	b.n	80004b0 <__udivmoddi4+0x1f0>
 8000566:	4660      	mov	r0, ip
 8000568:	e7e9      	b.n	800053e <__udivmoddi4+0x27e>
 800056a:	4618      	mov	r0, r3
 800056c:	e795      	b.n	800049a <__udivmoddi4+0x1da>
 800056e:	4667      	mov	r7, ip
 8000570:	e7d1      	b.n	8000516 <__udivmoddi4+0x256>
 8000572:	4681      	mov	r9, r0
 8000574:	e77c      	b.n	8000470 <__udivmoddi4+0x1b0>
 8000576:	3802      	subs	r0, #2
 8000578:	442c      	add	r4, r5
 800057a:	e747      	b.n	800040c <__udivmoddi4+0x14c>
 800057c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000580:	442b      	add	r3, r5
 8000582:	e72f      	b.n	80003e4 <__udivmoddi4+0x124>
 8000584:	4638      	mov	r0, r7
 8000586:	e708      	b.n	800039a <__udivmoddi4+0xda>
 8000588:	4637      	mov	r7, r6
 800058a:	e6e9      	b.n	8000360 <__udivmoddi4+0xa0>

0800058c <__aeabi_idiv0>:
 800058c:	4770      	bx	lr
 800058e:	bf00      	nop

08000590 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000590:	b580      	push	{r7, lr}
 8000592:	b088      	sub	sp, #32
 8000594:	af02      	add	r7, sp, #8
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000596:	f000 faeb 	bl	8000b70 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800059a:	f000 f85b 	bl	8000654 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800059e:	f000 f91d 	bl	80007dc <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80005a2:	f000 f8f1 	bl	8000788 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 80005a6:	f000 f8c1 	bl	800072c <MX_I2C1_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	    // Tell TMP102 that we want to read from the temperature register
	    buf[0] = PHOTO;
 80005aa:	2340      	movs	r3, #64	; 0x40
 80005ac:	713b      	strb	r3, [r7, #4]
	    ret = HAL_I2C_Master_Transmit(&hi2c1, TMP102_ADDR, buf, 1, HAL_MAX_DELAY);
 80005ae:	2390      	movs	r3, #144	; 0x90
 80005b0:	b299      	uxth	r1, r3
 80005b2:	1d3a      	adds	r2, r7, #4
 80005b4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80005b8:	9300      	str	r3, [sp, #0]
 80005ba:	2301      	movs	r3, #1
 80005bc:	4820      	ldr	r0, [pc, #128]	; (8000640 <main+0xb0>)
 80005be:	f000 ff25 	bl	800140c <HAL_I2C_Master_Transmit>
 80005c2:	4603      	mov	r3, r0
 80005c4:	75fb      	strb	r3, [r7, #23]
	    if ( ret != HAL_OK ) {
 80005c6:	7dfb      	ldrb	r3, [r7, #23]
 80005c8:	2b00      	cmp	r3, #0
 80005ca:	d008      	beq.n	80005de <main+0x4e>
	      strcpy((char*)buf, "Error Tx\r\n");
 80005cc:	1d3b      	adds	r3, r7, #4
 80005ce:	4a1d      	ldr	r2, [pc, #116]	; (8000644 <main+0xb4>)
 80005d0:	ca07      	ldmia	r2, {r0, r1, r2}
 80005d2:	c303      	stmia	r3!, {r0, r1}
 80005d4:	801a      	strh	r2, [r3, #0]
 80005d6:	3302      	adds	r3, #2
 80005d8:	0c12      	lsrs	r2, r2, #16
 80005da:	701a      	strb	r2, [r3, #0]
 80005dc:	e01f      	b.n	800061e <main+0x8e>
	    } else {

	      // Read 2 bytes from the temperature register
	      ret = HAL_I2C_Master_Receive(&hi2c1, TMP102_ADDR, buf, 2, HAL_MAX_DELAY);
 80005de:	2390      	movs	r3, #144	; 0x90
 80005e0:	b299      	uxth	r1, r3
 80005e2:	1d3a      	adds	r2, r7, #4
 80005e4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80005e8:	9300      	str	r3, [sp, #0]
 80005ea:	2302      	movs	r3, #2
 80005ec:	4814      	ldr	r0, [pc, #80]	; (8000640 <main+0xb0>)
 80005ee:	f001 f80b 	bl	8001608 <HAL_I2C_Master_Receive>
 80005f2:	4603      	mov	r3, r0
 80005f4:	75fb      	strb	r3, [r7, #23]
	      if ( ret != HAL_OK ) {
 80005f6:	7dfb      	ldrb	r3, [r7, #23]
 80005f8:	2b00      	cmp	r3, #0
 80005fa:	d008      	beq.n	800060e <main+0x7e>
	        strcpy((char*)buf, "Error Rx\r\n");
 80005fc:	1d3b      	adds	r3, r7, #4
 80005fe:	4a12      	ldr	r2, [pc, #72]	; (8000648 <main+0xb8>)
 8000600:	ca07      	ldmia	r2, {r0, r1, r2}
 8000602:	c303      	stmia	r3!, {r0, r1}
 8000604:	801a      	strh	r2, [r3, #0]
 8000606:	3302      	adds	r3, #2
 8000608:	0c12      	lsrs	r2, r2, #16
 800060a:	701a      	strb	r2, [r3, #0]
 800060c:	e007      	b.n	800061e <main+0x8e>
	      } else {

	    	unsigned int value = (unsigned int)buf[1];
 800060e:	797b      	ldrb	r3, [r7, #5]
 8000610:	613b      	str	r3, [r7, #16]
	        sprintf((char*)buf,
 8000612:	1d3b      	adds	r3, r7, #4
 8000614:	693a      	ldr	r2, [r7, #16]
 8000616:	490d      	ldr	r1, [pc, #52]	; (800064c <main+0xbc>)
 8000618:	4618      	mov	r0, r3
 800061a:	f002 fe87 	bl	800332c <siprintf>
	              value);
	      }
	    }

	    // Send out buffer (temperature or error message)
	    HAL_UART_Transmit(&huart2, buf, strlen((char*)buf), HAL_MAX_DELAY);
 800061e:	1d3b      	adds	r3, r7, #4
 8000620:	4618      	mov	r0, r3
 8000622:	f7ff fddd 	bl	80001e0 <strlen>
 8000626:	4603      	mov	r3, r0
 8000628:	b29a      	uxth	r2, r3
 800062a:	1d39      	adds	r1, r7, #4
 800062c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000630:	4807      	ldr	r0, [pc, #28]	; (8000650 <main+0xc0>)
 8000632:	f002 f9ea 	bl	8002a0a <HAL_UART_Transmit>

	    // Wait
	    HAL_Delay(20000);
 8000636:	f644 6020 	movw	r0, #20000	; 0x4e20
 800063a:	f000 fb0b 	bl	8000c54 <HAL_Delay>
	    buf[0] = PHOTO;
 800063e:	e7b4      	b.n	80005aa <main+0x1a>
 8000640:	20000098 	.word	0x20000098
 8000644:	08003b50 	.word	0x08003b50
 8000648:	08003b5c 	.word	0x08003b5c
 800064c:	08003b68 	.word	0x08003b68
 8000650:	200000ec 	.word	0x200000ec

08000654 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000654:	b580      	push	{r7, lr}
 8000656:	b094      	sub	sp, #80	; 0x50
 8000658:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800065a:	f107 0320 	add.w	r3, r7, #32
 800065e:	2230      	movs	r2, #48	; 0x30
 8000660:	2100      	movs	r1, #0
 8000662:	4618      	mov	r0, r3
 8000664:	f002 fe5a 	bl	800331c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000668:	f107 030c 	add.w	r3, r7, #12
 800066c:	2200      	movs	r2, #0
 800066e:	601a      	str	r2, [r3, #0]
 8000670:	605a      	str	r2, [r3, #4]
 8000672:	609a      	str	r2, [r3, #8]
 8000674:	60da      	str	r2, [r3, #12]
 8000676:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000678:	2300      	movs	r3, #0
 800067a:	60bb      	str	r3, [r7, #8]
 800067c:	4b29      	ldr	r3, [pc, #164]	; (8000724 <SystemClock_Config+0xd0>)
 800067e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000680:	4a28      	ldr	r2, [pc, #160]	; (8000724 <SystemClock_Config+0xd0>)
 8000682:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000686:	6413      	str	r3, [r2, #64]	; 0x40
 8000688:	4b26      	ldr	r3, [pc, #152]	; (8000724 <SystemClock_Config+0xd0>)
 800068a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800068c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000690:	60bb      	str	r3, [r7, #8]
 8000692:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000694:	2300      	movs	r3, #0
 8000696:	607b      	str	r3, [r7, #4]
 8000698:	4b23      	ldr	r3, [pc, #140]	; (8000728 <SystemClock_Config+0xd4>)
 800069a:	681b      	ldr	r3, [r3, #0]
 800069c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80006a0:	4a21      	ldr	r2, [pc, #132]	; (8000728 <SystemClock_Config+0xd4>)
 80006a2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80006a6:	6013      	str	r3, [r2, #0]
 80006a8:	4b1f      	ldr	r3, [pc, #124]	; (8000728 <SystemClock_Config+0xd4>)
 80006aa:	681b      	ldr	r3, [r3, #0]
 80006ac:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80006b0:	607b      	str	r3, [r7, #4]
 80006b2:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80006b4:	2302      	movs	r3, #2
 80006b6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006b8:	2301      	movs	r3, #1
 80006ba:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006bc:	2310      	movs	r3, #16
 80006be:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006c0:	2302      	movs	r3, #2
 80006c2:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80006c4:	2300      	movs	r3, #0
 80006c6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 80006c8:	2310      	movs	r3, #16
 80006ca:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80006cc:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80006d0:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80006d2:	2304      	movs	r3, #4
 80006d4:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80006d6:	2307      	movs	r3, #7
 80006d8:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006da:	f107 0320 	add.w	r3, r7, #32
 80006de:	4618      	mov	r0, r3
 80006e0:	f001 fce4 	bl	80020ac <HAL_RCC_OscConfig>
 80006e4:	4603      	mov	r3, r0
 80006e6:	2b00      	cmp	r3, #0
 80006e8:	d001      	beq.n	80006ee <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80006ea:	f000 f8e7 	bl	80008bc <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006ee:	230f      	movs	r3, #15
 80006f0:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006f2:	2302      	movs	r3, #2
 80006f4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006f6:	2300      	movs	r3, #0
 80006f8:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80006fa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006fe:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000700:	2300      	movs	r3, #0
 8000702:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000704:	f107 030c 	add.w	r3, r7, #12
 8000708:	2102      	movs	r1, #2
 800070a:	4618      	mov	r0, r3
 800070c:	f001 ff3e 	bl	800258c <HAL_RCC_ClockConfig>
 8000710:	4603      	mov	r3, r0
 8000712:	2b00      	cmp	r3, #0
 8000714:	d001      	beq.n	800071a <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8000716:	f000 f8d1 	bl	80008bc <Error_Handler>
  }
}
 800071a:	bf00      	nop
 800071c:	3750      	adds	r7, #80	; 0x50
 800071e:	46bd      	mov	sp, r7
 8000720:	bd80      	pop	{r7, pc}
 8000722:	bf00      	nop
 8000724:	40023800 	.word	0x40023800
 8000728:	40007000 	.word	0x40007000

0800072c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800072c:	b580      	push	{r7, lr}
 800072e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000730:	4b12      	ldr	r3, [pc, #72]	; (800077c <MX_I2C1_Init+0x50>)
 8000732:	4a13      	ldr	r2, [pc, #76]	; (8000780 <MX_I2C1_Init+0x54>)
 8000734:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000736:	4b11      	ldr	r3, [pc, #68]	; (800077c <MX_I2C1_Init+0x50>)
 8000738:	4a12      	ldr	r2, [pc, #72]	; (8000784 <MX_I2C1_Init+0x58>)
 800073a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800073c:	4b0f      	ldr	r3, [pc, #60]	; (800077c <MX_I2C1_Init+0x50>)
 800073e:	2200      	movs	r2, #0
 8000740:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000742:	4b0e      	ldr	r3, [pc, #56]	; (800077c <MX_I2C1_Init+0x50>)
 8000744:	2200      	movs	r2, #0
 8000746:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000748:	4b0c      	ldr	r3, [pc, #48]	; (800077c <MX_I2C1_Init+0x50>)
 800074a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800074e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000750:	4b0a      	ldr	r3, [pc, #40]	; (800077c <MX_I2C1_Init+0x50>)
 8000752:	2200      	movs	r2, #0
 8000754:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000756:	4b09      	ldr	r3, [pc, #36]	; (800077c <MX_I2C1_Init+0x50>)
 8000758:	2200      	movs	r2, #0
 800075a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800075c:	4b07      	ldr	r3, [pc, #28]	; (800077c <MX_I2C1_Init+0x50>)
 800075e:	2200      	movs	r2, #0
 8000760:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000762:	4b06      	ldr	r3, [pc, #24]	; (800077c <MX_I2C1_Init+0x50>)
 8000764:	2200      	movs	r2, #0
 8000766:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000768:	4804      	ldr	r0, [pc, #16]	; (800077c <MX_I2C1_Init+0x50>)
 800076a:	f000 fd17 	bl	800119c <HAL_I2C_Init>
 800076e:	4603      	mov	r3, r0
 8000770:	2b00      	cmp	r3, #0
 8000772:	d001      	beq.n	8000778 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000774:	f000 f8a2 	bl	80008bc <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000778:	bf00      	nop
 800077a:	bd80      	pop	{r7, pc}
 800077c:	20000098 	.word	0x20000098
 8000780:	40005400 	.word	0x40005400
 8000784:	000186a0 	.word	0x000186a0

08000788 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000788:	b580      	push	{r7, lr}
 800078a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800078c:	4b11      	ldr	r3, [pc, #68]	; (80007d4 <MX_USART2_UART_Init+0x4c>)
 800078e:	4a12      	ldr	r2, [pc, #72]	; (80007d8 <MX_USART2_UART_Init+0x50>)
 8000790:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000792:	4b10      	ldr	r3, [pc, #64]	; (80007d4 <MX_USART2_UART_Init+0x4c>)
 8000794:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000798:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800079a:	4b0e      	ldr	r3, [pc, #56]	; (80007d4 <MX_USART2_UART_Init+0x4c>)
 800079c:	2200      	movs	r2, #0
 800079e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80007a0:	4b0c      	ldr	r3, [pc, #48]	; (80007d4 <MX_USART2_UART_Init+0x4c>)
 80007a2:	2200      	movs	r2, #0
 80007a4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80007a6:	4b0b      	ldr	r3, [pc, #44]	; (80007d4 <MX_USART2_UART_Init+0x4c>)
 80007a8:	2200      	movs	r2, #0
 80007aa:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80007ac:	4b09      	ldr	r3, [pc, #36]	; (80007d4 <MX_USART2_UART_Init+0x4c>)
 80007ae:	220c      	movs	r2, #12
 80007b0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007b2:	4b08      	ldr	r3, [pc, #32]	; (80007d4 <MX_USART2_UART_Init+0x4c>)
 80007b4:	2200      	movs	r2, #0
 80007b6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80007b8:	4b06      	ldr	r3, [pc, #24]	; (80007d4 <MX_USART2_UART_Init+0x4c>)
 80007ba:	2200      	movs	r2, #0
 80007bc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80007be:	4805      	ldr	r0, [pc, #20]	; (80007d4 <MX_USART2_UART_Init+0x4c>)
 80007c0:	f002 f8d6 	bl	8002970 <HAL_UART_Init>
 80007c4:	4603      	mov	r3, r0
 80007c6:	2b00      	cmp	r3, #0
 80007c8:	d001      	beq.n	80007ce <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80007ca:	f000 f877 	bl	80008bc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80007ce:	bf00      	nop
 80007d0:	bd80      	pop	{r7, pc}
 80007d2:	bf00      	nop
 80007d4:	200000ec 	.word	0x200000ec
 80007d8:	40004400 	.word	0x40004400

080007dc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007dc:	b580      	push	{r7, lr}
 80007de:	b08a      	sub	sp, #40	; 0x28
 80007e0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007e2:	f107 0314 	add.w	r3, r7, #20
 80007e6:	2200      	movs	r2, #0
 80007e8:	601a      	str	r2, [r3, #0]
 80007ea:	605a      	str	r2, [r3, #4]
 80007ec:	609a      	str	r2, [r3, #8]
 80007ee:	60da      	str	r2, [r3, #12]
 80007f0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007f2:	2300      	movs	r3, #0
 80007f4:	613b      	str	r3, [r7, #16]
 80007f6:	4b2d      	ldr	r3, [pc, #180]	; (80008ac <MX_GPIO_Init+0xd0>)
 80007f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007fa:	4a2c      	ldr	r2, [pc, #176]	; (80008ac <MX_GPIO_Init+0xd0>)
 80007fc:	f043 0304 	orr.w	r3, r3, #4
 8000800:	6313      	str	r3, [r2, #48]	; 0x30
 8000802:	4b2a      	ldr	r3, [pc, #168]	; (80008ac <MX_GPIO_Init+0xd0>)
 8000804:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000806:	f003 0304 	and.w	r3, r3, #4
 800080a:	613b      	str	r3, [r7, #16]
 800080c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800080e:	2300      	movs	r3, #0
 8000810:	60fb      	str	r3, [r7, #12]
 8000812:	4b26      	ldr	r3, [pc, #152]	; (80008ac <MX_GPIO_Init+0xd0>)
 8000814:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000816:	4a25      	ldr	r2, [pc, #148]	; (80008ac <MX_GPIO_Init+0xd0>)
 8000818:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800081c:	6313      	str	r3, [r2, #48]	; 0x30
 800081e:	4b23      	ldr	r3, [pc, #140]	; (80008ac <MX_GPIO_Init+0xd0>)
 8000820:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000822:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000826:	60fb      	str	r3, [r7, #12]
 8000828:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800082a:	2300      	movs	r3, #0
 800082c:	60bb      	str	r3, [r7, #8]
 800082e:	4b1f      	ldr	r3, [pc, #124]	; (80008ac <MX_GPIO_Init+0xd0>)
 8000830:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000832:	4a1e      	ldr	r2, [pc, #120]	; (80008ac <MX_GPIO_Init+0xd0>)
 8000834:	f043 0301 	orr.w	r3, r3, #1
 8000838:	6313      	str	r3, [r2, #48]	; 0x30
 800083a:	4b1c      	ldr	r3, [pc, #112]	; (80008ac <MX_GPIO_Init+0xd0>)
 800083c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800083e:	f003 0301 	and.w	r3, r3, #1
 8000842:	60bb      	str	r3, [r7, #8]
 8000844:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000846:	2300      	movs	r3, #0
 8000848:	607b      	str	r3, [r7, #4]
 800084a:	4b18      	ldr	r3, [pc, #96]	; (80008ac <MX_GPIO_Init+0xd0>)
 800084c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800084e:	4a17      	ldr	r2, [pc, #92]	; (80008ac <MX_GPIO_Init+0xd0>)
 8000850:	f043 0302 	orr.w	r3, r3, #2
 8000854:	6313      	str	r3, [r2, #48]	; 0x30
 8000856:	4b15      	ldr	r3, [pc, #84]	; (80008ac <MX_GPIO_Init+0xd0>)
 8000858:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800085a:	f003 0302 	and.w	r3, r3, #2
 800085e:	607b      	str	r3, [r7, #4]
 8000860:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000862:	2200      	movs	r2, #0
 8000864:	2120      	movs	r1, #32
 8000866:	4812      	ldr	r0, [pc, #72]	; (80008b0 <MX_GPIO_Init+0xd4>)
 8000868:	f000 fc7e 	bl	8001168 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800086c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000870:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000872:	4b10      	ldr	r3, [pc, #64]	; (80008b4 <MX_GPIO_Init+0xd8>)
 8000874:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000876:	2300      	movs	r3, #0
 8000878:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800087a:	f107 0314 	add.w	r3, r7, #20
 800087e:	4619      	mov	r1, r3
 8000880:	480d      	ldr	r0, [pc, #52]	; (80008b8 <MX_GPIO_Init+0xdc>)
 8000882:	f000 faef 	bl	8000e64 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000886:	2320      	movs	r3, #32
 8000888:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800088a:	2301      	movs	r3, #1
 800088c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800088e:	2300      	movs	r3, #0
 8000890:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000892:	2300      	movs	r3, #0
 8000894:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000896:	f107 0314 	add.w	r3, r7, #20
 800089a:	4619      	mov	r1, r3
 800089c:	4804      	ldr	r0, [pc, #16]	; (80008b0 <MX_GPIO_Init+0xd4>)
 800089e:	f000 fae1 	bl	8000e64 <HAL_GPIO_Init>

}
 80008a2:	bf00      	nop
 80008a4:	3728      	adds	r7, #40	; 0x28
 80008a6:	46bd      	mov	sp, r7
 80008a8:	bd80      	pop	{r7, pc}
 80008aa:	bf00      	nop
 80008ac:	40023800 	.word	0x40023800
 80008b0:	40020000 	.word	0x40020000
 80008b4:	10210000 	.word	0x10210000
 80008b8:	40020800 	.word	0x40020800

080008bc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80008bc:	b480      	push	{r7}
 80008be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80008c0:	bf00      	nop
 80008c2:	46bd      	mov	sp, r7
 80008c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008c8:	4770      	bx	lr
	...

080008cc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008cc:	b580      	push	{r7, lr}
 80008ce:	b082      	sub	sp, #8
 80008d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008d2:	2300      	movs	r3, #0
 80008d4:	607b      	str	r3, [r7, #4]
 80008d6:	4b10      	ldr	r3, [pc, #64]	; (8000918 <HAL_MspInit+0x4c>)
 80008d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008da:	4a0f      	ldr	r2, [pc, #60]	; (8000918 <HAL_MspInit+0x4c>)
 80008dc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80008e0:	6453      	str	r3, [r2, #68]	; 0x44
 80008e2:	4b0d      	ldr	r3, [pc, #52]	; (8000918 <HAL_MspInit+0x4c>)
 80008e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008e6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80008ea:	607b      	str	r3, [r7, #4]
 80008ec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80008ee:	2300      	movs	r3, #0
 80008f0:	603b      	str	r3, [r7, #0]
 80008f2:	4b09      	ldr	r3, [pc, #36]	; (8000918 <HAL_MspInit+0x4c>)
 80008f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008f6:	4a08      	ldr	r2, [pc, #32]	; (8000918 <HAL_MspInit+0x4c>)
 80008f8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80008fc:	6413      	str	r3, [r2, #64]	; 0x40
 80008fe:	4b06      	ldr	r3, [pc, #24]	; (8000918 <HAL_MspInit+0x4c>)
 8000900:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000902:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000906:	603b      	str	r3, [r7, #0]
 8000908:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800090a:	2007      	movs	r0, #7
 800090c:	f000 fa76 	bl	8000dfc <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000910:	bf00      	nop
 8000912:	3708      	adds	r7, #8
 8000914:	46bd      	mov	sp, r7
 8000916:	bd80      	pop	{r7, pc}
 8000918:	40023800 	.word	0x40023800

0800091c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800091c:	b580      	push	{r7, lr}
 800091e:	b08a      	sub	sp, #40	; 0x28
 8000920:	af00      	add	r7, sp, #0
 8000922:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000924:	f107 0314 	add.w	r3, r7, #20
 8000928:	2200      	movs	r2, #0
 800092a:	601a      	str	r2, [r3, #0]
 800092c:	605a      	str	r2, [r3, #4]
 800092e:	609a      	str	r2, [r3, #8]
 8000930:	60da      	str	r2, [r3, #12]
 8000932:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000934:	687b      	ldr	r3, [r7, #4]
 8000936:	681b      	ldr	r3, [r3, #0]
 8000938:	4a19      	ldr	r2, [pc, #100]	; (80009a0 <HAL_I2C_MspInit+0x84>)
 800093a:	4293      	cmp	r3, r2
 800093c:	d12c      	bne.n	8000998 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800093e:	2300      	movs	r3, #0
 8000940:	613b      	str	r3, [r7, #16]
 8000942:	4b18      	ldr	r3, [pc, #96]	; (80009a4 <HAL_I2C_MspInit+0x88>)
 8000944:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000946:	4a17      	ldr	r2, [pc, #92]	; (80009a4 <HAL_I2C_MspInit+0x88>)
 8000948:	f043 0302 	orr.w	r3, r3, #2
 800094c:	6313      	str	r3, [r2, #48]	; 0x30
 800094e:	4b15      	ldr	r3, [pc, #84]	; (80009a4 <HAL_I2C_MspInit+0x88>)
 8000950:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000952:	f003 0302 	and.w	r3, r3, #2
 8000956:	613b      	str	r3, [r7, #16]
 8000958:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration    
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800095a:	f44f 7340 	mov.w	r3, #768	; 0x300
 800095e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000960:	2312      	movs	r3, #18
 8000962:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000964:	2301      	movs	r3, #1
 8000966:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000968:	2303      	movs	r3, #3
 800096a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800096c:	2304      	movs	r3, #4
 800096e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000970:	f107 0314 	add.w	r3, r7, #20
 8000974:	4619      	mov	r1, r3
 8000976:	480c      	ldr	r0, [pc, #48]	; (80009a8 <HAL_I2C_MspInit+0x8c>)
 8000978:	f000 fa74 	bl	8000e64 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800097c:	2300      	movs	r3, #0
 800097e:	60fb      	str	r3, [r7, #12]
 8000980:	4b08      	ldr	r3, [pc, #32]	; (80009a4 <HAL_I2C_MspInit+0x88>)
 8000982:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000984:	4a07      	ldr	r2, [pc, #28]	; (80009a4 <HAL_I2C_MspInit+0x88>)
 8000986:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800098a:	6413      	str	r3, [r2, #64]	; 0x40
 800098c:	4b05      	ldr	r3, [pc, #20]	; (80009a4 <HAL_I2C_MspInit+0x88>)
 800098e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000990:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000994:	60fb      	str	r3, [r7, #12]
 8000996:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000998:	bf00      	nop
 800099a:	3728      	adds	r7, #40	; 0x28
 800099c:	46bd      	mov	sp, r7
 800099e:	bd80      	pop	{r7, pc}
 80009a0:	40005400 	.word	0x40005400
 80009a4:	40023800 	.word	0x40023800
 80009a8:	40020400 	.word	0x40020400

080009ac <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80009ac:	b580      	push	{r7, lr}
 80009ae:	b08a      	sub	sp, #40	; 0x28
 80009b0:	af00      	add	r7, sp, #0
 80009b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009b4:	f107 0314 	add.w	r3, r7, #20
 80009b8:	2200      	movs	r2, #0
 80009ba:	601a      	str	r2, [r3, #0]
 80009bc:	605a      	str	r2, [r3, #4]
 80009be:	609a      	str	r2, [r3, #8]
 80009c0:	60da      	str	r2, [r3, #12]
 80009c2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80009c4:	687b      	ldr	r3, [r7, #4]
 80009c6:	681b      	ldr	r3, [r3, #0]
 80009c8:	4a19      	ldr	r2, [pc, #100]	; (8000a30 <HAL_UART_MspInit+0x84>)
 80009ca:	4293      	cmp	r3, r2
 80009cc:	d12b      	bne.n	8000a26 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80009ce:	2300      	movs	r3, #0
 80009d0:	613b      	str	r3, [r7, #16]
 80009d2:	4b18      	ldr	r3, [pc, #96]	; (8000a34 <HAL_UART_MspInit+0x88>)
 80009d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009d6:	4a17      	ldr	r2, [pc, #92]	; (8000a34 <HAL_UART_MspInit+0x88>)
 80009d8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80009dc:	6413      	str	r3, [r2, #64]	; 0x40
 80009de:	4b15      	ldr	r3, [pc, #84]	; (8000a34 <HAL_UART_MspInit+0x88>)
 80009e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80009e6:	613b      	str	r3, [r7, #16]
 80009e8:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009ea:	2300      	movs	r3, #0
 80009ec:	60fb      	str	r3, [r7, #12]
 80009ee:	4b11      	ldr	r3, [pc, #68]	; (8000a34 <HAL_UART_MspInit+0x88>)
 80009f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009f2:	4a10      	ldr	r2, [pc, #64]	; (8000a34 <HAL_UART_MspInit+0x88>)
 80009f4:	f043 0301 	orr.w	r3, r3, #1
 80009f8:	6313      	str	r3, [r2, #48]	; 0x30
 80009fa:	4b0e      	ldr	r3, [pc, #56]	; (8000a34 <HAL_UART_MspInit+0x88>)
 80009fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009fe:	f003 0301 	and.w	r3, r3, #1
 8000a02:	60fb      	str	r3, [r7, #12]
 8000a04:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000a06:	230c      	movs	r3, #12
 8000a08:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a0a:	2302      	movs	r3, #2
 8000a0c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a0e:	2300      	movs	r3, #0
 8000a10:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a12:	2300      	movs	r3, #0
 8000a14:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000a16:	2307      	movs	r3, #7
 8000a18:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a1a:	f107 0314 	add.w	r3, r7, #20
 8000a1e:	4619      	mov	r1, r3
 8000a20:	4805      	ldr	r0, [pc, #20]	; (8000a38 <HAL_UART_MspInit+0x8c>)
 8000a22:	f000 fa1f 	bl	8000e64 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000a26:	bf00      	nop
 8000a28:	3728      	adds	r7, #40	; 0x28
 8000a2a:	46bd      	mov	sp, r7
 8000a2c:	bd80      	pop	{r7, pc}
 8000a2e:	bf00      	nop
 8000a30:	40004400 	.word	0x40004400
 8000a34:	40023800 	.word	0x40023800
 8000a38:	40020000 	.word	0x40020000

08000a3c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a3c:	b480      	push	{r7}
 8000a3e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000a40:	bf00      	nop
 8000a42:	46bd      	mov	sp, r7
 8000a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a48:	4770      	bx	lr

08000a4a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a4a:	b480      	push	{r7}
 8000a4c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a4e:	e7fe      	b.n	8000a4e <HardFault_Handler+0x4>

08000a50 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a50:	b480      	push	{r7}
 8000a52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a54:	e7fe      	b.n	8000a54 <MemManage_Handler+0x4>

08000a56 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a56:	b480      	push	{r7}
 8000a58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a5a:	e7fe      	b.n	8000a5a <BusFault_Handler+0x4>

08000a5c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a5c:	b480      	push	{r7}
 8000a5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a60:	e7fe      	b.n	8000a60 <UsageFault_Handler+0x4>

08000a62 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a62:	b480      	push	{r7}
 8000a64:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000a66:	bf00      	nop
 8000a68:	46bd      	mov	sp, r7
 8000a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a6e:	4770      	bx	lr

08000a70 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a70:	b480      	push	{r7}
 8000a72:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a74:	bf00      	nop
 8000a76:	46bd      	mov	sp, r7
 8000a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a7c:	4770      	bx	lr

08000a7e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000a7e:	b480      	push	{r7}
 8000a80:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000a82:	bf00      	nop
 8000a84:	46bd      	mov	sp, r7
 8000a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a8a:	4770      	bx	lr

08000a8c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a8c:	b580      	push	{r7, lr}
 8000a8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a90:	f000 f8c0 	bl	8000c14 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a94:	bf00      	nop
 8000a96:	bd80      	pop	{r7, pc}

08000a98 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8000a98:	b580      	push	{r7, lr}
 8000a9a:	b084      	sub	sp, #16
 8000a9c:	af00      	add	r7, sp, #0
 8000a9e:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8000aa0:	4b11      	ldr	r3, [pc, #68]	; (8000ae8 <_sbrk+0x50>)
 8000aa2:	681b      	ldr	r3, [r3, #0]
 8000aa4:	2b00      	cmp	r3, #0
 8000aa6:	d102      	bne.n	8000aae <_sbrk+0x16>
		heap_end = &end;
 8000aa8:	4b0f      	ldr	r3, [pc, #60]	; (8000ae8 <_sbrk+0x50>)
 8000aaa:	4a10      	ldr	r2, [pc, #64]	; (8000aec <_sbrk+0x54>)
 8000aac:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8000aae:	4b0e      	ldr	r3, [pc, #56]	; (8000ae8 <_sbrk+0x50>)
 8000ab0:	681b      	ldr	r3, [r3, #0]
 8000ab2:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8000ab4:	4b0c      	ldr	r3, [pc, #48]	; (8000ae8 <_sbrk+0x50>)
 8000ab6:	681a      	ldr	r2, [r3, #0]
 8000ab8:	687b      	ldr	r3, [r7, #4]
 8000aba:	4413      	add	r3, r2
 8000abc:	466a      	mov	r2, sp
 8000abe:	4293      	cmp	r3, r2
 8000ac0:	d907      	bls.n	8000ad2 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8000ac2:	f002 fc01 	bl	80032c8 <__errno>
 8000ac6:	4602      	mov	r2, r0
 8000ac8:	230c      	movs	r3, #12
 8000aca:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8000acc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000ad0:	e006      	b.n	8000ae0 <_sbrk+0x48>
	}

	heap_end += incr;
 8000ad2:	4b05      	ldr	r3, [pc, #20]	; (8000ae8 <_sbrk+0x50>)
 8000ad4:	681a      	ldr	r2, [r3, #0]
 8000ad6:	687b      	ldr	r3, [r7, #4]
 8000ad8:	4413      	add	r3, r2
 8000ada:	4a03      	ldr	r2, [pc, #12]	; (8000ae8 <_sbrk+0x50>)
 8000adc:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8000ade:	68fb      	ldr	r3, [r7, #12]
}
 8000ae0:	4618      	mov	r0, r3
 8000ae2:	3710      	adds	r7, #16
 8000ae4:	46bd      	mov	sp, r7
 8000ae6:	bd80      	pop	{r7, pc}
 8000ae8:	2000008c 	.word	0x2000008c
 8000aec:	20000138 	.word	0x20000138

08000af0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000af0:	b480      	push	{r7}
 8000af2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000af4:	4b08      	ldr	r3, [pc, #32]	; (8000b18 <SystemInit+0x28>)
 8000af6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000afa:	4a07      	ldr	r2, [pc, #28]	; (8000b18 <SystemInit+0x28>)
 8000afc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000b00:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000b04:	4b04      	ldr	r3, [pc, #16]	; (8000b18 <SystemInit+0x28>)
 8000b06:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000b0a:	609a      	str	r2, [r3, #8]
#endif
}
 8000b0c:	bf00      	nop
 8000b0e:	46bd      	mov	sp, r7
 8000b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b14:	4770      	bx	lr
 8000b16:	bf00      	nop
 8000b18:	e000ed00 	.word	0xe000ed00

08000b1c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000b1c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000b54 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000b20:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000b22:	e003      	b.n	8000b2c <LoopCopyDataInit>

08000b24 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000b24:	4b0c      	ldr	r3, [pc, #48]	; (8000b58 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8000b26:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000b28:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000b2a:	3104      	adds	r1, #4

08000b2c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000b2c:	480b      	ldr	r0, [pc, #44]	; (8000b5c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8000b2e:	4b0c      	ldr	r3, [pc, #48]	; (8000b60 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000b30:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000b32:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000b34:	d3f6      	bcc.n	8000b24 <CopyDataInit>
  ldr  r2, =_sbss
 8000b36:	4a0b      	ldr	r2, [pc, #44]	; (8000b64 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8000b38:	e002      	b.n	8000b40 <LoopFillZerobss>

08000b3a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8000b3a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000b3c:	f842 3b04 	str.w	r3, [r2], #4

08000b40 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000b40:	4b09      	ldr	r3, [pc, #36]	; (8000b68 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8000b42:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000b44:	d3f9      	bcc.n	8000b3a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000b46:	f7ff ffd3 	bl	8000af0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000b4a:	f002 fbc3 	bl	80032d4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000b4e:	f7ff fd1f 	bl	8000590 <main>
  bx  lr    
 8000b52:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000b54:	20018000 	.word	0x20018000
  ldr  r3, =_sidata
 8000b58:	08003bcc 	.word	0x08003bcc
  ldr  r0, =_sdata
 8000b5c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000b60:	20000070 	.word	0x20000070
  ldr  r2, =_sbss
 8000b64:	20000070 	.word	0x20000070
  ldr  r3, = _ebss
 8000b68:	20000134 	.word	0x20000134

08000b6c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000b6c:	e7fe      	b.n	8000b6c <ADC_IRQHandler>
	...

08000b70 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b70:	b580      	push	{r7, lr}
 8000b72:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000b74:	4b0e      	ldr	r3, [pc, #56]	; (8000bb0 <HAL_Init+0x40>)
 8000b76:	681b      	ldr	r3, [r3, #0]
 8000b78:	4a0d      	ldr	r2, [pc, #52]	; (8000bb0 <HAL_Init+0x40>)
 8000b7a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000b7e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000b80:	4b0b      	ldr	r3, [pc, #44]	; (8000bb0 <HAL_Init+0x40>)
 8000b82:	681b      	ldr	r3, [r3, #0]
 8000b84:	4a0a      	ldr	r2, [pc, #40]	; (8000bb0 <HAL_Init+0x40>)
 8000b86:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000b8a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000b8c:	4b08      	ldr	r3, [pc, #32]	; (8000bb0 <HAL_Init+0x40>)
 8000b8e:	681b      	ldr	r3, [r3, #0]
 8000b90:	4a07      	ldr	r2, [pc, #28]	; (8000bb0 <HAL_Init+0x40>)
 8000b92:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000b96:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b98:	2003      	movs	r0, #3
 8000b9a:	f000 f92f 	bl	8000dfc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000b9e:	2000      	movs	r0, #0
 8000ba0:	f000 f808 	bl	8000bb4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000ba4:	f7ff fe92 	bl	80008cc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000ba8:	2300      	movs	r3, #0
}
 8000baa:	4618      	mov	r0, r3
 8000bac:	bd80      	pop	{r7, pc}
 8000bae:	bf00      	nop
 8000bb0:	40023c00 	.word	0x40023c00

08000bb4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000bb4:	b580      	push	{r7, lr}
 8000bb6:	b082      	sub	sp, #8
 8000bb8:	af00      	add	r7, sp, #0
 8000bba:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000bbc:	4b12      	ldr	r3, [pc, #72]	; (8000c08 <HAL_InitTick+0x54>)
 8000bbe:	681a      	ldr	r2, [r3, #0]
 8000bc0:	4b12      	ldr	r3, [pc, #72]	; (8000c0c <HAL_InitTick+0x58>)
 8000bc2:	781b      	ldrb	r3, [r3, #0]
 8000bc4:	4619      	mov	r1, r3
 8000bc6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000bca:	fbb3 f3f1 	udiv	r3, r3, r1
 8000bce:	fbb2 f3f3 	udiv	r3, r2, r3
 8000bd2:	4618      	mov	r0, r3
 8000bd4:	f000 f939 	bl	8000e4a <HAL_SYSTICK_Config>
 8000bd8:	4603      	mov	r3, r0
 8000bda:	2b00      	cmp	r3, #0
 8000bdc:	d001      	beq.n	8000be2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000bde:	2301      	movs	r3, #1
 8000be0:	e00e      	b.n	8000c00 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000be2:	687b      	ldr	r3, [r7, #4]
 8000be4:	2b0f      	cmp	r3, #15
 8000be6:	d80a      	bhi.n	8000bfe <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000be8:	2200      	movs	r2, #0
 8000bea:	6879      	ldr	r1, [r7, #4]
 8000bec:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000bf0:	f000 f90f 	bl	8000e12 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000bf4:	4a06      	ldr	r2, [pc, #24]	; (8000c10 <HAL_InitTick+0x5c>)
 8000bf6:	687b      	ldr	r3, [r7, #4]
 8000bf8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000bfa:	2300      	movs	r3, #0
 8000bfc:	e000      	b.n	8000c00 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000bfe:	2301      	movs	r3, #1
}
 8000c00:	4618      	mov	r0, r3
 8000c02:	3708      	adds	r7, #8
 8000c04:	46bd      	mov	sp, r7
 8000c06:	bd80      	pop	{r7, pc}
 8000c08:	20000000 	.word	0x20000000
 8000c0c:	20000008 	.word	0x20000008
 8000c10:	20000004 	.word	0x20000004

08000c14 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c14:	b480      	push	{r7}
 8000c16:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000c18:	4b06      	ldr	r3, [pc, #24]	; (8000c34 <HAL_IncTick+0x20>)
 8000c1a:	781b      	ldrb	r3, [r3, #0]
 8000c1c:	461a      	mov	r2, r3
 8000c1e:	4b06      	ldr	r3, [pc, #24]	; (8000c38 <HAL_IncTick+0x24>)
 8000c20:	681b      	ldr	r3, [r3, #0]
 8000c22:	4413      	add	r3, r2
 8000c24:	4a04      	ldr	r2, [pc, #16]	; (8000c38 <HAL_IncTick+0x24>)
 8000c26:	6013      	str	r3, [r2, #0]
}
 8000c28:	bf00      	nop
 8000c2a:	46bd      	mov	sp, r7
 8000c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c30:	4770      	bx	lr
 8000c32:	bf00      	nop
 8000c34:	20000008 	.word	0x20000008
 8000c38:	2000012c 	.word	0x2000012c

08000c3c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c3c:	b480      	push	{r7}
 8000c3e:	af00      	add	r7, sp, #0
  return uwTick;
 8000c40:	4b03      	ldr	r3, [pc, #12]	; (8000c50 <HAL_GetTick+0x14>)
 8000c42:	681b      	ldr	r3, [r3, #0]
}
 8000c44:	4618      	mov	r0, r3
 8000c46:	46bd      	mov	sp, r7
 8000c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c4c:	4770      	bx	lr
 8000c4e:	bf00      	nop
 8000c50:	2000012c 	.word	0x2000012c

08000c54 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000c54:	b580      	push	{r7, lr}
 8000c56:	b084      	sub	sp, #16
 8000c58:	af00      	add	r7, sp, #0
 8000c5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000c5c:	f7ff ffee 	bl	8000c3c <HAL_GetTick>
 8000c60:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000c62:	687b      	ldr	r3, [r7, #4]
 8000c64:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000c66:	68fb      	ldr	r3, [r7, #12]
 8000c68:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000c6c:	d005      	beq.n	8000c7a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000c6e:	4b09      	ldr	r3, [pc, #36]	; (8000c94 <HAL_Delay+0x40>)
 8000c70:	781b      	ldrb	r3, [r3, #0]
 8000c72:	461a      	mov	r2, r3
 8000c74:	68fb      	ldr	r3, [r7, #12]
 8000c76:	4413      	add	r3, r2
 8000c78:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000c7a:	bf00      	nop
 8000c7c:	f7ff ffde 	bl	8000c3c <HAL_GetTick>
 8000c80:	4602      	mov	r2, r0
 8000c82:	68bb      	ldr	r3, [r7, #8]
 8000c84:	1ad3      	subs	r3, r2, r3
 8000c86:	68fa      	ldr	r2, [r7, #12]
 8000c88:	429a      	cmp	r2, r3
 8000c8a:	d8f7      	bhi.n	8000c7c <HAL_Delay+0x28>
  {
  }
}
 8000c8c:	bf00      	nop
 8000c8e:	3710      	adds	r7, #16
 8000c90:	46bd      	mov	sp, r7
 8000c92:	bd80      	pop	{r7, pc}
 8000c94:	20000008 	.word	0x20000008

08000c98 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c98:	b480      	push	{r7}
 8000c9a:	b085      	sub	sp, #20
 8000c9c:	af00      	add	r7, sp, #0
 8000c9e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	f003 0307 	and.w	r3, r3, #7
 8000ca6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ca8:	4b0c      	ldr	r3, [pc, #48]	; (8000cdc <__NVIC_SetPriorityGrouping+0x44>)
 8000caa:	68db      	ldr	r3, [r3, #12]
 8000cac:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000cae:	68ba      	ldr	r2, [r7, #8]
 8000cb0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000cb4:	4013      	ands	r3, r2
 8000cb6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000cb8:	68fb      	ldr	r3, [r7, #12]
 8000cba:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000cbc:	68bb      	ldr	r3, [r7, #8]
 8000cbe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000cc0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000cc4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000cc8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000cca:	4a04      	ldr	r2, [pc, #16]	; (8000cdc <__NVIC_SetPriorityGrouping+0x44>)
 8000ccc:	68bb      	ldr	r3, [r7, #8]
 8000cce:	60d3      	str	r3, [r2, #12]
}
 8000cd0:	bf00      	nop
 8000cd2:	3714      	adds	r7, #20
 8000cd4:	46bd      	mov	sp, r7
 8000cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cda:	4770      	bx	lr
 8000cdc:	e000ed00 	.word	0xe000ed00

08000ce0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000ce0:	b480      	push	{r7}
 8000ce2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ce4:	4b04      	ldr	r3, [pc, #16]	; (8000cf8 <__NVIC_GetPriorityGrouping+0x18>)
 8000ce6:	68db      	ldr	r3, [r3, #12]
 8000ce8:	0a1b      	lsrs	r3, r3, #8
 8000cea:	f003 0307 	and.w	r3, r3, #7
}
 8000cee:	4618      	mov	r0, r3
 8000cf0:	46bd      	mov	sp, r7
 8000cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf6:	4770      	bx	lr
 8000cf8:	e000ed00 	.word	0xe000ed00

08000cfc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000cfc:	b480      	push	{r7}
 8000cfe:	b083      	sub	sp, #12
 8000d00:	af00      	add	r7, sp, #0
 8000d02:	4603      	mov	r3, r0
 8000d04:	6039      	str	r1, [r7, #0]
 8000d06:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d08:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d0c:	2b00      	cmp	r3, #0
 8000d0e:	db0a      	blt.n	8000d26 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d10:	683b      	ldr	r3, [r7, #0]
 8000d12:	b2da      	uxtb	r2, r3
 8000d14:	490c      	ldr	r1, [pc, #48]	; (8000d48 <__NVIC_SetPriority+0x4c>)
 8000d16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d1a:	0112      	lsls	r2, r2, #4
 8000d1c:	b2d2      	uxtb	r2, r2
 8000d1e:	440b      	add	r3, r1
 8000d20:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000d24:	e00a      	b.n	8000d3c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d26:	683b      	ldr	r3, [r7, #0]
 8000d28:	b2da      	uxtb	r2, r3
 8000d2a:	4908      	ldr	r1, [pc, #32]	; (8000d4c <__NVIC_SetPriority+0x50>)
 8000d2c:	79fb      	ldrb	r3, [r7, #7]
 8000d2e:	f003 030f 	and.w	r3, r3, #15
 8000d32:	3b04      	subs	r3, #4
 8000d34:	0112      	lsls	r2, r2, #4
 8000d36:	b2d2      	uxtb	r2, r2
 8000d38:	440b      	add	r3, r1
 8000d3a:	761a      	strb	r2, [r3, #24]
}
 8000d3c:	bf00      	nop
 8000d3e:	370c      	adds	r7, #12
 8000d40:	46bd      	mov	sp, r7
 8000d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d46:	4770      	bx	lr
 8000d48:	e000e100 	.word	0xe000e100
 8000d4c:	e000ed00 	.word	0xe000ed00

08000d50 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d50:	b480      	push	{r7}
 8000d52:	b089      	sub	sp, #36	; 0x24
 8000d54:	af00      	add	r7, sp, #0
 8000d56:	60f8      	str	r0, [r7, #12]
 8000d58:	60b9      	str	r1, [r7, #8]
 8000d5a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000d5c:	68fb      	ldr	r3, [r7, #12]
 8000d5e:	f003 0307 	and.w	r3, r3, #7
 8000d62:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d64:	69fb      	ldr	r3, [r7, #28]
 8000d66:	f1c3 0307 	rsb	r3, r3, #7
 8000d6a:	2b04      	cmp	r3, #4
 8000d6c:	bf28      	it	cs
 8000d6e:	2304      	movcs	r3, #4
 8000d70:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d72:	69fb      	ldr	r3, [r7, #28]
 8000d74:	3304      	adds	r3, #4
 8000d76:	2b06      	cmp	r3, #6
 8000d78:	d902      	bls.n	8000d80 <NVIC_EncodePriority+0x30>
 8000d7a:	69fb      	ldr	r3, [r7, #28]
 8000d7c:	3b03      	subs	r3, #3
 8000d7e:	e000      	b.n	8000d82 <NVIC_EncodePriority+0x32>
 8000d80:	2300      	movs	r3, #0
 8000d82:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d84:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000d88:	69bb      	ldr	r3, [r7, #24]
 8000d8a:	fa02 f303 	lsl.w	r3, r2, r3
 8000d8e:	43da      	mvns	r2, r3
 8000d90:	68bb      	ldr	r3, [r7, #8]
 8000d92:	401a      	ands	r2, r3
 8000d94:	697b      	ldr	r3, [r7, #20]
 8000d96:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000d98:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000d9c:	697b      	ldr	r3, [r7, #20]
 8000d9e:	fa01 f303 	lsl.w	r3, r1, r3
 8000da2:	43d9      	mvns	r1, r3
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000da8:	4313      	orrs	r3, r2
         );
}
 8000daa:	4618      	mov	r0, r3
 8000dac:	3724      	adds	r7, #36	; 0x24
 8000dae:	46bd      	mov	sp, r7
 8000db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db4:	4770      	bx	lr
	...

08000db8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000db8:	b580      	push	{r7, lr}
 8000dba:	b082      	sub	sp, #8
 8000dbc:	af00      	add	r7, sp, #0
 8000dbe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	3b01      	subs	r3, #1
 8000dc4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000dc8:	d301      	bcc.n	8000dce <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000dca:	2301      	movs	r3, #1
 8000dcc:	e00f      	b.n	8000dee <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000dce:	4a0a      	ldr	r2, [pc, #40]	; (8000df8 <SysTick_Config+0x40>)
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	3b01      	subs	r3, #1
 8000dd4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000dd6:	210f      	movs	r1, #15
 8000dd8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000ddc:	f7ff ff8e 	bl	8000cfc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000de0:	4b05      	ldr	r3, [pc, #20]	; (8000df8 <SysTick_Config+0x40>)
 8000de2:	2200      	movs	r2, #0
 8000de4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000de6:	4b04      	ldr	r3, [pc, #16]	; (8000df8 <SysTick_Config+0x40>)
 8000de8:	2207      	movs	r2, #7
 8000dea:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000dec:	2300      	movs	r3, #0
}
 8000dee:	4618      	mov	r0, r3
 8000df0:	3708      	adds	r7, #8
 8000df2:	46bd      	mov	sp, r7
 8000df4:	bd80      	pop	{r7, pc}
 8000df6:	bf00      	nop
 8000df8:	e000e010 	.word	0xe000e010

08000dfc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000dfc:	b580      	push	{r7, lr}
 8000dfe:	b082      	sub	sp, #8
 8000e00:	af00      	add	r7, sp, #0
 8000e02:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000e04:	6878      	ldr	r0, [r7, #4]
 8000e06:	f7ff ff47 	bl	8000c98 <__NVIC_SetPriorityGrouping>
}
 8000e0a:	bf00      	nop
 8000e0c:	3708      	adds	r7, #8
 8000e0e:	46bd      	mov	sp, r7
 8000e10:	bd80      	pop	{r7, pc}

08000e12 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000e12:	b580      	push	{r7, lr}
 8000e14:	b086      	sub	sp, #24
 8000e16:	af00      	add	r7, sp, #0
 8000e18:	4603      	mov	r3, r0
 8000e1a:	60b9      	str	r1, [r7, #8]
 8000e1c:	607a      	str	r2, [r7, #4]
 8000e1e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000e20:	2300      	movs	r3, #0
 8000e22:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000e24:	f7ff ff5c 	bl	8000ce0 <__NVIC_GetPriorityGrouping>
 8000e28:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000e2a:	687a      	ldr	r2, [r7, #4]
 8000e2c:	68b9      	ldr	r1, [r7, #8]
 8000e2e:	6978      	ldr	r0, [r7, #20]
 8000e30:	f7ff ff8e 	bl	8000d50 <NVIC_EncodePriority>
 8000e34:	4602      	mov	r2, r0
 8000e36:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e3a:	4611      	mov	r1, r2
 8000e3c:	4618      	mov	r0, r3
 8000e3e:	f7ff ff5d 	bl	8000cfc <__NVIC_SetPriority>
}
 8000e42:	bf00      	nop
 8000e44:	3718      	adds	r7, #24
 8000e46:	46bd      	mov	sp, r7
 8000e48:	bd80      	pop	{r7, pc}

08000e4a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000e4a:	b580      	push	{r7, lr}
 8000e4c:	b082      	sub	sp, #8
 8000e4e:	af00      	add	r7, sp, #0
 8000e50:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000e52:	6878      	ldr	r0, [r7, #4]
 8000e54:	f7ff ffb0 	bl	8000db8 <SysTick_Config>
 8000e58:	4603      	mov	r3, r0
}
 8000e5a:	4618      	mov	r0, r3
 8000e5c:	3708      	adds	r7, #8
 8000e5e:	46bd      	mov	sp, r7
 8000e60:	bd80      	pop	{r7, pc}
	...

08000e64 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000e64:	b480      	push	{r7}
 8000e66:	b089      	sub	sp, #36	; 0x24
 8000e68:	af00      	add	r7, sp, #0
 8000e6a:	6078      	str	r0, [r7, #4]
 8000e6c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000e6e:	2300      	movs	r3, #0
 8000e70:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000e72:	2300      	movs	r3, #0
 8000e74:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000e76:	2300      	movs	r3, #0
 8000e78:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000e7a:	2300      	movs	r3, #0
 8000e7c:	61fb      	str	r3, [r7, #28]
 8000e7e:	e159      	b.n	8001134 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000e80:	2201      	movs	r2, #1
 8000e82:	69fb      	ldr	r3, [r7, #28]
 8000e84:	fa02 f303 	lsl.w	r3, r2, r3
 8000e88:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000e8a:	683b      	ldr	r3, [r7, #0]
 8000e8c:	681b      	ldr	r3, [r3, #0]
 8000e8e:	697a      	ldr	r2, [r7, #20]
 8000e90:	4013      	ands	r3, r2
 8000e92:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000e94:	693a      	ldr	r2, [r7, #16]
 8000e96:	697b      	ldr	r3, [r7, #20]
 8000e98:	429a      	cmp	r2, r3
 8000e9a:	f040 8148 	bne.w	800112e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000e9e:	683b      	ldr	r3, [r7, #0]
 8000ea0:	685b      	ldr	r3, [r3, #4]
 8000ea2:	2b01      	cmp	r3, #1
 8000ea4:	d00b      	beq.n	8000ebe <HAL_GPIO_Init+0x5a>
 8000ea6:	683b      	ldr	r3, [r7, #0]
 8000ea8:	685b      	ldr	r3, [r3, #4]
 8000eaa:	2b02      	cmp	r3, #2
 8000eac:	d007      	beq.n	8000ebe <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000eae:	683b      	ldr	r3, [r7, #0]
 8000eb0:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000eb2:	2b11      	cmp	r3, #17
 8000eb4:	d003      	beq.n	8000ebe <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000eb6:	683b      	ldr	r3, [r7, #0]
 8000eb8:	685b      	ldr	r3, [r3, #4]
 8000eba:	2b12      	cmp	r3, #18
 8000ebc:	d130      	bne.n	8000f20 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	689b      	ldr	r3, [r3, #8]
 8000ec2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000ec4:	69fb      	ldr	r3, [r7, #28]
 8000ec6:	005b      	lsls	r3, r3, #1
 8000ec8:	2203      	movs	r2, #3
 8000eca:	fa02 f303 	lsl.w	r3, r2, r3
 8000ece:	43db      	mvns	r3, r3
 8000ed0:	69ba      	ldr	r2, [r7, #24]
 8000ed2:	4013      	ands	r3, r2
 8000ed4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000ed6:	683b      	ldr	r3, [r7, #0]
 8000ed8:	68da      	ldr	r2, [r3, #12]
 8000eda:	69fb      	ldr	r3, [r7, #28]
 8000edc:	005b      	lsls	r3, r3, #1
 8000ede:	fa02 f303 	lsl.w	r3, r2, r3
 8000ee2:	69ba      	ldr	r2, [r7, #24]
 8000ee4:	4313      	orrs	r3, r2
 8000ee6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	69ba      	ldr	r2, [r7, #24]
 8000eec:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	685b      	ldr	r3, [r3, #4]
 8000ef2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000ef4:	2201      	movs	r2, #1
 8000ef6:	69fb      	ldr	r3, [r7, #28]
 8000ef8:	fa02 f303 	lsl.w	r3, r2, r3
 8000efc:	43db      	mvns	r3, r3
 8000efe:	69ba      	ldr	r2, [r7, #24]
 8000f00:	4013      	ands	r3, r2
 8000f02:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000f04:	683b      	ldr	r3, [r7, #0]
 8000f06:	685b      	ldr	r3, [r3, #4]
 8000f08:	091b      	lsrs	r3, r3, #4
 8000f0a:	f003 0201 	and.w	r2, r3, #1
 8000f0e:	69fb      	ldr	r3, [r7, #28]
 8000f10:	fa02 f303 	lsl.w	r3, r2, r3
 8000f14:	69ba      	ldr	r2, [r7, #24]
 8000f16:	4313      	orrs	r3, r2
 8000f18:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	69ba      	ldr	r2, [r7, #24]
 8000f1e:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	68db      	ldr	r3, [r3, #12]
 8000f24:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000f26:	69fb      	ldr	r3, [r7, #28]
 8000f28:	005b      	lsls	r3, r3, #1
 8000f2a:	2203      	movs	r2, #3
 8000f2c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f30:	43db      	mvns	r3, r3
 8000f32:	69ba      	ldr	r2, [r7, #24]
 8000f34:	4013      	ands	r3, r2
 8000f36:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000f38:	683b      	ldr	r3, [r7, #0]
 8000f3a:	689a      	ldr	r2, [r3, #8]
 8000f3c:	69fb      	ldr	r3, [r7, #28]
 8000f3e:	005b      	lsls	r3, r3, #1
 8000f40:	fa02 f303 	lsl.w	r3, r2, r3
 8000f44:	69ba      	ldr	r2, [r7, #24]
 8000f46:	4313      	orrs	r3, r2
 8000f48:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	69ba      	ldr	r2, [r7, #24]
 8000f4e:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000f50:	683b      	ldr	r3, [r7, #0]
 8000f52:	685b      	ldr	r3, [r3, #4]
 8000f54:	2b02      	cmp	r3, #2
 8000f56:	d003      	beq.n	8000f60 <HAL_GPIO_Init+0xfc>
 8000f58:	683b      	ldr	r3, [r7, #0]
 8000f5a:	685b      	ldr	r3, [r3, #4]
 8000f5c:	2b12      	cmp	r3, #18
 8000f5e:	d123      	bne.n	8000fa8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000f60:	69fb      	ldr	r3, [r7, #28]
 8000f62:	08da      	lsrs	r2, r3, #3
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	3208      	adds	r2, #8
 8000f68:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000f6c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000f6e:	69fb      	ldr	r3, [r7, #28]
 8000f70:	f003 0307 	and.w	r3, r3, #7
 8000f74:	009b      	lsls	r3, r3, #2
 8000f76:	220f      	movs	r2, #15
 8000f78:	fa02 f303 	lsl.w	r3, r2, r3
 8000f7c:	43db      	mvns	r3, r3
 8000f7e:	69ba      	ldr	r2, [r7, #24]
 8000f80:	4013      	ands	r3, r2
 8000f82:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000f84:	683b      	ldr	r3, [r7, #0]
 8000f86:	691a      	ldr	r2, [r3, #16]
 8000f88:	69fb      	ldr	r3, [r7, #28]
 8000f8a:	f003 0307 	and.w	r3, r3, #7
 8000f8e:	009b      	lsls	r3, r3, #2
 8000f90:	fa02 f303 	lsl.w	r3, r2, r3
 8000f94:	69ba      	ldr	r2, [r7, #24]
 8000f96:	4313      	orrs	r3, r2
 8000f98:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000f9a:	69fb      	ldr	r3, [r7, #28]
 8000f9c:	08da      	lsrs	r2, r3, #3
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	3208      	adds	r2, #8
 8000fa2:	69b9      	ldr	r1, [r7, #24]
 8000fa4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	681b      	ldr	r3, [r3, #0]
 8000fac:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000fae:	69fb      	ldr	r3, [r7, #28]
 8000fb0:	005b      	lsls	r3, r3, #1
 8000fb2:	2203      	movs	r2, #3
 8000fb4:	fa02 f303 	lsl.w	r3, r2, r3
 8000fb8:	43db      	mvns	r3, r3
 8000fba:	69ba      	ldr	r2, [r7, #24]
 8000fbc:	4013      	ands	r3, r2
 8000fbe:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000fc0:	683b      	ldr	r3, [r7, #0]
 8000fc2:	685b      	ldr	r3, [r3, #4]
 8000fc4:	f003 0203 	and.w	r2, r3, #3
 8000fc8:	69fb      	ldr	r3, [r7, #28]
 8000fca:	005b      	lsls	r3, r3, #1
 8000fcc:	fa02 f303 	lsl.w	r3, r2, r3
 8000fd0:	69ba      	ldr	r2, [r7, #24]
 8000fd2:	4313      	orrs	r3, r2
 8000fd4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	69ba      	ldr	r2, [r7, #24]
 8000fda:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000fdc:	683b      	ldr	r3, [r7, #0]
 8000fde:	685b      	ldr	r3, [r3, #4]
 8000fe0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000fe4:	2b00      	cmp	r3, #0
 8000fe6:	f000 80a2 	beq.w	800112e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000fea:	2300      	movs	r3, #0
 8000fec:	60fb      	str	r3, [r7, #12]
 8000fee:	4b56      	ldr	r3, [pc, #344]	; (8001148 <HAL_GPIO_Init+0x2e4>)
 8000ff0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ff2:	4a55      	ldr	r2, [pc, #340]	; (8001148 <HAL_GPIO_Init+0x2e4>)
 8000ff4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000ff8:	6453      	str	r3, [r2, #68]	; 0x44
 8000ffa:	4b53      	ldr	r3, [pc, #332]	; (8001148 <HAL_GPIO_Init+0x2e4>)
 8000ffc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ffe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001002:	60fb      	str	r3, [r7, #12]
 8001004:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001006:	4a51      	ldr	r2, [pc, #324]	; (800114c <HAL_GPIO_Init+0x2e8>)
 8001008:	69fb      	ldr	r3, [r7, #28]
 800100a:	089b      	lsrs	r3, r3, #2
 800100c:	3302      	adds	r3, #2
 800100e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001012:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001014:	69fb      	ldr	r3, [r7, #28]
 8001016:	f003 0303 	and.w	r3, r3, #3
 800101a:	009b      	lsls	r3, r3, #2
 800101c:	220f      	movs	r2, #15
 800101e:	fa02 f303 	lsl.w	r3, r2, r3
 8001022:	43db      	mvns	r3, r3
 8001024:	69ba      	ldr	r2, [r7, #24]
 8001026:	4013      	ands	r3, r2
 8001028:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	4a48      	ldr	r2, [pc, #288]	; (8001150 <HAL_GPIO_Init+0x2ec>)
 800102e:	4293      	cmp	r3, r2
 8001030:	d019      	beq.n	8001066 <HAL_GPIO_Init+0x202>
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	4a47      	ldr	r2, [pc, #284]	; (8001154 <HAL_GPIO_Init+0x2f0>)
 8001036:	4293      	cmp	r3, r2
 8001038:	d013      	beq.n	8001062 <HAL_GPIO_Init+0x1fe>
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	4a46      	ldr	r2, [pc, #280]	; (8001158 <HAL_GPIO_Init+0x2f4>)
 800103e:	4293      	cmp	r3, r2
 8001040:	d00d      	beq.n	800105e <HAL_GPIO_Init+0x1fa>
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	4a45      	ldr	r2, [pc, #276]	; (800115c <HAL_GPIO_Init+0x2f8>)
 8001046:	4293      	cmp	r3, r2
 8001048:	d007      	beq.n	800105a <HAL_GPIO_Init+0x1f6>
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	4a44      	ldr	r2, [pc, #272]	; (8001160 <HAL_GPIO_Init+0x2fc>)
 800104e:	4293      	cmp	r3, r2
 8001050:	d101      	bne.n	8001056 <HAL_GPIO_Init+0x1f2>
 8001052:	2304      	movs	r3, #4
 8001054:	e008      	b.n	8001068 <HAL_GPIO_Init+0x204>
 8001056:	2307      	movs	r3, #7
 8001058:	e006      	b.n	8001068 <HAL_GPIO_Init+0x204>
 800105a:	2303      	movs	r3, #3
 800105c:	e004      	b.n	8001068 <HAL_GPIO_Init+0x204>
 800105e:	2302      	movs	r3, #2
 8001060:	e002      	b.n	8001068 <HAL_GPIO_Init+0x204>
 8001062:	2301      	movs	r3, #1
 8001064:	e000      	b.n	8001068 <HAL_GPIO_Init+0x204>
 8001066:	2300      	movs	r3, #0
 8001068:	69fa      	ldr	r2, [r7, #28]
 800106a:	f002 0203 	and.w	r2, r2, #3
 800106e:	0092      	lsls	r2, r2, #2
 8001070:	4093      	lsls	r3, r2
 8001072:	69ba      	ldr	r2, [r7, #24]
 8001074:	4313      	orrs	r3, r2
 8001076:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001078:	4934      	ldr	r1, [pc, #208]	; (800114c <HAL_GPIO_Init+0x2e8>)
 800107a:	69fb      	ldr	r3, [r7, #28]
 800107c:	089b      	lsrs	r3, r3, #2
 800107e:	3302      	adds	r3, #2
 8001080:	69ba      	ldr	r2, [r7, #24]
 8001082:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001086:	4b37      	ldr	r3, [pc, #220]	; (8001164 <HAL_GPIO_Init+0x300>)
 8001088:	681b      	ldr	r3, [r3, #0]
 800108a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800108c:	693b      	ldr	r3, [r7, #16]
 800108e:	43db      	mvns	r3, r3
 8001090:	69ba      	ldr	r2, [r7, #24]
 8001092:	4013      	ands	r3, r2
 8001094:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001096:	683b      	ldr	r3, [r7, #0]
 8001098:	685b      	ldr	r3, [r3, #4]
 800109a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800109e:	2b00      	cmp	r3, #0
 80010a0:	d003      	beq.n	80010aa <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80010a2:	69ba      	ldr	r2, [r7, #24]
 80010a4:	693b      	ldr	r3, [r7, #16]
 80010a6:	4313      	orrs	r3, r2
 80010a8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80010aa:	4a2e      	ldr	r2, [pc, #184]	; (8001164 <HAL_GPIO_Init+0x300>)
 80010ac:	69bb      	ldr	r3, [r7, #24]
 80010ae:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80010b0:	4b2c      	ldr	r3, [pc, #176]	; (8001164 <HAL_GPIO_Init+0x300>)
 80010b2:	685b      	ldr	r3, [r3, #4]
 80010b4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80010b6:	693b      	ldr	r3, [r7, #16]
 80010b8:	43db      	mvns	r3, r3
 80010ba:	69ba      	ldr	r2, [r7, #24]
 80010bc:	4013      	ands	r3, r2
 80010be:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80010c0:	683b      	ldr	r3, [r7, #0]
 80010c2:	685b      	ldr	r3, [r3, #4]
 80010c4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010c8:	2b00      	cmp	r3, #0
 80010ca:	d003      	beq.n	80010d4 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80010cc:	69ba      	ldr	r2, [r7, #24]
 80010ce:	693b      	ldr	r3, [r7, #16]
 80010d0:	4313      	orrs	r3, r2
 80010d2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80010d4:	4a23      	ldr	r2, [pc, #140]	; (8001164 <HAL_GPIO_Init+0x300>)
 80010d6:	69bb      	ldr	r3, [r7, #24]
 80010d8:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80010da:	4b22      	ldr	r3, [pc, #136]	; (8001164 <HAL_GPIO_Init+0x300>)
 80010dc:	689b      	ldr	r3, [r3, #8]
 80010de:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80010e0:	693b      	ldr	r3, [r7, #16]
 80010e2:	43db      	mvns	r3, r3
 80010e4:	69ba      	ldr	r2, [r7, #24]
 80010e6:	4013      	ands	r3, r2
 80010e8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80010ea:	683b      	ldr	r3, [r7, #0]
 80010ec:	685b      	ldr	r3, [r3, #4]
 80010ee:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80010f2:	2b00      	cmp	r3, #0
 80010f4:	d003      	beq.n	80010fe <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80010f6:	69ba      	ldr	r2, [r7, #24]
 80010f8:	693b      	ldr	r3, [r7, #16]
 80010fa:	4313      	orrs	r3, r2
 80010fc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80010fe:	4a19      	ldr	r2, [pc, #100]	; (8001164 <HAL_GPIO_Init+0x300>)
 8001100:	69bb      	ldr	r3, [r7, #24]
 8001102:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001104:	4b17      	ldr	r3, [pc, #92]	; (8001164 <HAL_GPIO_Init+0x300>)
 8001106:	68db      	ldr	r3, [r3, #12]
 8001108:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800110a:	693b      	ldr	r3, [r7, #16]
 800110c:	43db      	mvns	r3, r3
 800110e:	69ba      	ldr	r2, [r7, #24]
 8001110:	4013      	ands	r3, r2
 8001112:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001114:	683b      	ldr	r3, [r7, #0]
 8001116:	685b      	ldr	r3, [r3, #4]
 8001118:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800111c:	2b00      	cmp	r3, #0
 800111e:	d003      	beq.n	8001128 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001120:	69ba      	ldr	r2, [r7, #24]
 8001122:	693b      	ldr	r3, [r7, #16]
 8001124:	4313      	orrs	r3, r2
 8001126:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001128:	4a0e      	ldr	r2, [pc, #56]	; (8001164 <HAL_GPIO_Init+0x300>)
 800112a:	69bb      	ldr	r3, [r7, #24]
 800112c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800112e:	69fb      	ldr	r3, [r7, #28]
 8001130:	3301      	adds	r3, #1
 8001132:	61fb      	str	r3, [r7, #28]
 8001134:	69fb      	ldr	r3, [r7, #28]
 8001136:	2b0f      	cmp	r3, #15
 8001138:	f67f aea2 	bls.w	8000e80 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800113c:	bf00      	nop
 800113e:	3724      	adds	r7, #36	; 0x24
 8001140:	46bd      	mov	sp, r7
 8001142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001146:	4770      	bx	lr
 8001148:	40023800 	.word	0x40023800
 800114c:	40013800 	.word	0x40013800
 8001150:	40020000 	.word	0x40020000
 8001154:	40020400 	.word	0x40020400
 8001158:	40020800 	.word	0x40020800
 800115c:	40020c00 	.word	0x40020c00
 8001160:	40021000 	.word	0x40021000
 8001164:	40013c00 	.word	0x40013c00

08001168 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001168:	b480      	push	{r7}
 800116a:	b083      	sub	sp, #12
 800116c:	af00      	add	r7, sp, #0
 800116e:	6078      	str	r0, [r7, #4]
 8001170:	460b      	mov	r3, r1
 8001172:	807b      	strh	r3, [r7, #2]
 8001174:	4613      	mov	r3, r2
 8001176:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001178:	787b      	ldrb	r3, [r7, #1]
 800117a:	2b00      	cmp	r3, #0
 800117c:	d003      	beq.n	8001186 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800117e:	887a      	ldrh	r2, [r7, #2]
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001184:	e003      	b.n	800118e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001186:	887b      	ldrh	r3, [r7, #2]
 8001188:	041a      	lsls	r2, r3, #16
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	619a      	str	r2, [r3, #24]
}
 800118e:	bf00      	nop
 8001190:	370c      	adds	r7, #12
 8001192:	46bd      	mov	sp, r7
 8001194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001198:	4770      	bx	lr
	...

0800119c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800119c:	b580      	push	{r7, lr}
 800119e:	b084      	sub	sp, #16
 80011a0:	af00      	add	r7, sp, #0
 80011a2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	d101      	bne.n	80011ae <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80011aa:	2301      	movs	r3, #1
 80011ac:	e11f      	b.n	80013ee <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80011b4:	b2db      	uxtb	r3, r3
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	d106      	bne.n	80011c8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	2200      	movs	r2, #0
 80011be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80011c2:	6878      	ldr	r0, [r7, #4]
 80011c4:	f7ff fbaa 	bl	800091c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	2224      	movs	r2, #36	; 0x24
 80011cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	681a      	ldr	r2, [r3, #0]
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	f022 0201 	bic.w	r2, r2, #1
 80011de:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	681a      	ldr	r2, [r3, #0]
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80011ee:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	681a      	ldr	r2, [r3, #0]
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80011fe:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001200:	f001 fb8e 	bl	8002920 <HAL_RCC_GetPCLK1Freq>
 8001204:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	685b      	ldr	r3, [r3, #4]
 800120a:	4a7b      	ldr	r2, [pc, #492]	; (80013f8 <HAL_I2C_Init+0x25c>)
 800120c:	4293      	cmp	r3, r2
 800120e:	d807      	bhi.n	8001220 <HAL_I2C_Init+0x84>
 8001210:	68fb      	ldr	r3, [r7, #12]
 8001212:	4a7a      	ldr	r2, [pc, #488]	; (80013fc <HAL_I2C_Init+0x260>)
 8001214:	4293      	cmp	r3, r2
 8001216:	bf94      	ite	ls
 8001218:	2301      	movls	r3, #1
 800121a:	2300      	movhi	r3, #0
 800121c:	b2db      	uxtb	r3, r3
 800121e:	e006      	b.n	800122e <HAL_I2C_Init+0x92>
 8001220:	68fb      	ldr	r3, [r7, #12]
 8001222:	4a77      	ldr	r2, [pc, #476]	; (8001400 <HAL_I2C_Init+0x264>)
 8001224:	4293      	cmp	r3, r2
 8001226:	bf94      	ite	ls
 8001228:	2301      	movls	r3, #1
 800122a:	2300      	movhi	r3, #0
 800122c:	b2db      	uxtb	r3, r3
 800122e:	2b00      	cmp	r3, #0
 8001230:	d001      	beq.n	8001236 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001232:	2301      	movs	r3, #1
 8001234:	e0db      	b.n	80013ee <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001236:	68fb      	ldr	r3, [r7, #12]
 8001238:	4a72      	ldr	r2, [pc, #456]	; (8001404 <HAL_I2C_Init+0x268>)
 800123a:	fba2 2303 	umull	r2, r3, r2, r3
 800123e:	0c9b      	lsrs	r3, r3, #18
 8001240:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	685b      	ldr	r3, [r3, #4]
 8001248:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	68ba      	ldr	r2, [r7, #8]
 8001252:	430a      	orrs	r2, r1
 8001254:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	6a1b      	ldr	r3, [r3, #32]
 800125c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	685b      	ldr	r3, [r3, #4]
 8001264:	4a64      	ldr	r2, [pc, #400]	; (80013f8 <HAL_I2C_Init+0x25c>)
 8001266:	4293      	cmp	r3, r2
 8001268:	d802      	bhi.n	8001270 <HAL_I2C_Init+0xd4>
 800126a:	68bb      	ldr	r3, [r7, #8]
 800126c:	3301      	adds	r3, #1
 800126e:	e009      	b.n	8001284 <HAL_I2C_Init+0xe8>
 8001270:	68bb      	ldr	r3, [r7, #8]
 8001272:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001276:	fb02 f303 	mul.w	r3, r2, r3
 800127a:	4a63      	ldr	r2, [pc, #396]	; (8001408 <HAL_I2C_Init+0x26c>)
 800127c:	fba2 2303 	umull	r2, r3, r2, r3
 8001280:	099b      	lsrs	r3, r3, #6
 8001282:	3301      	adds	r3, #1
 8001284:	687a      	ldr	r2, [r7, #4]
 8001286:	6812      	ldr	r2, [r2, #0]
 8001288:	430b      	orrs	r3, r1
 800128a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	69db      	ldr	r3, [r3, #28]
 8001292:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8001296:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	685b      	ldr	r3, [r3, #4]
 800129e:	4956      	ldr	r1, [pc, #344]	; (80013f8 <HAL_I2C_Init+0x25c>)
 80012a0:	428b      	cmp	r3, r1
 80012a2:	d80d      	bhi.n	80012c0 <HAL_I2C_Init+0x124>
 80012a4:	68fb      	ldr	r3, [r7, #12]
 80012a6:	1e59      	subs	r1, r3, #1
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	685b      	ldr	r3, [r3, #4]
 80012ac:	005b      	lsls	r3, r3, #1
 80012ae:	fbb1 f3f3 	udiv	r3, r1, r3
 80012b2:	3301      	adds	r3, #1
 80012b4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80012b8:	2b04      	cmp	r3, #4
 80012ba:	bf38      	it	cc
 80012bc:	2304      	movcc	r3, #4
 80012be:	e04f      	b.n	8001360 <HAL_I2C_Init+0x1c4>
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	689b      	ldr	r3, [r3, #8]
 80012c4:	2b00      	cmp	r3, #0
 80012c6:	d111      	bne.n	80012ec <HAL_I2C_Init+0x150>
 80012c8:	68fb      	ldr	r3, [r7, #12]
 80012ca:	1e58      	subs	r0, r3, #1
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	6859      	ldr	r1, [r3, #4]
 80012d0:	460b      	mov	r3, r1
 80012d2:	005b      	lsls	r3, r3, #1
 80012d4:	440b      	add	r3, r1
 80012d6:	fbb0 f3f3 	udiv	r3, r0, r3
 80012da:	3301      	adds	r3, #1
 80012dc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80012e0:	2b00      	cmp	r3, #0
 80012e2:	bf0c      	ite	eq
 80012e4:	2301      	moveq	r3, #1
 80012e6:	2300      	movne	r3, #0
 80012e8:	b2db      	uxtb	r3, r3
 80012ea:	e012      	b.n	8001312 <HAL_I2C_Init+0x176>
 80012ec:	68fb      	ldr	r3, [r7, #12]
 80012ee:	1e58      	subs	r0, r3, #1
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	6859      	ldr	r1, [r3, #4]
 80012f4:	460b      	mov	r3, r1
 80012f6:	009b      	lsls	r3, r3, #2
 80012f8:	440b      	add	r3, r1
 80012fa:	0099      	lsls	r1, r3, #2
 80012fc:	440b      	add	r3, r1
 80012fe:	fbb0 f3f3 	udiv	r3, r0, r3
 8001302:	3301      	adds	r3, #1
 8001304:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001308:	2b00      	cmp	r3, #0
 800130a:	bf0c      	ite	eq
 800130c:	2301      	moveq	r3, #1
 800130e:	2300      	movne	r3, #0
 8001310:	b2db      	uxtb	r3, r3
 8001312:	2b00      	cmp	r3, #0
 8001314:	d001      	beq.n	800131a <HAL_I2C_Init+0x17e>
 8001316:	2301      	movs	r3, #1
 8001318:	e022      	b.n	8001360 <HAL_I2C_Init+0x1c4>
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	689b      	ldr	r3, [r3, #8]
 800131e:	2b00      	cmp	r3, #0
 8001320:	d10e      	bne.n	8001340 <HAL_I2C_Init+0x1a4>
 8001322:	68fb      	ldr	r3, [r7, #12]
 8001324:	1e58      	subs	r0, r3, #1
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	6859      	ldr	r1, [r3, #4]
 800132a:	460b      	mov	r3, r1
 800132c:	005b      	lsls	r3, r3, #1
 800132e:	440b      	add	r3, r1
 8001330:	fbb0 f3f3 	udiv	r3, r0, r3
 8001334:	3301      	adds	r3, #1
 8001336:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800133a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800133e:	e00f      	b.n	8001360 <HAL_I2C_Init+0x1c4>
 8001340:	68fb      	ldr	r3, [r7, #12]
 8001342:	1e58      	subs	r0, r3, #1
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	6859      	ldr	r1, [r3, #4]
 8001348:	460b      	mov	r3, r1
 800134a:	009b      	lsls	r3, r3, #2
 800134c:	440b      	add	r3, r1
 800134e:	0099      	lsls	r1, r3, #2
 8001350:	440b      	add	r3, r1
 8001352:	fbb0 f3f3 	udiv	r3, r0, r3
 8001356:	3301      	adds	r3, #1
 8001358:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800135c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001360:	6879      	ldr	r1, [r7, #4]
 8001362:	6809      	ldr	r1, [r1, #0]
 8001364:	4313      	orrs	r3, r2
 8001366:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	69da      	ldr	r2, [r3, #28]
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	6a1b      	ldr	r3, [r3, #32]
 800137a:	431a      	orrs	r2, r3
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	430a      	orrs	r2, r1
 8001382:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	689b      	ldr	r3, [r3, #8]
 800138a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800138e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001392:	687a      	ldr	r2, [r7, #4]
 8001394:	6911      	ldr	r1, [r2, #16]
 8001396:	687a      	ldr	r2, [r7, #4]
 8001398:	68d2      	ldr	r2, [r2, #12]
 800139a:	4311      	orrs	r1, r2
 800139c:	687a      	ldr	r2, [r7, #4]
 800139e:	6812      	ldr	r2, [r2, #0]
 80013a0:	430b      	orrs	r3, r1
 80013a2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	68db      	ldr	r3, [r3, #12]
 80013aa:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	695a      	ldr	r2, [r3, #20]
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	699b      	ldr	r3, [r3, #24]
 80013b6:	431a      	orrs	r2, r3
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	430a      	orrs	r2, r1
 80013be:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	681a      	ldr	r2, [r3, #0]
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	f042 0201 	orr.w	r2, r2, #1
 80013ce:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	2200      	movs	r2, #0
 80013d4:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	2220      	movs	r2, #32
 80013da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	2200      	movs	r2, #0
 80013e2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	2200      	movs	r2, #0
 80013e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80013ec:	2300      	movs	r3, #0
}
 80013ee:	4618      	mov	r0, r3
 80013f0:	3710      	adds	r7, #16
 80013f2:	46bd      	mov	sp, r7
 80013f4:	bd80      	pop	{r7, pc}
 80013f6:	bf00      	nop
 80013f8:	000186a0 	.word	0x000186a0
 80013fc:	001e847f 	.word	0x001e847f
 8001400:	003d08ff 	.word	0x003d08ff
 8001404:	431bde83 	.word	0x431bde83
 8001408:	10624dd3 	.word	0x10624dd3

0800140c <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800140c:	b580      	push	{r7, lr}
 800140e:	b088      	sub	sp, #32
 8001410:	af02      	add	r7, sp, #8
 8001412:	60f8      	str	r0, [r7, #12]
 8001414:	607a      	str	r2, [r7, #4]
 8001416:	461a      	mov	r2, r3
 8001418:	460b      	mov	r3, r1
 800141a:	817b      	strh	r3, [r7, #10]
 800141c:	4613      	mov	r3, r2
 800141e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001420:	f7ff fc0c 	bl	8000c3c <HAL_GetTick>
 8001424:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001426:	68fb      	ldr	r3, [r7, #12]
 8001428:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800142c:	b2db      	uxtb	r3, r3
 800142e:	2b20      	cmp	r3, #32
 8001430:	f040 80e0 	bne.w	80015f4 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001434:	697b      	ldr	r3, [r7, #20]
 8001436:	9300      	str	r3, [sp, #0]
 8001438:	2319      	movs	r3, #25
 800143a:	2201      	movs	r2, #1
 800143c:	4970      	ldr	r1, [pc, #448]	; (8001600 <HAL_I2C_Master_Transmit+0x1f4>)
 800143e:	68f8      	ldr	r0, [r7, #12]
 8001440:	f000 fc56 	bl	8001cf0 <I2C_WaitOnFlagUntilTimeout>
 8001444:	4603      	mov	r3, r0
 8001446:	2b00      	cmp	r3, #0
 8001448:	d001      	beq.n	800144e <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800144a:	2302      	movs	r3, #2
 800144c:	e0d3      	b.n	80015f6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800144e:	68fb      	ldr	r3, [r7, #12]
 8001450:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001454:	2b01      	cmp	r3, #1
 8001456:	d101      	bne.n	800145c <HAL_I2C_Master_Transmit+0x50>
 8001458:	2302      	movs	r3, #2
 800145a:	e0cc      	b.n	80015f6 <HAL_I2C_Master_Transmit+0x1ea>
 800145c:	68fb      	ldr	r3, [r7, #12]
 800145e:	2201      	movs	r2, #1
 8001460:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001464:	68fb      	ldr	r3, [r7, #12]
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	f003 0301 	and.w	r3, r3, #1
 800146e:	2b01      	cmp	r3, #1
 8001470:	d007      	beq.n	8001482 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001472:	68fb      	ldr	r3, [r7, #12]
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	681a      	ldr	r2, [r3, #0]
 8001478:	68fb      	ldr	r3, [r7, #12]
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	f042 0201 	orr.w	r2, r2, #1
 8001480:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001482:	68fb      	ldr	r3, [r7, #12]
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	681a      	ldr	r2, [r3, #0]
 8001488:	68fb      	ldr	r3, [r7, #12]
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001490:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8001492:	68fb      	ldr	r3, [r7, #12]
 8001494:	2221      	movs	r2, #33	; 0x21
 8001496:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800149a:	68fb      	ldr	r3, [r7, #12]
 800149c:	2210      	movs	r2, #16
 800149e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80014a2:	68fb      	ldr	r3, [r7, #12]
 80014a4:	2200      	movs	r2, #0
 80014a6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80014a8:	68fb      	ldr	r3, [r7, #12]
 80014aa:	687a      	ldr	r2, [r7, #4]
 80014ac:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80014ae:	68fb      	ldr	r3, [r7, #12]
 80014b0:	893a      	ldrh	r2, [r7, #8]
 80014b2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80014b4:	68fb      	ldr	r3, [r7, #12]
 80014b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80014b8:	b29a      	uxth	r2, r3
 80014ba:	68fb      	ldr	r3, [r7, #12]
 80014bc:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80014be:	68fb      	ldr	r3, [r7, #12]
 80014c0:	4a50      	ldr	r2, [pc, #320]	; (8001604 <HAL_I2C_Master_Transmit+0x1f8>)
 80014c2:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80014c4:	8979      	ldrh	r1, [r7, #10]
 80014c6:	697b      	ldr	r3, [r7, #20]
 80014c8:	6a3a      	ldr	r2, [r7, #32]
 80014ca:	68f8      	ldr	r0, [r7, #12]
 80014cc:	f000 fac2 	bl	8001a54 <I2C_MasterRequestWrite>
 80014d0:	4603      	mov	r3, r0
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d001      	beq.n	80014da <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80014d6:	2301      	movs	r3, #1
 80014d8:	e08d      	b.n	80015f6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80014da:	2300      	movs	r3, #0
 80014dc:	613b      	str	r3, [r7, #16]
 80014de:	68fb      	ldr	r3, [r7, #12]
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	695b      	ldr	r3, [r3, #20]
 80014e4:	613b      	str	r3, [r7, #16]
 80014e6:	68fb      	ldr	r3, [r7, #12]
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	699b      	ldr	r3, [r3, #24]
 80014ec:	613b      	str	r3, [r7, #16]
 80014ee:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80014f0:	e066      	b.n	80015c0 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80014f2:	697a      	ldr	r2, [r7, #20]
 80014f4:	6a39      	ldr	r1, [r7, #32]
 80014f6:	68f8      	ldr	r0, [r7, #12]
 80014f8:	f000 fcd0 	bl	8001e9c <I2C_WaitOnTXEFlagUntilTimeout>
 80014fc:	4603      	mov	r3, r0
 80014fe:	2b00      	cmp	r3, #0
 8001500:	d00d      	beq.n	800151e <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001502:	68fb      	ldr	r3, [r7, #12]
 8001504:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001506:	2b04      	cmp	r3, #4
 8001508:	d107      	bne.n	800151a <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800150a:	68fb      	ldr	r3, [r7, #12]
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	681a      	ldr	r2, [r3, #0]
 8001510:	68fb      	ldr	r3, [r7, #12]
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001518:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800151a:	2301      	movs	r3, #1
 800151c:	e06b      	b.n	80015f6 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800151e:	68fb      	ldr	r3, [r7, #12]
 8001520:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001522:	781a      	ldrb	r2, [r3, #0]
 8001524:	68fb      	ldr	r3, [r7, #12]
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800152a:	68fb      	ldr	r3, [r7, #12]
 800152c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800152e:	1c5a      	adds	r2, r3, #1
 8001530:	68fb      	ldr	r3, [r7, #12]
 8001532:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8001534:	68fb      	ldr	r3, [r7, #12]
 8001536:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001538:	b29b      	uxth	r3, r3
 800153a:	3b01      	subs	r3, #1
 800153c:	b29a      	uxth	r2, r3
 800153e:	68fb      	ldr	r3, [r7, #12]
 8001540:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8001542:	68fb      	ldr	r3, [r7, #12]
 8001544:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001546:	3b01      	subs	r3, #1
 8001548:	b29a      	uxth	r2, r3
 800154a:	68fb      	ldr	r3, [r7, #12]
 800154c:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800154e:	68fb      	ldr	r3, [r7, #12]
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	695b      	ldr	r3, [r3, #20]
 8001554:	f003 0304 	and.w	r3, r3, #4
 8001558:	2b04      	cmp	r3, #4
 800155a:	d11b      	bne.n	8001594 <HAL_I2C_Master_Transmit+0x188>
 800155c:	68fb      	ldr	r3, [r7, #12]
 800155e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001560:	2b00      	cmp	r3, #0
 8001562:	d017      	beq.n	8001594 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001564:	68fb      	ldr	r3, [r7, #12]
 8001566:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001568:	781a      	ldrb	r2, [r3, #0]
 800156a:	68fb      	ldr	r3, [r7, #12]
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001570:	68fb      	ldr	r3, [r7, #12]
 8001572:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001574:	1c5a      	adds	r2, r3, #1
 8001576:	68fb      	ldr	r3, [r7, #12]
 8001578:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 800157a:	68fb      	ldr	r3, [r7, #12]
 800157c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800157e:	b29b      	uxth	r3, r3
 8001580:	3b01      	subs	r3, #1
 8001582:	b29a      	uxth	r2, r3
 8001584:	68fb      	ldr	r3, [r7, #12]
 8001586:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8001588:	68fb      	ldr	r3, [r7, #12]
 800158a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800158c:	3b01      	subs	r3, #1
 800158e:	b29a      	uxth	r2, r3
 8001590:	68fb      	ldr	r3, [r7, #12]
 8001592:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001594:	697a      	ldr	r2, [r7, #20]
 8001596:	6a39      	ldr	r1, [r7, #32]
 8001598:	68f8      	ldr	r0, [r7, #12]
 800159a:	f000 fcc0 	bl	8001f1e <I2C_WaitOnBTFFlagUntilTimeout>
 800159e:	4603      	mov	r3, r0
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	d00d      	beq.n	80015c0 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80015a4:	68fb      	ldr	r3, [r7, #12]
 80015a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015a8:	2b04      	cmp	r3, #4
 80015aa:	d107      	bne.n	80015bc <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80015ac:	68fb      	ldr	r3, [r7, #12]
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	681a      	ldr	r2, [r3, #0]
 80015b2:	68fb      	ldr	r3, [r7, #12]
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80015ba:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80015bc:	2301      	movs	r3, #1
 80015be:	e01a      	b.n	80015f6 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80015c0:	68fb      	ldr	r3, [r7, #12]
 80015c2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	d194      	bne.n	80014f2 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80015c8:	68fb      	ldr	r3, [r7, #12]
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	681a      	ldr	r2, [r3, #0]
 80015ce:	68fb      	ldr	r3, [r7, #12]
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80015d6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80015d8:	68fb      	ldr	r3, [r7, #12]
 80015da:	2220      	movs	r2, #32
 80015dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80015e0:	68fb      	ldr	r3, [r7, #12]
 80015e2:	2200      	movs	r2, #0
 80015e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80015e8:	68fb      	ldr	r3, [r7, #12]
 80015ea:	2200      	movs	r2, #0
 80015ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80015f0:	2300      	movs	r3, #0
 80015f2:	e000      	b.n	80015f6 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80015f4:	2302      	movs	r3, #2
  }
}
 80015f6:	4618      	mov	r0, r3
 80015f8:	3718      	adds	r7, #24
 80015fa:	46bd      	mov	sp, r7
 80015fc:	bd80      	pop	{r7, pc}
 80015fe:	bf00      	nop
 8001600:	00100002 	.word	0x00100002
 8001604:	ffff0000 	.word	0xffff0000

08001608 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001608:	b580      	push	{r7, lr}
 800160a:	b08c      	sub	sp, #48	; 0x30
 800160c:	af02      	add	r7, sp, #8
 800160e:	60f8      	str	r0, [r7, #12]
 8001610:	607a      	str	r2, [r7, #4]
 8001612:	461a      	mov	r2, r3
 8001614:	460b      	mov	r3, r1
 8001616:	817b      	strh	r3, [r7, #10]
 8001618:	4613      	mov	r3, r2
 800161a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800161c:	f7ff fb0e 	bl	8000c3c <HAL_GetTick>
 8001620:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001622:	68fb      	ldr	r3, [r7, #12]
 8001624:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001628:	b2db      	uxtb	r3, r3
 800162a:	2b20      	cmp	r3, #32
 800162c:	f040 820b 	bne.w	8001a46 <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001630:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001632:	9300      	str	r3, [sp, #0]
 8001634:	2319      	movs	r3, #25
 8001636:	2201      	movs	r2, #1
 8001638:	497c      	ldr	r1, [pc, #496]	; (800182c <HAL_I2C_Master_Receive+0x224>)
 800163a:	68f8      	ldr	r0, [r7, #12]
 800163c:	f000 fb58 	bl	8001cf0 <I2C_WaitOnFlagUntilTimeout>
 8001640:	4603      	mov	r3, r0
 8001642:	2b00      	cmp	r3, #0
 8001644:	d001      	beq.n	800164a <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8001646:	2302      	movs	r3, #2
 8001648:	e1fe      	b.n	8001a48 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800164a:	68fb      	ldr	r3, [r7, #12]
 800164c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001650:	2b01      	cmp	r3, #1
 8001652:	d101      	bne.n	8001658 <HAL_I2C_Master_Receive+0x50>
 8001654:	2302      	movs	r3, #2
 8001656:	e1f7      	b.n	8001a48 <HAL_I2C_Master_Receive+0x440>
 8001658:	68fb      	ldr	r3, [r7, #12]
 800165a:	2201      	movs	r2, #1
 800165c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001660:	68fb      	ldr	r3, [r7, #12]
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	f003 0301 	and.w	r3, r3, #1
 800166a:	2b01      	cmp	r3, #1
 800166c:	d007      	beq.n	800167e <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800166e:	68fb      	ldr	r3, [r7, #12]
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	681a      	ldr	r2, [r3, #0]
 8001674:	68fb      	ldr	r3, [r7, #12]
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	f042 0201 	orr.w	r2, r2, #1
 800167c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800167e:	68fb      	ldr	r3, [r7, #12]
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	681a      	ldr	r2, [r3, #0]
 8001684:	68fb      	ldr	r3, [r7, #12]
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800168c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 800168e:	68fb      	ldr	r3, [r7, #12]
 8001690:	2222      	movs	r2, #34	; 0x22
 8001692:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8001696:	68fb      	ldr	r3, [r7, #12]
 8001698:	2210      	movs	r2, #16
 800169a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800169e:	68fb      	ldr	r3, [r7, #12]
 80016a0:	2200      	movs	r2, #0
 80016a2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80016a4:	68fb      	ldr	r3, [r7, #12]
 80016a6:	687a      	ldr	r2, [r7, #4]
 80016a8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80016aa:	68fb      	ldr	r3, [r7, #12]
 80016ac:	893a      	ldrh	r2, [r7, #8]
 80016ae:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80016b0:	68fb      	ldr	r3, [r7, #12]
 80016b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80016b4:	b29a      	uxth	r2, r3
 80016b6:	68fb      	ldr	r3, [r7, #12]
 80016b8:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80016ba:	68fb      	ldr	r3, [r7, #12]
 80016bc:	4a5c      	ldr	r2, [pc, #368]	; (8001830 <HAL_I2C_Master_Receive+0x228>)
 80016be:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80016c0:	8979      	ldrh	r1, [r7, #10]
 80016c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016c4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80016c6:	68f8      	ldr	r0, [r7, #12]
 80016c8:	f000 fa46 	bl	8001b58 <I2C_MasterRequestRead>
 80016cc:	4603      	mov	r3, r0
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	d001      	beq.n	80016d6 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 80016d2:	2301      	movs	r3, #1
 80016d4:	e1b8      	b.n	8001a48 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 80016d6:	68fb      	ldr	r3, [r7, #12]
 80016d8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d113      	bne.n	8001706 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80016de:	2300      	movs	r3, #0
 80016e0:	623b      	str	r3, [r7, #32]
 80016e2:	68fb      	ldr	r3, [r7, #12]
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	695b      	ldr	r3, [r3, #20]
 80016e8:	623b      	str	r3, [r7, #32]
 80016ea:	68fb      	ldr	r3, [r7, #12]
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	699b      	ldr	r3, [r3, #24]
 80016f0:	623b      	str	r3, [r7, #32]
 80016f2:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80016f4:	68fb      	ldr	r3, [r7, #12]
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	681a      	ldr	r2, [r3, #0]
 80016fa:	68fb      	ldr	r3, [r7, #12]
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001702:	601a      	str	r2, [r3, #0]
 8001704:	e18c      	b.n	8001a20 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8001706:	68fb      	ldr	r3, [r7, #12]
 8001708:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800170a:	2b01      	cmp	r3, #1
 800170c:	d11b      	bne.n	8001746 <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800170e:	68fb      	ldr	r3, [r7, #12]
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	681a      	ldr	r2, [r3, #0]
 8001714:	68fb      	ldr	r3, [r7, #12]
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800171c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800171e:	2300      	movs	r3, #0
 8001720:	61fb      	str	r3, [r7, #28]
 8001722:	68fb      	ldr	r3, [r7, #12]
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	695b      	ldr	r3, [r3, #20]
 8001728:	61fb      	str	r3, [r7, #28]
 800172a:	68fb      	ldr	r3, [r7, #12]
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	699b      	ldr	r3, [r3, #24]
 8001730:	61fb      	str	r3, [r7, #28]
 8001732:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001734:	68fb      	ldr	r3, [r7, #12]
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	681a      	ldr	r2, [r3, #0]
 800173a:	68fb      	ldr	r3, [r7, #12]
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001742:	601a      	str	r2, [r3, #0]
 8001744:	e16c      	b.n	8001a20 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8001746:	68fb      	ldr	r3, [r7, #12]
 8001748:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800174a:	2b02      	cmp	r3, #2
 800174c:	d11b      	bne.n	8001786 <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800174e:	68fb      	ldr	r3, [r7, #12]
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	681a      	ldr	r2, [r3, #0]
 8001754:	68fb      	ldr	r3, [r7, #12]
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800175c:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800175e:	68fb      	ldr	r3, [r7, #12]
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	681a      	ldr	r2, [r3, #0]
 8001764:	68fb      	ldr	r3, [r7, #12]
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800176c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800176e:	2300      	movs	r3, #0
 8001770:	61bb      	str	r3, [r7, #24]
 8001772:	68fb      	ldr	r3, [r7, #12]
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	695b      	ldr	r3, [r3, #20]
 8001778:	61bb      	str	r3, [r7, #24]
 800177a:	68fb      	ldr	r3, [r7, #12]
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	699b      	ldr	r3, [r3, #24]
 8001780:	61bb      	str	r3, [r7, #24]
 8001782:	69bb      	ldr	r3, [r7, #24]
 8001784:	e14c      	b.n	8001a20 <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001786:	68fb      	ldr	r3, [r7, #12]
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	681a      	ldr	r2, [r3, #0]
 800178c:	68fb      	ldr	r3, [r7, #12]
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001794:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001796:	2300      	movs	r3, #0
 8001798:	617b      	str	r3, [r7, #20]
 800179a:	68fb      	ldr	r3, [r7, #12]
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	695b      	ldr	r3, [r3, #20]
 80017a0:	617b      	str	r3, [r7, #20]
 80017a2:	68fb      	ldr	r3, [r7, #12]
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	699b      	ldr	r3, [r3, #24]
 80017a8:	617b      	str	r3, [r7, #20]
 80017aa:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80017ac:	e138      	b.n	8001a20 <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 80017ae:	68fb      	ldr	r3, [r7, #12]
 80017b0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80017b2:	2b03      	cmp	r3, #3
 80017b4:	f200 80f1 	bhi.w	800199a <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80017b8:	68fb      	ldr	r3, [r7, #12]
 80017ba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80017bc:	2b01      	cmp	r3, #1
 80017be:	d123      	bne.n	8001808 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80017c0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80017c2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80017c4:	68f8      	ldr	r0, [r7, #12]
 80017c6:	f000 fbeb 	bl	8001fa0 <I2C_WaitOnRXNEFlagUntilTimeout>
 80017ca:	4603      	mov	r3, r0
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	d001      	beq.n	80017d4 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 80017d0:	2301      	movs	r3, #1
 80017d2:	e139      	b.n	8001a48 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80017d4:	68fb      	ldr	r3, [r7, #12]
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	691a      	ldr	r2, [r3, #16]
 80017da:	68fb      	ldr	r3, [r7, #12]
 80017dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017de:	b2d2      	uxtb	r2, r2
 80017e0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80017e2:	68fb      	ldr	r3, [r7, #12]
 80017e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017e6:	1c5a      	adds	r2, r3, #1
 80017e8:	68fb      	ldr	r3, [r7, #12]
 80017ea:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80017ec:	68fb      	ldr	r3, [r7, #12]
 80017ee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80017f0:	3b01      	subs	r3, #1
 80017f2:	b29a      	uxth	r2, r3
 80017f4:	68fb      	ldr	r3, [r7, #12]
 80017f6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80017f8:	68fb      	ldr	r3, [r7, #12]
 80017fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80017fc:	b29b      	uxth	r3, r3
 80017fe:	3b01      	subs	r3, #1
 8001800:	b29a      	uxth	r2, r3
 8001802:	68fb      	ldr	r3, [r7, #12]
 8001804:	855a      	strh	r2, [r3, #42]	; 0x2a
 8001806:	e10b      	b.n	8001a20 <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8001808:	68fb      	ldr	r3, [r7, #12]
 800180a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800180c:	2b02      	cmp	r3, #2
 800180e:	d14e      	bne.n	80018ae <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001810:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001812:	9300      	str	r3, [sp, #0]
 8001814:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001816:	2200      	movs	r2, #0
 8001818:	4906      	ldr	r1, [pc, #24]	; (8001834 <HAL_I2C_Master_Receive+0x22c>)
 800181a:	68f8      	ldr	r0, [r7, #12]
 800181c:	f000 fa68 	bl	8001cf0 <I2C_WaitOnFlagUntilTimeout>
 8001820:	4603      	mov	r3, r0
 8001822:	2b00      	cmp	r3, #0
 8001824:	d008      	beq.n	8001838 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 8001826:	2301      	movs	r3, #1
 8001828:	e10e      	b.n	8001a48 <HAL_I2C_Master_Receive+0x440>
 800182a:	bf00      	nop
 800182c:	00100002 	.word	0x00100002
 8001830:	ffff0000 	.word	0xffff0000
 8001834:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001838:	68fb      	ldr	r3, [r7, #12]
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	681a      	ldr	r2, [r3, #0]
 800183e:	68fb      	ldr	r3, [r7, #12]
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001846:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001848:	68fb      	ldr	r3, [r7, #12]
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	691a      	ldr	r2, [r3, #16]
 800184e:	68fb      	ldr	r3, [r7, #12]
 8001850:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001852:	b2d2      	uxtb	r2, r2
 8001854:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001856:	68fb      	ldr	r3, [r7, #12]
 8001858:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800185a:	1c5a      	adds	r2, r3, #1
 800185c:	68fb      	ldr	r3, [r7, #12]
 800185e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001860:	68fb      	ldr	r3, [r7, #12]
 8001862:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001864:	3b01      	subs	r3, #1
 8001866:	b29a      	uxth	r2, r3
 8001868:	68fb      	ldr	r3, [r7, #12]
 800186a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800186c:	68fb      	ldr	r3, [r7, #12]
 800186e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001870:	b29b      	uxth	r3, r3
 8001872:	3b01      	subs	r3, #1
 8001874:	b29a      	uxth	r2, r3
 8001876:	68fb      	ldr	r3, [r7, #12]
 8001878:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800187a:	68fb      	ldr	r3, [r7, #12]
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	691a      	ldr	r2, [r3, #16]
 8001880:	68fb      	ldr	r3, [r7, #12]
 8001882:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001884:	b2d2      	uxtb	r2, r2
 8001886:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001888:	68fb      	ldr	r3, [r7, #12]
 800188a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800188c:	1c5a      	adds	r2, r3, #1
 800188e:	68fb      	ldr	r3, [r7, #12]
 8001890:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001892:	68fb      	ldr	r3, [r7, #12]
 8001894:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001896:	3b01      	subs	r3, #1
 8001898:	b29a      	uxth	r2, r3
 800189a:	68fb      	ldr	r3, [r7, #12]
 800189c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800189e:	68fb      	ldr	r3, [r7, #12]
 80018a0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80018a2:	b29b      	uxth	r3, r3
 80018a4:	3b01      	subs	r3, #1
 80018a6:	b29a      	uxth	r2, r3
 80018a8:	68fb      	ldr	r3, [r7, #12]
 80018aa:	855a      	strh	r2, [r3, #42]	; 0x2a
 80018ac:	e0b8      	b.n	8001a20 <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80018ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018b0:	9300      	str	r3, [sp, #0]
 80018b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80018b4:	2200      	movs	r2, #0
 80018b6:	4966      	ldr	r1, [pc, #408]	; (8001a50 <HAL_I2C_Master_Receive+0x448>)
 80018b8:	68f8      	ldr	r0, [r7, #12]
 80018ba:	f000 fa19 	bl	8001cf0 <I2C_WaitOnFlagUntilTimeout>
 80018be:	4603      	mov	r3, r0
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	d001      	beq.n	80018c8 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 80018c4:	2301      	movs	r3, #1
 80018c6:	e0bf      	b.n	8001a48 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80018c8:	68fb      	ldr	r3, [r7, #12]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	681a      	ldr	r2, [r3, #0]
 80018ce:	68fb      	ldr	r3, [r7, #12]
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80018d6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80018d8:	68fb      	ldr	r3, [r7, #12]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	691a      	ldr	r2, [r3, #16]
 80018de:	68fb      	ldr	r3, [r7, #12]
 80018e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018e2:	b2d2      	uxtb	r2, r2
 80018e4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80018e6:	68fb      	ldr	r3, [r7, #12]
 80018e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018ea:	1c5a      	adds	r2, r3, #1
 80018ec:	68fb      	ldr	r3, [r7, #12]
 80018ee:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80018f0:	68fb      	ldr	r3, [r7, #12]
 80018f2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80018f4:	3b01      	subs	r3, #1
 80018f6:	b29a      	uxth	r2, r3
 80018f8:	68fb      	ldr	r3, [r7, #12]
 80018fa:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80018fc:	68fb      	ldr	r3, [r7, #12]
 80018fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001900:	b29b      	uxth	r3, r3
 8001902:	3b01      	subs	r3, #1
 8001904:	b29a      	uxth	r2, r3
 8001906:	68fb      	ldr	r3, [r7, #12]
 8001908:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800190a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800190c:	9300      	str	r3, [sp, #0]
 800190e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001910:	2200      	movs	r2, #0
 8001912:	494f      	ldr	r1, [pc, #316]	; (8001a50 <HAL_I2C_Master_Receive+0x448>)
 8001914:	68f8      	ldr	r0, [r7, #12]
 8001916:	f000 f9eb 	bl	8001cf0 <I2C_WaitOnFlagUntilTimeout>
 800191a:	4603      	mov	r3, r0
 800191c:	2b00      	cmp	r3, #0
 800191e:	d001      	beq.n	8001924 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8001920:	2301      	movs	r3, #1
 8001922:	e091      	b.n	8001a48 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001924:	68fb      	ldr	r3, [r7, #12]
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	681a      	ldr	r2, [r3, #0]
 800192a:	68fb      	ldr	r3, [r7, #12]
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001932:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001934:	68fb      	ldr	r3, [r7, #12]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	691a      	ldr	r2, [r3, #16]
 800193a:	68fb      	ldr	r3, [r7, #12]
 800193c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800193e:	b2d2      	uxtb	r2, r2
 8001940:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001942:	68fb      	ldr	r3, [r7, #12]
 8001944:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001946:	1c5a      	adds	r2, r3, #1
 8001948:	68fb      	ldr	r3, [r7, #12]
 800194a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800194c:	68fb      	ldr	r3, [r7, #12]
 800194e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001950:	3b01      	subs	r3, #1
 8001952:	b29a      	uxth	r2, r3
 8001954:	68fb      	ldr	r3, [r7, #12]
 8001956:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001958:	68fb      	ldr	r3, [r7, #12]
 800195a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800195c:	b29b      	uxth	r3, r3
 800195e:	3b01      	subs	r3, #1
 8001960:	b29a      	uxth	r2, r3
 8001962:	68fb      	ldr	r3, [r7, #12]
 8001964:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001966:	68fb      	ldr	r3, [r7, #12]
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	691a      	ldr	r2, [r3, #16]
 800196c:	68fb      	ldr	r3, [r7, #12]
 800196e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001970:	b2d2      	uxtb	r2, r2
 8001972:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001974:	68fb      	ldr	r3, [r7, #12]
 8001976:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001978:	1c5a      	adds	r2, r3, #1
 800197a:	68fb      	ldr	r3, [r7, #12]
 800197c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800197e:	68fb      	ldr	r3, [r7, #12]
 8001980:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001982:	3b01      	subs	r3, #1
 8001984:	b29a      	uxth	r2, r3
 8001986:	68fb      	ldr	r3, [r7, #12]
 8001988:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800198a:	68fb      	ldr	r3, [r7, #12]
 800198c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800198e:	b29b      	uxth	r3, r3
 8001990:	3b01      	subs	r3, #1
 8001992:	b29a      	uxth	r2, r3
 8001994:	68fb      	ldr	r3, [r7, #12]
 8001996:	855a      	strh	r2, [r3, #42]	; 0x2a
 8001998:	e042      	b.n	8001a20 <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800199a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800199c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800199e:	68f8      	ldr	r0, [r7, #12]
 80019a0:	f000 fafe 	bl	8001fa0 <I2C_WaitOnRXNEFlagUntilTimeout>
 80019a4:	4603      	mov	r3, r0
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d001      	beq.n	80019ae <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 80019aa:	2301      	movs	r3, #1
 80019ac:	e04c      	b.n	8001a48 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80019ae:	68fb      	ldr	r3, [r7, #12]
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	691a      	ldr	r2, [r3, #16]
 80019b4:	68fb      	ldr	r3, [r7, #12]
 80019b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019b8:	b2d2      	uxtb	r2, r2
 80019ba:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80019bc:	68fb      	ldr	r3, [r7, #12]
 80019be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019c0:	1c5a      	adds	r2, r3, #1
 80019c2:	68fb      	ldr	r3, [r7, #12]
 80019c4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80019c6:	68fb      	ldr	r3, [r7, #12]
 80019c8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80019ca:	3b01      	subs	r3, #1
 80019cc:	b29a      	uxth	r2, r3
 80019ce:	68fb      	ldr	r3, [r7, #12]
 80019d0:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80019d2:	68fb      	ldr	r3, [r7, #12]
 80019d4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80019d6:	b29b      	uxth	r3, r3
 80019d8:	3b01      	subs	r3, #1
 80019da:	b29a      	uxth	r2, r3
 80019dc:	68fb      	ldr	r3, [r7, #12]
 80019de:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80019e0:	68fb      	ldr	r3, [r7, #12]
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	695b      	ldr	r3, [r3, #20]
 80019e6:	f003 0304 	and.w	r3, r3, #4
 80019ea:	2b04      	cmp	r3, #4
 80019ec:	d118      	bne.n	8001a20 <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80019ee:	68fb      	ldr	r3, [r7, #12]
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	691a      	ldr	r2, [r3, #16]
 80019f4:	68fb      	ldr	r3, [r7, #12]
 80019f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019f8:	b2d2      	uxtb	r2, r2
 80019fa:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80019fc:	68fb      	ldr	r3, [r7, #12]
 80019fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a00:	1c5a      	adds	r2, r3, #1
 8001a02:	68fb      	ldr	r3, [r7, #12]
 8001a04:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001a06:	68fb      	ldr	r3, [r7, #12]
 8001a08:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001a0a:	3b01      	subs	r3, #1
 8001a0c:	b29a      	uxth	r2, r3
 8001a0e:	68fb      	ldr	r3, [r7, #12]
 8001a10:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001a12:	68fb      	ldr	r3, [r7, #12]
 8001a14:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001a16:	b29b      	uxth	r3, r3
 8001a18:	3b01      	subs	r3, #1
 8001a1a:	b29a      	uxth	r2, r3
 8001a1c:	68fb      	ldr	r3, [r7, #12]
 8001a1e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8001a20:	68fb      	ldr	r3, [r7, #12]
 8001a22:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	f47f aec2 	bne.w	80017ae <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8001a2a:	68fb      	ldr	r3, [r7, #12]
 8001a2c:	2220      	movs	r2, #32
 8001a2e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001a32:	68fb      	ldr	r3, [r7, #12]
 8001a34:	2200      	movs	r2, #0
 8001a36:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001a3a:	68fb      	ldr	r3, [r7, #12]
 8001a3c:	2200      	movs	r2, #0
 8001a3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8001a42:	2300      	movs	r3, #0
 8001a44:	e000      	b.n	8001a48 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 8001a46:	2302      	movs	r3, #2
  }
}
 8001a48:	4618      	mov	r0, r3
 8001a4a:	3728      	adds	r7, #40	; 0x28
 8001a4c:	46bd      	mov	sp, r7
 8001a4e:	bd80      	pop	{r7, pc}
 8001a50:	00010004 	.word	0x00010004

08001a54 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8001a54:	b580      	push	{r7, lr}
 8001a56:	b088      	sub	sp, #32
 8001a58:	af02      	add	r7, sp, #8
 8001a5a:	60f8      	str	r0, [r7, #12]
 8001a5c:	607a      	str	r2, [r7, #4]
 8001a5e:	603b      	str	r3, [r7, #0]
 8001a60:	460b      	mov	r3, r1
 8001a62:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8001a64:	68fb      	ldr	r3, [r7, #12]
 8001a66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a68:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8001a6a:	697b      	ldr	r3, [r7, #20]
 8001a6c:	2b08      	cmp	r3, #8
 8001a6e:	d006      	beq.n	8001a7e <I2C_MasterRequestWrite+0x2a>
 8001a70:	697b      	ldr	r3, [r7, #20]
 8001a72:	2b01      	cmp	r3, #1
 8001a74:	d003      	beq.n	8001a7e <I2C_MasterRequestWrite+0x2a>
 8001a76:	697b      	ldr	r3, [r7, #20]
 8001a78:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8001a7c:	d108      	bne.n	8001a90 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001a7e:	68fb      	ldr	r3, [r7, #12]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	681a      	ldr	r2, [r3, #0]
 8001a84:	68fb      	ldr	r3, [r7, #12]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001a8c:	601a      	str	r2, [r3, #0]
 8001a8e:	e00b      	b.n	8001aa8 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8001a90:	68fb      	ldr	r3, [r7, #12]
 8001a92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a94:	2b12      	cmp	r3, #18
 8001a96:	d107      	bne.n	8001aa8 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001a98:	68fb      	ldr	r3, [r7, #12]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	681a      	ldr	r2, [r3, #0]
 8001a9e:	68fb      	ldr	r3, [r7, #12]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001aa6:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001aa8:	683b      	ldr	r3, [r7, #0]
 8001aaa:	9300      	str	r3, [sp, #0]
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	2200      	movs	r2, #0
 8001ab0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001ab4:	68f8      	ldr	r0, [r7, #12]
 8001ab6:	f000 f91b 	bl	8001cf0 <I2C_WaitOnFlagUntilTimeout>
 8001aba:	4603      	mov	r3, r0
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	d00c      	beq.n	8001ada <I2C_MasterRequestWrite+0x86>
  {
    if (hi2c->Instance->CR1 & I2C_CR1_START)
 8001ac0:	68fb      	ldr	r3, [r7, #12]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d003      	beq.n	8001ad6 <I2C_MasterRequestWrite+0x82>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001ace:	68fb      	ldr	r3, [r7, #12]
 8001ad0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001ad4:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8001ad6:	2303      	movs	r3, #3
 8001ad8:	e035      	b.n	8001b46 <I2C_MasterRequestWrite+0xf2>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001ada:	68fb      	ldr	r3, [r7, #12]
 8001adc:	691b      	ldr	r3, [r3, #16]
 8001ade:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001ae2:	d108      	bne.n	8001af6 <I2C_MasterRequestWrite+0xa2>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001ae4:	897b      	ldrh	r3, [r7, #10]
 8001ae6:	b2db      	uxtb	r3, r3
 8001ae8:	461a      	mov	r2, r3
 8001aea:	68fb      	ldr	r3, [r7, #12]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8001af2:	611a      	str	r2, [r3, #16]
 8001af4:	e01b      	b.n	8001b2e <I2C_MasterRequestWrite+0xda>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8001af6:	897b      	ldrh	r3, [r7, #10]
 8001af8:	11db      	asrs	r3, r3, #7
 8001afa:	b2db      	uxtb	r3, r3
 8001afc:	f003 0306 	and.w	r3, r3, #6
 8001b00:	b2db      	uxtb	r3, r3
 8001b02:	f063 030f 	orn	r3, r3, #15
 8001b06:	b2da      	uxtb	r2, r3
 8001b08:	68fb      	ldr	r3, [r7, #12]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8001b0e:	683b      	ldr	r3, [r7, #0]
 8001b10:	687a      	ldr	r2, [r7, #4]
 8001b12:	490f      	ldr	r1, [pc, #60]	; (8001b50 <I2C_MasterRequestWrite+0xfc>)
 8001b14:	68f8      	ldr	r0, [r7, #12]
 8001b16:	f000 f942 	bl	8001d9e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001b1a:	4603      	mov	r3, r0
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	d001      	beq.n	8001b24 <I2C_MasterRequestWrite+0xd0>
    {
      return HAL_ERROR;
 8001b20:	2301      	movs	r3, #1
 8001b22:	e010      	b.n	8001b46 <I2C_MasterRequestWrite+0xf2>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8001b24:	897b      	ldrh	r3, [r7, #10]
 8001b26:	b2da      	uxtb	r2, r3
 8001b28:	68fb      	ldr	r3, [r7, #12]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001b2e:	683b      	ldr	r3, [r7, #0]
 8001b30:	687a      	ldr	r2, [r7, #4]
 8001b32:	4908      	ldr	r1, [pc, #32]	; (8001b54 <I2C_MasterRequestWrite+0x100>)
 8001b34:	68f8      	ldr	r0, [r7, #12]
 8001b36:	f000 f932 	bl	8001d9e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001b3a:	4603      	mov	r3, r0
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d001      	beq.n	8001b44 <I2C_MasterRequestWrite+0xf0>
  {
    return HAL_ERROR;
 8001b40:	2301      	movs	r3, #1
 8001b42:	e000      	b.n	8001b46 <I2C_MasterRequestWrite+0xf2>
  }

  return HAL_OK;
 8001b44:	2300      	movs	r3, #0
}
 8001b46:	4618      	mov	r0, r3
 8001b48:	3718      	adds	r7, #24
 8001b4a:	46bd      	mov	sp, r7
 8001b4c:	bd80      	pop	{r7, pc}
 8001b4e:	bf00      	nop
 8001b50:	00010008 	.word	0x00010008
 8001b54:	00010002 	.word	0x00010002

08001b58 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8001b58:	b580      	push	{r7, lr}
 8001b5a:	b088      	sub	sp, #32
 8001b5c:	af02      	add	r7, sp, #8
 8001b5e:	60f8      	str	r0, [r7, #12]
 8001b60:	607a      	str	r2, [r7, #4]
 8001b62:	603b      	str	r3, [r7, #0]
 8001b64:	460b      	mov	r3, r1
 8001b66:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8001b68:	68fb      	ldr	r3, [r7, #12]
 8001b6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b6c:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001b6e:	68fb      	ldr	r3, [r7, #12]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	681a      	ldr	r2, [r3, #0]
 8001b74:	68fb      	ldr	r3, [r7, #12]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001b7c:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8001b7e:	697b      	ldr	r3, [r7, #20]
 8001b80:	2b08      	cmp	r3, #8
 8001b82:	d006      	beq.n	8001b92 <I2C_MasterRequestRead+0x3a>
 8001b84:	697b      	ldr	r3, [r7, #20]
 8001b86:	2b01      	cmp	r3, #1
 8001b88:	d003      	beq.n	8001b92 <I2C_MasterRequestRead+0x3a>
 8001b8a:	697b      	ldr	r3, [r7, #20]
 8001b8c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8001b90:	d108      	bne.n	8001ba4 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001b92:	68fb      	ldr	r3, [r7, #12]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	681a      	ldr	r2, [r3, #0]
 8001b98:	68fb      	ldr	r3, [r7, #12]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001ba0:	601a      	str	r2, [r3, #0]
 8001ba2:	e00b      	b.n	8001bbc <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8001ba4:	68fb      	ldr	r3, [r7, #12]
 8001ba6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ba8:	2b11      	cmp	r3, #17
 8001baa:	d107      	bne.n	8001bbc <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001bac:	68fb      	ldr	r3, [r7, #12]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	681a      	ldr	r2, [r3, #0]
 8001bb2:	68fb      	ldr	r3, [r7, #12]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001bba:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001bbc:	683b      	ldr	r3, [r7, #0]
 8001bbe:	9300      	str	r3, [sp, #0]
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	2200      	movs	r2, #0
 8001bc4:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001bc8:	68f8      	ldr	r0, [r7, #12]
 8001bca:	f000 f891 	bl	8001cf0 <I2C_WaitOnFlagUntilTimeout>
 8001bce:	4603      	mov	r3, r0
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d00c      	beq.n	8001bee <I2C_MasterRequestRead+0x96>
  {
    if (hi2c->Instance->CR1 & I2C_CR1_START)
 8001bd4:	68fb      	ldr	r3, [r7, #12]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d003      	beq.n	8001bea <I2C_MasterRequestRead+0x92>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001be2:	68fb      	ldr	r3, [r7, #12]
 8001be4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001be8:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8001bea:	2303      	movs	r3, #3
 8001bec:	e078      	b.n	8001ce0 <I2C_MasterRequestRead+0x188>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001bee:	68fb      	ldr	r3, [r7, #12]
 8001bf0:	691b      	ldr	r3, [r3, #16]
 8001bf2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001bf6:	d108      	bne.n	8001c0a <I2C_MasterRequestRead+0xb2>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8001bf8:	897b      	ldrh	r3, [r7, #10]
 8001bfa:	b2db      	uxtb	r3, r3
 8001bfc:	f043 0301 	orr.w	r3, r3, #1
 8001c00:	b2da      	uxtb	r2, r3
 8001c02:	68fb      	ldr	r3, [r7, #12]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	611a      	str	r2, [r3, #16]
 8001c08:	e05e      	b.n	8001cc8 <I2C_MasterRequestRead+0x170>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8001c0a:	897b      	ldrh	r3, [r7, #10]
 8001c0c:	11db      	asrs	r3, r3, #7
 8001c0e:	b2db      	uxtb	r3, r3
 8001c10:	f003 0306 	and.w	r3, r3, #6
 8001c14:	b2db      	uxtb	r3, r3
 8001c16:	f063 030f 	orn	r3, r3, #15
 8001c1a:	b2da      	uxtb	r2, r3
 8001c1c:	68fb      	ldr	r3, [r7, #12]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8001c22:	683b      	ldr	r3, [r7, #0]
 8001c24:	687a      	ldr	r2, [r7, #4]
 8001c26:	4930      	ldr	r1, [pc, #192]	; (8001ce8 <I2C_MasterRequestRead+0x190>)
 8001c28:	68f8      	ldr	r0, [r7, #12]
 8001c2a:	f000 f8b8 	bl	8001d9e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001c2e:	4603      	mov	r3, r0
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d001      	beq.n	8001c38 <I2C_MasterRequestRead+0xe0>
    {
      return HAL_ERROR;
 8001c34:	2301      	movs	r3, #1
 8001c36:	e053      	b.n	8001ce0 <I2C_MasterRequestRead+0x188>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8001c38:	897b      	ldrh	r3, [r7, #10]
 8001c3a:	b2da      	uxtb	r2, r3
 8001c3c:	68fb      	ldr	r3, [r7, #12]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001c42:	683b      	ldr	r3, [r7, #0]
 8001c44:	687a      	ldr	r2, [r7, #4]
 8001c46:	4929      	ldr	r1, [pc, #164]	; (8001cec <I2C_MasterRequestRead+0x194>)
 8001c48:	68f8      	ldr	r0, [r7, #12]
 8001c4a:	f000 f8a8 	bl	8001d9e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001c4e:	4603      	mov	r3, r0
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	d001      	beq.n	8001c58 <I2C_MasterRequestRead+0x100>
    {
      return HAL_ERROR;
 8001c54:	2301      	movs	r3, #1
 8001c56:	e043      	b.n	8001ce0 <I2C_MasterRequestRead+0x188>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001c58:	2300      	movs	r3, #0
 8001c5a:	613b      	str	r3, [r7, #16]
 8001c5c:	68fb      	ldr	r3, [r7, #12]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	695b      	ldr	r3, [r3, #20]
 8001c62:	613b      	str	r3, [r7, #16]
 8001c64:	68fb      	ldr	r3, [r7, #12]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	699b      	ldr	r3, [r3, #24]
 8001c6a:	613b      	str	r3, [r7, #16]
 8001c6c:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001c6e:	68fb      	ldr	r3, [r7, #12]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	681a      	ldr	r2, [r3, #0]
 8001c74:	68fb      	ldr	r3, [r7, #12]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001c7c:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001c7e:	683b      	ldr	r3, [r7, #0]
 8001c80:	9300      	str	r3, [sp, #0]
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	2200      	movs	r2, #0
 8001c86:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001c8a:	68f8      	ldr	r0, [r7, #12]
 8001c8c:	f000 f830 	bl	8001cf0 <I2C_WaitOnFlagUntilTimeout>
 8001c90:	4603      	mov	r3, r0
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d00c      	beq.n	8001cb0 <I2C_MasterRequestRead+0x158>
    {
      if (hi2c->Instance->CR1 & I2C_CR1_START)
 8001c96:	68fb      	ldr	r3, [r7, #12]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	d003      	beq.n	8001cac <I2C_MasterRequestRead+0x154>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001ca4:	68fb      	ldr	r3, [r7, #12]
 8001ca6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001caa:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8001cac:	2303      	movs	r3, #3
 8001cae:	e017      	b.n	8001ce0 <I2C_MasterRequestRead+0x188>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8001cb0:	897b      	ldrh	r3, [r7, #10]
 8001cb2:	11db      	asrs	r3, r3, #7
 8001cb4:	b2db      	uxtb	r3, r3
 8001cb6:	f003 0306 	and.w	r3, r3, #6
 8001cba:	b2db      	uxtb	r3, r3
 8001cbc:	f063 030e 	orn	r3, r3, #14
 8001cc0:	b2da      	uxtb	r2, r3
 8001cc2:	68fb      	ldr	r3, [r7, #12]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001cc8:	683b      	ldr	r3, [r7, #0]
 8001cca:	687a      	ldr	r2, [r7, #4]
 8001ccc:	4907      	ldr	r1, [pc, #28]	; (8001cec <I2C_MasterRequestRead+0x194>)
 8001cce:	68f8      	ldr	r0, [r7, #12]
 8001cd0:	f000 f865 	bl	8001d9e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001cd4:	4603      	mov	r3, r0
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d001      	beq.n	8001cde <I2C_MasterRequestRead+0x186>
  {
    return HAL_ERROR;
 8001cda:	2301      	movs	r3, #1
 8001cdc:	e000      	b.n	8001ce0 <I2C_MasterRequestRead+0x188>
  }

  return HAL_OK;
 8001cde:	2300      	movs	r3, #0
}
 8001ce0:	4618      	mov	r0, r3
 8001ce2:	3718      	adds	r7, #24
 8001ce4:	46bd      	mov	sp, r7
 8001ce6:	bd80      	pop	{r7, pc}
 8001ce8:	00010008 	.word	0x00010008
 8001cec:	00010002 	.word	0x00010002

08001cf0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8001cf0:	b580      	push	{r7, lr}
 8001cf2:	b084      	sub	sp, #16
 8001cf4:	af00      	add	r7, sp, #0
 8001cf6:	60f8      	str	r0, [r7, #12]
 8001cf8:	60b9      	str	r1, [r7, #8]
 8001cfa:	603b      	str	r3, [r7, #0]
 8001cfc:	4613      	mov	r3, r2
 8001cfe:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001d00:	e025      	b.n	8001d4e <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001d02:	683b      	ldr	r3, [r7, #0]
 8001d04:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001d08:	d021      	beq.n	8001d4e <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001d0a:	f7fe ff97 	bl	8000c3c <HAL_GetTick>
 8001d0e:	4602      	mov	r2, r0
 8001d10:	69bb      	ldr	r3, [r7, #24]
 8001d12:	1ad3      	subs	r3, r2, r3
 8001d14:	683a      	ldr	r2, [r7, #0]
 8001d16:	429a      	cmp	r2, r3
 8001d18:	d302      	bcc.n	8001d20 <I2C_WaitOnFlagUntilTimeout+0x30>
 8001d1a:	683b      	ldr	r3, [r7, #0]
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	d116      	bne.n	8001d4e <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8001d20:	68fb      	ldr	r3, [r7, #12]
 8001d22:	2200      	movs	r2, #0
 8001d24:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8001d26:	68fb      	ldr	r3, [r7, #12]
 8001d28:	2220      	movs	r2, #32
 8001d2a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8001d2e:	68fb      	ldr	r3, [r7, #12]
 8001d30:	2200      	movs	r2, #0
 8001d32:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8001d36:	68fb      	ldr	r3, [r7, #12]
 8001d38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d3a:	f043 0220 	orr.w	r2, r3, #32
 8001d3e:	68fb      	ldr	r3, [r7, #12]
 8001d40:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001d42:	68fb      	ldr	r3, [r7, #12]
 8001d44:	2200      	movs	r2, #0
 8001d46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8001d4a:	2301      	movs	r3, #1
 8001d4c:	e023      	b.n	8001d96 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001d4e:	68bb      	ldr	r3, [r7, #8]
 8001d50:	0c1b      	lsrs	r3, r3, #16
 8001d52:	b2db      	uxtb	r3, r3
 8001d54:	2b01      	cmp	r3, #1
 8001d56:	d10d      	bne.n	8001d74 <I2C_WaitOnFlagUntilTimeout+0x84>
 8001d58:	68fb      	ldr	r3, [r7, #12]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	695b      	ldr	r3, [r3, #20]
 8001d5e:	43da      	mvns	r2, r3
 8001d60:	68bb      	ldr	r3, [r7, #8]
 8001d62:	4013      	ands	r3, r2
 8001d64:	b29b      	uxth	r3, r3
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	bf0c      	ite	eq
 8001d6a:	2301      	moveq	r3, #1
 8001d6c:	2300      	movne	r3, #0
 8001d6e:	b2db      	uxtb	r3, r3
 8001d70:	461a      	mov	r2, r3
 8001d72:	e00c      	b.n	8001d8e <I2C_WaitOnFlagUntilTimeout+0x9e>
 8001d74:	68fb      	ldr	r3, [r7, #12]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	699b      	ldr	r3, [r3, #24]
 8001d7a:	43da      	mvns	r2, r3
 8001d7c:	68bb      	ldr	r3, [r7, #8]
 8001d7e:	4013      	ands	r3, r2
 8001d80:	b29b      	uxth	r3, r3
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	bf0c      	ite	eq
 8001d86:	2301      	moveq	r3, #1
 8001d88:	2300      	movne	r3, #0
 8001d8a:	b2db      	uxtb	r3, r3
 8001d8c:	461a      	mov	r2, r3
 8001d8e:	79fb      	ldrb	r3, [r7, #7]
 8001d90:	429a      	cmp	r2, r3
 8001d92:	d0b6      	beq.n	8001d02 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8001d94:	2300      	movs	r3, #0
}
 8001d96:	4618      	mov	r0, r3
 8001d98:	3710      	adds	r7, #16
 8001d9a:	46bd      	mov	sp, r7
 8001d9c:	bd80      	pop	{r7, pc}

08001d9e <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8001d9e:	b580      	push	{r7, lr}
 8001da0:	b084      	sub	sp, #16
 8001da2:	af00      	add	r7, sp, #0
 8001da4:	60f8      	str	r0, [r7, #12]
 8001da6:	60b9      	str	r1, [r7, #8]
 8001da8:	607a      	str	r2, [r7, #4]
 8001daa:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001dac:	e051      	b.n	8001e52 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001dae:	68fb      	ldr	r3, [r7, #12]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	695b      	ldr	r3, [r3, #20]
 8001db4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001db8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001dbc:	d123      	bne.n	8001e06 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001dbe:	68fb      	ldr	r3, [r7, #12]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	681a      	ldr	r2, [r3, #0]
 8001dc4:	68fb      	ldr	r3, [r7, #12]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001dcc:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001dce:	68fb      	ldr	r3, [r7, #12]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8001dd6:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8001dd8:	68fb      	ldr	r3, [r7, #12]
 8001dda:	2200      	movs	r2, #0
 8001ddc:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8001dde:	68fb      	ldr	r3, [r7, #12]
 8001de0:	2220      	movs	r2, #32
 8001de2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001de6:	68fb      	ldr	r3, [r7, #12]
 8001de8:	2200      	movs	r2, #0
 8001dea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8001dee:	68fb      	ldr	r3, [r7, #12]
 8001df0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001df2:	f043 0204 	orr.w	r2, r3, #4
 8001df6:	68fb      	ldr	r3, [r7, #12]
 8001df8:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001dfa:	68fb      	ldr	r3, [r7, #12]
 8001dfc:	2200      	movs	r2, #0
 8001dfe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8001e02:	2301      	movs	r3, #1
 8001e04:	e046      	b.n	8001e94 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001e0c:	d021      	beq.n	8001e52 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001e0e:	f7fe ff15 	bl	8000c3c <HAL_GetTick>
 8001e12:	4602      	mov	r2, r0
 8001e14:	683b      	ldr	r3, [r7, #0]
 8001e16:	1ad3      	subs	r3, r2, r3
 8001e18:	687a      	ldr	r2, [r7, #4]
 8001e1a:	429a      	cmp	r2, r3
 8001e1c:	d302      	bcc.n	8001e24 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	d116      	bne.n	8001e52 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8001e24:	68fb      	ldr	r3, [r7, #12]
 8001e26:	2200      	movs	r2, #0
 8001e28:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8001e2a:	68fb      	ldr	r3, [r7, #12]
 8001e2c:	2220      	movs	r2, #32
 8001e2e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001e32:	68fb      	ldr	r3, [r7, #12]
 8001e34:	2200      	movs	r2, #0
 8001e36:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001e3a:	68fb      	ldr	r3, [r7, #12]
 8001e3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e3e:	f043 0220 	orr.w	r2, r3, #32
 8001e42:	68fb      	ldr	r3, [r7, #12]
 8001e44:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001e46:	68fb      	ldr	r3, [r7, #12]
 8001e48:	2200      	movs	r2, #0
 8001e4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8001e4e:	2301      	movs	r3, #1
 8001e50:	e020      	b.n	8001e94 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001e52:	68bb      	ldr	r3, [r7, #8]
 8001e54:	0c1b      	lsrs	r3, r3, #16
 8001e56:	b2db      	uxtb	r3, r3
 8001e58:	2b01      	cmp	r3, #1
 8001e5a:	d10c      	bne.n	8001e76 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8001e5c:	68fb      	ldr	r3, [r7, #12]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	695b      	ldr	r3, [r3, #20]
 8001e62:	43da      	mvns	r2, r3
 8001e64:	68bb      	ldr	r3, [r7, #8]
 8001e66:	4013      	ands	r3, r2
 8001e68:	b29b      	uxth	r3, r3
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	bf14      	ite	ne
 8001e6e:	2301      	movne	r3, #1
 8001e70:	2300      	moveq	r3, #0
 8001e72:	b2db      	uxtb	r3, r3
 8001e74:	e00b      	b.n	8001e8e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8001e76:	68fb      	ldr	r3, [r7, #12]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	699b      	ldr	r3, [r3, #24]
 8001e7c:	43da      	mvns	r2, r3
 8001e7e:	68bb      	ldr	r3, [r7, #8]
 8001e80:	4013      	ands	r3, r2
 8001e82:	b29b      	uxth	r3, r3
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	bf14      	ite	ne
 8001e88:	2301      	movne	r3, #1
 8001e8a:	2300      	moveq	r3, #0
 8001e8c:	b2db      	uxtb	r3, r3
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d18d      	bne.n	8001dae <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8001e92:	2300      	movs	r3, #0
}
 8001e94:	4618      	mov	r0, r3
 8001e96:	3710      	adds	r7, #16
 8001e98:	46bd      	mov	sp, r7
 8001e9a:	bd80      	pop	{r7, pc}

08001e9c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001e9c:	b580      	push	{r7, lr}
 8001e9e:	b084      	sub	sp, #16
 8001ea0:	af00      	add	r7, sp, #0
 8001ea2:	60f8      	str	r0, [r7, #12]
 8001ea4:	60b9      	str	r1, [r7, #8]
 8001ea6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001ea8:	e02d      	b.n	8001f06 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8001eaa:	68f8      	ldr	r0, [r7, #12]
 8001eac:	f000 f8ce 	bl	800204c <I2C_IsAcknowledgeFailed>
 8001eb0:	4603      	mov	r3, r0
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d001      	beq.n	8001eba <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8001eb6:	2301      	movs	r3, #1
 8001eb8:	e02d      	b.n	8001f16 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001eba:	68bb      	ldr	r3, [r7, #8]
 8001ebc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001ec0:	d021      	beq.n	8001f06 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001ec2:	f7fe febb 	bl	8000c3c <HAL_GetTick>
 8001ec6:	4602      	mov	r2, r0
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	1ad3      	subs	r3, r2, r3
 8001ecc:	68ba      	ldr	r2, [r7, #8]
 8001ece:	429a      	cmp	r2, r3
 8001ed0:	d302      	bcc.n	8001ed8 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8001ed2:	68bb      	ldr	r3, [r7, #8]
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d116      	bne.n	8001f06 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8001ed8:	68fb      	ldr	r3, [r7, #12]
 8001eda:	2200      	movs	r2, #0
 8001edc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8001ede:	68fb      	ldr	r3, [r7, #12]
 8001ee0:	2220      	movs	r2, #32
 8001ee2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001ee6:	68fb      	ldr	r3, [r7, #12]
 8001ee8:	2200      	movs	r2, #0
 8001eea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001eee:	68fb      	ldr	r3, [r7, #12]
 8001ef0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ef2:	f043 0220 	orr.w	r2, r3, #32
 8001ef6:	68fb      	ldr	r3, [r7, #12]
 8001ef8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001efa:	68fb      	ldr	r3, [r7, #12]
 8001efc:	2200      	movs	r2, #0
 8001efe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8001f02:	2301      	movs	r3, #1
 8001f04:	e007      	b.n	8001f16 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001f06:	68fb      	ldr	r3, [r7, #12]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	695b      	ldr	r3, [r3, #20]
 8001f0c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f10:	2b80      	cmp	r3, #128	; 0x80
 8001f12:	d1ca      	bne.n	8001eaa <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8001f14:	2300      	movs	r3, #0
}
 8001f16:	4618      	mov	r0, r3
 8001f18:	3710      	adds	r7, #16
 8001f1a:	46bd      	mov	sp, r7
 8001f1c:	bd80      	pop	{r7, pc}

08001f1e <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001f1e:	b580      	push	{r7, lr}
 8001f20:	b084      	sub	sp, #16
 8001f22:	af00      	add	r7, sp, #0
 8001f24:	60f8      	str	r0, [r7, #12]
 8001f26:	60b9      	str	r1, [r7, #8]
 8001f28:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8001f2a:	e02d      	b.n	8001f88 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8001f2c:	68f8      	ldr	r0, [r7, #12]
 8001f2e:	f000 f88d 	bl	800204c <I2C_IsAcknowledgeFailed>
 8001f32:	4603      	mov	r3, r0
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d001      	beq.n	8001f3c <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8001f38:	2301      	movs	r3, #1
 8001f3a:	e02d      	b.n	8001f98 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001f3c:	68bb      	ldr	r3, [r7, #8]
 8001f3e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001f42:	d021      	beq.n	8001f88 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001f44:	f7fe fe7a 	bl	8000c3c <HAL_GetTick>
 8001f48:	4602      	mov	r2, r0
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	1ad3      	subs	r3, r2, r3
 8001f4e:	68ba      	ldr	r2, [r7, #8]
 8001f50:	429a      	cmp	r2, r3
 8001f52:	d302      	bcc.n	8001f5a <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8001f54:	68bb      	ldr	r3, [r7, #8]
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d116      	bne.n	8001f88 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8001f5a:	68fb      	ldr	r3, [r7, #12]
 8001f5c:	2200      	movs	r2, #0
 8001f5e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8001f60:	68fb      	ldr	r3, [r7, #12]
 8001f62:	2220      	movs	r2, #32
 8001f64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001f68:	68fb      	ldr	r3, [r7, #12]
 8001f6a:	2200      	movs	r2, #0
 8001f6c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001f70:	68fb      	ldr	r3, [r7, #12]
 8001f72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f74:	f043 0220 	orr.w	r2, r3, #32
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001f7c:	68fb      	ldr	r3, [r7, #12]
 8001f7e:	2200      	movs	r2, #0
 8001f80:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8001f84:	2301      	movs	r3, #1
 8001f86:	e007      	b.n	8001f98 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	695b      	ldr	r3, [r3, #20]
 8001f8e:	f003 0304 	and.w	r3, r3, #4
 8001f92:	2b04      	cmp	r3, #4
 8001f94:	d1ca      	bne.n	8001f2c <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8001f96:	2300      	movs	r3, #0
}
 8001f98:	4618      	mov	r0, r3
 8001f9a:	3710      	adds	r7, #16
 8001f9c:	46bd      	mov	sp, r7
 8001f9e:	bd80      	pop	{r7, pc}

08001fa0 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001fa0:	b580      	push	{r7, lr}
 8001fa2:	b084      	sub	sp, #16
 8001fa4:	af00      	add	r7, sp, #0
 8001fa6:	60f8      	str	r0, [r7, #12]
 8001fa8:	60b9      	str	r1, [r7, #8]
 8001faa:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8001fac:	e042      	b.n	8002034 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8001fae:	68fb      	ldr	r3, [r7, #12]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	695b      	ldr	r3, [r3, #20]
 8001fb4:	f003 0310 	and.w	r3, r3, #16
 8001fb8:	2b10      	cmp	r3, #16
 8001fba:	d119      	bne.n	8001ff0 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001fbc:	68fb      	ldr	r3, [r7, #12]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	f06f 0210 	mvn.w	r2, #16
 8001fc4:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8001fc6:	68fb      	ldr	r3, [r7, #12]
 8001fc8:	2200      	movs	r2, #0
 8001fca:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8001fcc:	68fb      	ldr	r3, [r7, #12]
 8001fce:	2220      	movs	r2, #32
 8001fd0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001fd4:	68fb      	ldr	r3, [r7, #12]
 8001fd6:	2200      	movs	r2, #0
 8001fd8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8001fdc:	68fb      	ldr	r3, [r7, #12]
 8001fde:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001fe0:	68fb      	ldr	r3, [r7, #12]
 8001fe2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001fe4:	68fb      	ldr	r3, [r7, #12]
 8001fe6:	2200      	movs	r2, #0
 8001fe8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8001fec:	2301      	movs	r3, #1
 8001fee:	e029      	b.n	8002044 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001ff0:	f7fe fe24 	bl	8000c3c <HAL_GetTick>
 8001ff4:	4602      	mov	r2, r0
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	1ad3      	subs	r3, r2, r3
 8001ffa:	68ba      	ldr	r2, [r7, #8]
 8001ffc:	429a      	cmp	r2, r3
 8001ffe:	d302      	bcc.n	8002006 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8002000:	68bb      	ldr	r3, [r7, #8]
 8002002:	2b00      	cmp	r3, #0
 8002004:	d116      	bne.n	8002034 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8002006:	68fb      	ldr	r3, [r7, #12]
 8002008:	2200      	movs	r2, #0
 800200a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800200c:	68fb      	ldr	r3, [r7, #12]
 800200e:	2220      	movs	r2, #32
 8002010:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002014:	68fb      	ldr	r3, [r7, #12]
 8002016:	2200      	movs	r2, #0
 8002018:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800201c:	68fb      	ldr	r3, [r7, #12]
 800201e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002020:	f043 0220 	orr.w	r2, r3, #32
 8002024:	68fb      	ldr	r3, [r7, #12]
 8002026:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002028:	68fb      	ldr	r3, [r7, #12]
 800202a:	2200      	movs	r2, #0
 800202c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002030:	2301      	movs	r3, #1
 8002032:	e007      	b.n	8002044 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002034:	68fb      	ldr	r3, [r7, #12]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	695b      	ldr	r3, [r3, #20]
 800203a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800203e:	2b40      	cmp	r3, #64	; 0x40
 8002040:	d1b5      	bne.n	8001fae <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8002042:	2300      	movs	r3, #0
}
 8002044:	4618      	mov	r0, r3
 8002046:	3710      	adds	r7, #16
 8002048:	46bd      	mov	sp, r7
 800204a:	bd80      	pop	{r7, pc}

0800204c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800204c:	b480      	push	{r7}
 800204e:	b083      	sub	sp, #12
 8002050:	af00      	add	r7, sp, #0
 8002052:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	695b      	ldr	r3, [r3, #20]
 800205a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800205e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002062:	d11b      	bne.n	800209c <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800206c:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	2200      	movs	r2, #0
 8002072:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	2220      	movs	r2, #32
 8002078:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	2200      	movs	r2, #0
 8002080:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002088:	f043 0204 	orr.w	r2, r3, #4
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	2200      	movs	r2, #0
 8002094:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8002098:	2301      	movs	r3, #1
 800209a:	e000      	b.n	800209e <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800209c:	2300      	movs	r3, #0
}
 800209e:	4618      	mov	r0, r3
 80020a0:	370c      	adds	r7, #12
 80020a2:	46bd      	mov	sp, r7
 80020a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a8:	4770      	bx	lr
	...

080020ac <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80020ac:	b580      	push	{r7, lr}
 80020ae:	b086      	sub	sp, #24
 80020b0:	af00      	add	r7, sp, #0
 80020b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d101      	bne.n	80020be <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80020ba:	2301      	movs	r3, #1
 80020bc:	e25b      	b.n	8002576 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	f003 0301 	and.w	r3, r3, #1
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d075      	beq.n	80021b6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80020ca:	4ba3      	ldr	r3, [pc, #652]	; (8002358 <HAL_RCC_OscConfig+0x2ac>)
 80020cc:	689b      	ldr	r3, [r3, #8]
 80020ce:	f003 030c 	and.w	r3, r3, #12
 80020d2:	2b04      	cmp	r3, #4
 80020d4:	d00c      	beq.n	80020f0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80020d6:	4ba0      	ldr	r3, [pc, #640]	; (8002358 <HAL_RCC_OscConfig+0x2ac>)
 80020d8:	689b      	ldr	r3, [r3, #8]
 80020da:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80020de:	2b08      	cmp	r3, #8
 80020e0:	d112      	bne.n	8002108 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80020e2:	4b9d      	ldr	r3, [pc, #628]	; (8002358 <HAL_RCC_OscConfig+0x2ac>)
 80020e4:	685b      	ldr	r3, [r3, #4]
 80020e6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80020ea:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80020ee:	d10b      	bne.n	8002108 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80020f0:	4b99      	ldr	r3, [pc, #612]	; (8002358 <HAL_RCC_OscConfig+0x2ac>)
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d05b      	beq.n	80021b4 <HAL_RCC_OscConfig+0x108>
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	685b      	ldr	r3, [r3, #4]
 8002100:	2b00      	cmp	r3, #0
 8002102:	d157      	bne.n	80021b4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002104:	2301      	movs	r3, #1
 8002106:	e236      	b.n	8002576 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	685b      	ldr	r3, [r3, #4]
 800210c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002110:	d106      	bne.n	8002120 <HAL_RCC_OscConfig+0x74>
 8002112:	4b91      	ldr	r3, [pc, #580]	; (8002358 <HAL_RCC_OscConfig+0x2ac>)
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	4a90      	ldr	r2, [pc, #576]	; (8002358 <HAL_RCC_OscConfig+0x2ac>)
 8002118:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800211c:	6013      	str	r3, [r2, #0]
 800211e:	e01d      	b.n	800215c <HAL_RCC_OscConfig+0xb0>
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	685b      	ldr	r3, [r3, #4]
 8002124:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002128:	d10c      	bne.n	8002144 <HAL_RCC_OscConfig+0x98>
 800212a:	4b8b      	ldr	r3, [pc, #556]	; (8002358 <HAL_RCC_OscConfig+0x2ac>)
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	4a8a      	ldr	r2, [pc, #552]	; (8002358 <HAL_RCC_OscConfig+0x2ac>)
 8002130:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002134:	6013      	str	r3, [r2, #0]
 8002136:	4b88      	ldr	r3, [pc, #544]	; (8002358 <HAL_RCC_OscConfig+0x2ac>)
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	4a87      	ldr	r2, [pc, #540]	; (8002358 <HAL_RCC_OscConfig+0x2ac>)
 800213c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002140:	6013      	str	r3, [r2, #0]
 8002142:	e00b      	b.n	800215c <HAL_RCC_OscConfig+0xb0>
 8002144:	4b84      	ldr	r3, [pc, #528]	; (8002358 <HAL_RCC_OscConfig+0x2ac>)
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	4a83      	ldr	r2, [pc, #524]	; (8002358 <HAL_RCC_OscConfig+0x2ac>)
 800214a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800214e:	6013      	str	r3, [r2, #0]
 8002150:	4b81      	ldr	r3, [pc, #516]	; (8002358 <HAL_RCC_OscConfig+0x2ac>)
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	4a80      	ldr	r2, [pc, #512]	; (8002358 <HAL_RCC_OscConfig+0x2ac>)
 8002156:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800215a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	685b      	ldr	r3, [r3, #4]
 8002160:	2b00      	cmp	r3, #0
 8002162:	d013      	beq.n	800218c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002164:	f7fe fd6a 	bl	8000c3c <HAL_GetTick>
 8002168:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800216a:	e008      	b.n	800217e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800216c:	f7fe fd66 	bl	8000c3c <HAL_GetTick>
 8002170:	4602      	mov	r2, r0
 8002172:	693b      	ldr	r3, [r7, #16]
 8002174:	1ad3      	subs	r3, r2, r3
 8002176:	2b64      	cmp	r3, #100	; 0x64
 8002178:	d901      	bls.n	800217e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800217a:	2303      	movs	r3, #3
 800217c:	e1fb      	b.n	8002576 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800217e:	4b76      	ldr	r3, [pc, #472]	; (8002358 <HAL_RCC_OscConfig+0x2ac>)
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002186:	2b00      	cmp	r3, #0
 8002188:	d0f0      	beq.n	800216c <HAL_RCC_OscConfig+0xc0>
 800218a:	e014      	b.n	80021b6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800218c:	f7fe fd56 	bl	8000c3c <HAL_GetTick>
 8002190:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002192:	e008      	b.n	80021a6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002194:	f7fe fd52 	bl	8000c3c <HAL_GetTick>
 8002198:	4602      	mov	r2, r0
 800219a:	693b      	ldr	r3, [r7, #16]
 800219c:	1ad3      	subs	r3, r2, r3
 800219e:	2b64      	cmp	r3, #100	; 0x64
 80021a0:	d901      	bls.n	80021a6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80021a2:	2303      	movs	r3, #3
 80021a4:	e1e7      	b.n	8002576 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80021a6:	4b6c      	ldr	r3, [pc, #432]	; (8002358 <HAL_RCC_OscConfig+0x2ac>)
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d1f0      	bne.n	8002194 <HAL_RCC_OscConfig+0xe8>
 80021b2:	e000      	b.n	80021b6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80021b4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	f003 0302 	and.w	r3, r3, #2
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d063      	beq.n	800228a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80021c2:	4b65      	ldr	r3, [pc, #404]	; (8002358 <HAL_RCC_OscConfig+0x2ac>)
 80021c4:	689b      	ldr	r3, [r3, #8]
 80021c6:	f003 030c 	and.w	r3, r3, #12
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d00b      	beq.n	80021e6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80021ce:	4b62      	ldr	r3, [pc, #392]	; (8002358 <HAL_RCC_OscConfig+0x2ac>)
 80021d0:	689b      	ldr	r3, [r3, #8]
 80021d2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80021d6:	2b08      	cmp	r3, #8
 80021d8:	d11c      	bne.n	8002214 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80021da:	4b5f      	ldr	r3, [pc, #380]	; (8002358 <HAL_RCC_OscConfig+0x2ac>)
 80021dc:	685b      	ldr	r3, [r3, #4]
 80021de:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d116      	bne.n	8002214 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80021e6:	4b5c      	ldr	r3, [pc, #368]	; (8002358 <HAL_RCC_OscConfig+0x2ac>)
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	f003 0302 	and.w	r3, r3, #2
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d005      	beq.n	80021fe <HAL_RCC_OscConfig+0x152>
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	68db      	ldr	r3, [r3, #12]
 80021f6:	2b01      	cmp	r3, #1
 80021f8:	d001      	beq.n	80021fe <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80021fa:	2301      	movs	r3, #1
 80021fc:	e1bb      	b.n	8002576 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80021fe:	4b56      	ldr	r3, [pc, #344]	; (8002358 <HAL_RCC_OscConfig+0x2ac>)
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	691b      	ldr	r3, [r3, #16]
 800220a:	00db      	lsls	r3, r3, #3
 800220c:	4952      	ldr	r1, [pc, #328]	; (8002358 <HAL_RCC_OscConfig+0x2ac>)
 800220e:	4313      	orrs	r3, r2
 8002210:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002212:	e03a      	b.n	800228a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	68db      	ldr	r3, [r3, #12]
 8002218:	2b00      	cmp	r3, #0
 800221a:	d020      	beq.n	800225e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800221c:	4b4f      	ldr	r3, [pc, #316]	; (800235c <HAL_RCC_OscConfig+0x2b0>)
 800221e:	2201      	movs	r2, #1
 8002220:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002222:	f7fe fd0b 	bl	8000c3c <HAL_GetTick>
 8002226:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002228:	e008      	b.n	800223c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800222a:	f7fe fd07 	bl	8000c3c <HAL_GetTick>
 800222e:	4602      	mov	r2, r0
 8002230:	693b      	ldr	r3, [r7, #16]
 8002232:	1ad3      	subs	r3, r2, r3
 8002234:	2b02      	cmp	r3, #2
 8002236:	d901      	bls.n	800223c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002238:	2303      	movs	r3, #3
 800223a:	e19c      	b.n	8002576 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800223c:	4b46      	ldr	r3, [pc, #280]	; (8002358 <HAL_RCC_OscConfig+0x2ac>)
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	f003 0302 	and.w	r3, r3, #2
 8002244:	2b00      	cmp	r3, #0
 8002246:	d0f0      	beq.n	800222a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002248:	4b43      	ldr	r3, [pc, #268]	; (8002358 <HAL_RCC_OscConfig+0x2ac>)
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	691b      	ldr	r3, [r3, #16]
 8002254:	00db      	lsls	r3, r3, #3
 8002256:	4940      	ldr	r1, [pc, #256]	; (8002358 <HAL_RCC_OscConfig+0x2ac>)
 8002258:	4313      	orrs	r3, r2
 800225a:	600b      	str	r3, [r1, #0]
 800225c:	e015      	b.n	800228a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800225e:	4b3f      	ldr	r3, [pc, #252]	; (800235c <HAL_RCC_OscConfig+0x2b0>)
 8002260:	2200      	movs	r2, #0
 8002262:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002264:	f7fe fcea 	bl	8000c3c <HAL_GetTick>
 8002268:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800226a:	e008      	b.n	800227e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800226c:	f7fe fce6 	bl	8000c3c <HAL_GetTick>
 8002270:	4602      	mov	r2, r0
 8002272:	693b      	ldr	r3, [r7, #16]
 8002274:	1ad3      	subs	r3, r2, r3
 8002276:	2b02      	cmp	r3, #2
 8002278:	d901      	bls.n	800227e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800227a:	2303      	movs	r3, #3
 800227c:	e17b      	b.n	8002576 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800227e:	4b36      	ldr	r3, [pc, #216]	; (8002358 <HAL_RCC_OscConfig+0x2ac>)
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	f003 0302 	and.w	r3, r3, #2
 8002286:	2b00      	cmp	r3, #0
 8002288:	d1f0      	bne.n	800226c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	f003 0308 	and.w	r3, r3, #8
 8002292:	2b00      	cmp	r3, #0
 8002294:	d030      	beq.n	80022f8 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	695b      	ldr	r3, [r3, #20]
 800229a:	2b00      	cmp	r3, #0
 800229c:	d016      	beq.n	80022cc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800229e:	4b30      	ldr	r3, [pc, #192]	; (8002360 <HAL_RCC_OscConfig+0x2b4>)
 80022a0:	2201      	movs	r2, #1
 80022a2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80022a4:	f7fe fcca 	bl	8000c3c <HAL_GetTick>
 80022a8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80022aa:	e008      	b.n	80022be <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80022ac:	f7fe fcc6 	bl	8000c3c <HAL_GetTick>
 80022b0:	4602      	mov	r2, r0
 80022b2:	693b      	ldr	r3, [r7, #16]
 80022b4:	1ad3      	subs	r3, r2, r3
 80022b6:	2b02      	cmp	r3, #2
 80022b8:	d901      	bls.n	80022be <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80022ba:	2303      	movs	r3, #3
 80022bc:	e15b      	b.n	8002576 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80022be:	4b26      	ldr	r3, [pc, #152]	; (8002358 <HAL_RCC_OscConfig+0x2ac>)
 80022c0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80022c2:	f003 0302 	and.w	r3, r3, #2
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d0f0      	beq.n	80022ac <HAL_RCC_OscConfig+0x200>
 80022ca:	e015      	b.n	80022f8 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80022cc:	4b24      	ldr	r3, [pc, #144]	; (8002360 <HAL_RCC_OscConfig+0x2b4>)
 80022ce:	2200      	movs	r2, #0
 80022d0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80022d2:	f7fe fcb3 	bl	8000c3c <HAL_GetTick>
 80022d6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80022d8:	e008      	b.n	80022ec <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80022da:	f7fe fcaf 	bl	8000c3c <HAL_GetTick>
 80022de:	4602      	mov	r2, r0
 80022e0:	693b      	ldr	r3, [r7, #16]
 80022e2:	1ad3      	subs	r3, r2, r3
 80022e4:	2b02      	cmp	r3, #2
 80022e6:	d901      	bls.n	80022ec <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80022e8:	2303      	movs	r3, #3
 80022ea:	e144      	b.n	8002576 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80022ec:	4b1a      	ldr	r3, [pc, #104]	; (8002358 <HAL_RCC_OscConfig+0x2ac>)
 80022ee:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80022f0:	f003 0302 	and.w	r3, r3, #2
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d1f0      	bne.n	80022da <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	f003 0304 	and.w	r3, r3, #4
 8002300:	2b00      	cmp	r3, #0
 8002302:	f000 80a0 	beq.w	8002446 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002306:	2300      	movs	r3, #0
 8002308:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800230a:	4b13      	ldr	r3, [pc, #76]	; (8002358 <HAL_RCC_OscConfig+0x2ac>)
 800230c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800230e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002312:	2b00      	cmp	r3, #0
 8002314:	d10f      	bne.n	8002336 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002316:	2300      	movs	r3, #0
 8002318:	60bb      	str	r3, [r7, #8]
 800231a:	4b0f      	ldr	r3, [pc, #60]	; (8002358 <HAL_RCC_OscConfig+0x2ac>)
 800231c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800231e:	4a0e      	ldr	r2, [pc, #56]	; (8002358 <HAL_RCC_OscConfig+0x2ac>)
 8002320:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002324:	6413      	str	r3, [r2, #64]	; 0x40
 8002326:	4b0c      	ldr	r3, [pc, #48]	; (8002358 <HAL_RCC_OscConfig+0x2ac>)
 8002328:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800232a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800232e:	60bb      	str	r3, [r7, #8]
 8002330:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002332:	2301      	movs	r3, #1
 8002334:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002336:	4b0b      	ldr	r3, [pc, #44]	; (8002364 <HAL_RCC_OscConfig+0x2b8>)
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800233e:	2b00      	cmp	r3, #0
 8002340:	d121      	bne.n	8002386 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002342:	4b08      	ldr	r3, [pc, #32]	; (8002364 <HAL_RCC_OscConfig+0x2b8>)
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	4a07      	ldr	r2, [pc, #28]	; (8002364 <HAL_RCC_OscConfig+0x2b8>)
 8002348:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800234c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800234e:	f7fe fc75 	bl	8000c3c <HAL_GetTick>
 8002352:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002354:	e011      	b.n	800237a <HAL_RCC_OscConfig+0x2ce>
 8002356:	bf00      	nop
 8002358:	40023800 	.word	0x40023800
 800235c:	42470000 	.word	0x42470000
 8002360:	42470e80 	.word	0x42470e80
 8002364:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002368:	f7fe fc68 	bl	8000c3c <HAL_GetTick>
 800236c:	4602      	mov	r2, r0
 800236e:	693b      	ldr	r3, [r7, #16]
 8002370:	1ad3      	subs	r3, r2, r3
 8002372:	2b02      	cmp	r3, #2
 8002374:	d901      	bls.n	800237a <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8002376:	2303      	movs	r3, #3
 8002378:	e0fd      	b.n	8002576 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800237a:	4b81      	ldr	r3, [pc, #516]	; (8002580 <HAL_RCC_OscConfig+0x4d4>)
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002382:	2b00      	cmp	r3, #0
 8002384:	d0f0      	beq.n	8002368 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	689b      	ldr	r3, [r3, #8]
 800238a:	2b01      	cmp	r3, #1
 800238c:	d106      	bne.n	800239c <HAL_RCC_OscConfig+0x2f0>
 800238e:	4b7d      	ldr	r3, [pc, #500]	; (8002584 <HAL_RCC_OscConfig+0x4d8>)
 8002390:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002392:	4a7c      	ldr	r2, [pc, #496]	; (8002584 <HAL_RCC_OscConfig+0x4d8>)
 8002394:	f043 0301 	orr.w	r3, r3, #1
 8002398:	6713      	str	r3, [r2, #112]	; 0x70
 800239a:	e01c      	b.n	80023d6 <HAL_RCC_OscConfig+0x32a>
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	689b      	ldr	r3, [r3, #8]
 80023a0:	2b05      	cmp	r3, #5
 80023a2:	d10c      	bne.n	80023be <HAL_RCC_OscConfig+0x312>
 80023a4:	4b77      	ldr	r3, [pc, #476]	; (8002584 <HAL_RCC_OscConfig+0x4d8>)
 80023a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80023a8:	4a76      	ldr	r2, [pc, #472]	; (8002584 <HAL_RCC_OscConfig+0x4d8>)
 80023aa:	f043 0304 	orr.w	r3, r3, #4
 80023ae:	6713      	str	r3, [r2, #112]	; 0x70
 80023b0:	4b74      	ldr	r3, [pc, #464]	; (8002584 <HAL_RCC_OscConfig+0x4d8>)
 80023b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80023b4:	4a73      	ldr	r2, [pc, #460]	; (8002584 <HAL_RCC_OscConfig+0x4d8>)
 80023b6:	f043 0301 	orr.w	r3, r3, #1
 80023ba:	6713      	str	r3, [r2, #112]	; 0x70
 80023bc:	e00b      	b.n	80023d6 <HAL_RCC_OscConfig+0x32a>
 80023be:	4b71      	ldr	r3, [pc, #452]	; (8002584 <HAL_RCC_OscConfig+0x4d8>)
 80023c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80023c2:	4a70      	ldr	r2, [pc, #448]	; (8002584 <HAL_RCC_OscConfig+0x4d8>)
 80023c4:	f023 0301 	bic.w	r3, r3, #1
 80023c8:	6713      	str	r3, [r2, #112]	; 0x70
 80023ca:	4b6e      	ldr	r3, [pc, #440]	; (8002584 <HAL_RCC_OscConfig+0x4d8>)
 80023cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80023ce:	4a6d      	ldr	r2, [pc, #436]	; (8002584 <HAL_RCC_OscConfig+0x4d8>)
 80023d0:	f023 0304 	bic.w	r3, r3, #4
 80023d4:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	689b      	ldr	r3, [r3, #8]
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d015      	beq.n	800240a <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80023de:	f7fe fc2d 	bl	8000c3c <HAL_GetTick>
 80023e2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80023e4:	e00a      	b.n	80023fc <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80023e6:	f7fe fc29 	bl	8000c3c <HAL_GetTick>
 80023ea:	4602      	mov	r2, r0
 80023ec:	693b      	ldr	r3, [r7, #16]
 80023ee:	1ad3      	subs	r3, r2, r3
 80023f0:	f241 3288 	movw	r2, #5000	; 0x1388
 80023f4:	4293      	cmp	r3, r2
 80023f6:	d901      	bls.n	80023fc <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80023f8:	2303      	movs	r3, #3
 80023fa:	e0bc      	b.n	8002576 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80023fc:	4b61      	ldr	r3, [pc, #388]	; (8002584 <HAL_RCC_OscConfig+0x4d8>)
 80023fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002400:	f003 0302 	and.w	r3, r3, #2
 8002404:	2b00      	cmp	r3, #0
 8002406:	d0ee      	beq.n	80023e6 <HAL_RCC_OscConfig+0x33a>
 8002408:	e014      	b.n	8002434 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800240a:	f7fe fc17 	bl	8000c3c <HAL_GetTick>
 800240e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002410:	e00a      	b.n	8002428 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002412:	f7fe fc13 	bl	8000c3c <HAL_GetTick>
 8002416:	4602      	mov	r2, r0
 8002418:	693b      	ldr	r3, [r7, #16]
 800241a:	1ad3      	subs	r3, r2, r3
 800241c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002420:	4293      	cmp	r3, r2
 8002422:	d901      	bls.n	8002428 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8002424:	2303      	movs	r3, #3
 8002426:	e0a6      	b.n	8002576 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002428:	4b56      	ldr	r3, [pc, #344]	; (8002584 <HAL_RCC_OscConfig+0x4d8>)
 800242a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800242c:	f003 0302 	and.w	r3, r3, #2
 8002430:	2b00      	cmp	r3, #0
 8002432:	d1ee      	bne.n	8002412 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002434:	7dfb      	ldrb	r3, [r7, #23]
 8002436:	2b01      	cmp	r3, #1
 8002438:	d105      	bne.n	8002446 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800243a:	4b52      	ldr	r3, [pc, #328]	; (8002584 <HAL_RCC_OscConfig+0x4d8>)
 800243c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800243e:	4a51      	ldr	r2, [pc, #324]	; (8002584 <HAL_RCC_OscConfig+0x4d8>)
 8002440:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002444:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	699b      	ldr	r3, [r3, #24]
 800244a:	2b00      	cmp	r3, #0
 800244c:	f000 8092 	beq.w	8002574 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002450:	4b4c      	ldr	r3, [pc, #304]	; (8002584 <HAL_RCC_OscConfig+0x4d8>)
 8002452:	689b      	ldr	r3, [r3, #8]
 8002454:	f003 030c 	and.w	r3, r3, #12
 8002458:	2b08      	cmp	r3, #8
 800245a:	d05c      	beq.n	8002516 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	699b      	ldr	r3, [r3, #24]
 8002460:	2b02      	cmp	r3, #2
 8002462:	d141      	bne.n	80024e8 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002464:	4b48      	ldr	r3, [pc, #288]	; (8002588 <HAL_RCC_OscConfig+0x4dc>)
 8002466:	2200      	movs	r2, #0
 8002468:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800246a:	f7fe fbe7 	bl	8000c3c <HAL_GetTick>
 800246e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002470:	e008      	b.n	8002484 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002472:	f7fe fbe3 	bl	8000c3c <HAL_GetTick>
 8002476:	4602      	mov	r2, r0
 8002478:	693b      	ldr	r3, [r7, #16]
 800247a:	1ad3      	subs	r3, r2, r3
 800247c:	2b02      	cmp	r3, #2
 800247e:	d901      	bls.n	8002484 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8002480:	2303      	movs	r3, #3
 8002482:	e078      	b.n	8002576 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002484:	4b3f      	ldr	r3, [pc, #252]	; (8002584 <HAL_RCC_OscConfig+0x4d8>)
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800248c:	2b00      	cmp	r3, #0
 800248e:	d1f0      	bne.n	8002472 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	69da      	ldr	r2, [r3, #28]
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	6a1b      	ldr	r3, [r3, #32]
 8002498:	431a      	orrs	r2, r3
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800249e:	019b      	lsls	r3, r3, #6
 80024a0:	431a      	orrs	r2, r3
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024a6:	085b      	lsrs	r3, r3, #1
 80024a8:	3b01      	subs	r3, #1
 80024aa:	041b      	lsls	r3, r3, #16
 80024ac:	431a      	orrs	r2, r3
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024b2:	061b      	lsls	r3, r3, #24
 80024b4:	4933      	ldr	r1, [pc, #204]	; (8002584 <HAL_RCC_OscConfig+0x4d8>)
 80024b6:	4313      	orrs	r3, r2
 80024b8:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80024ba:	4b33      	ldr	r3, [pc, #204]	; (8002588 <HAL_RCC_OscConfig+0x4dc>)
 80024bc:	2201      	movs	r2, #1
 80024be:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024c0:	f7fe fbbc 	bl	8000c3c <HAL_GetTick>
 80024c4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80024c6:	e008      	b.n	80024da <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80024c8:	f7fe fbb8 	bl	8000c3c <HAL_GetTick>
 80024cc:	4602      	mov	r2, r0
 80024ce:	693b      	ldr	r3, [r7, #16]
 80024d0:	1ad3      	subs	r3, r2, r3
 80024d2:	2b02      	cmp	r3, #2
 80024d4:	d901      	bls.n	80024da <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80024d6:	2303      	movs	r3, #3
 80024d8:	e04d      	b.n	8002576 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80024da:	4b2a      	ldr	r3, [pc, #168]	; (8002584 <HAL_RCC_OscConfig+0x4d8>)
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d0f0      	beq.n	80024c8 <HAL_RCC_OscConfig+0x41c>
 80024e6:	e045      	b.n	8002574 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80024e8:	4b27      	ldr	r3, [pc, #156]	; (8002588 <HAL_RCC_OscConfig+0x4dc>)
 80024ea:	2200      	movs	r2, #0
 80024ec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024ee:	f7fe fba5 	bl	8000c3c <HAL_GetTick>
 80024f2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80024f4:	e008      	b.n	8002508 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80024f6:	f7fe fba1 	bl	8000c3c <HAL_GetTick>
 80024fa:	4602      	mov	r2, r0
 80024fc:	693b      	ldr	r3, [r7, #16]
 80024fe:	1ad3      	subs	r3, r2, r3
 8002500:	2b02      	cmp	r3, #2
 8002502:	d901      	bls.n	8002508 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8002504:	2303      	movs	r3, #3
 8002506:	e036      	b.n	8002576 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002508:	4b1e      	ldr	r3, [pc, #120]	; (8002584 <HAL_RCC_OscConfig+0x4d8>)
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002510:	2b00      	cmp	r3, #0
 8002512:	d1f0      	bne.n	80024f6 <HAL_RCC_OscConfig+0x44a>
 8002514:	e02e      	b.n	8002574 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	699b      	ldr	r3, [r3, #24]
 800251a:	2b01      	cmp	r3, #1
 800251c:	d101      	bne.n	8002522 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800251e:	2301      	movs	r3, #1
 8002520:	e029      	b.n	8002576 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002522:	4b18      	ldr	r3, [pc, #96]	; (8002584 <HAL_RCC_OscConfig+0x4d8>)
 8002524:	689b      	ldr	r3, [r3, #8]
 8002526:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	69db      	ldr	r3, [r3, #28]
 8002532:	429a      	cmp	r2, r3
 8002534:	d11c      	bne.n	8002570 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002540:	429a      	cmp	r2, r3
 8002542:	d115      	bne.n	8002570 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8002544:	68fa      	ldr	r2, [r7, #12]
 8002546:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800254a:	4013      	ands	r3, r2
 800254c:	687a      	ldr	r2, [r7, #4]
 800254e:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002550:	4293      	cmp	r3, r2
 8002552:	d10d      	bne.n	8002570 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 800255e:	429a      	cmp	r2, r3
 8002560:	d106      	bne.n	8002570 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800256c:	429a      	cmp	r2, r3
 800256e:	d001      	beq.n	8002574 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8002570:	2301      	movs	r3, #1
 8002572:	e000      	b.n	8002576 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8002574:	2300      	movs	r3, #0
}
 8002576:	4618      	mov	r0, r3
 8002578:	3718      	adds	r7, #24
 800257a:	46bd      	mov	sp, r7
 800257c:	bd80      	pop	{r7, pc}
 800257e:	bf00      	nop
 8002580:	40007000 	.word	0x40007000
 8002584:	40023800 	.word	0x40023800
 8002588:	42470060 	.word	0x42470060

0800258c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800258c:	b580      	push	{r7, lr}
 800258e:	b084      	sub	sp, #16
 8002590:	af00      	add	r7, sp, #0
 8002592:	6078      	str	r0, [r7, #4]
 8002594:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	2b00      	cmp	r3, #0
 800259a:	d101      	bne.n	80025a0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800259c:	2301      	movs	r3, #1
 800259e:	e0cc      	b.n	800273a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80025a0:	4b68      	ldr	r3, [pc, #416]	; (8002744 <HAL_RCC_ClockConfig+0x1b8>)
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	f003 030f 	and.w	r3, r3, #15
 80025a8:	683a      	ldr	r2, [r7, #0]
 80025aa:	429a      	cmp	r2, r3
 80025ac:	d90c      	bls.n	80025c8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80025ae:	4b65      	ldr	r3, [pc, #404]	; (8002744 <HAL_RCC_ClockConfig+0x1b8>)
 80025b0:	683a      	ldr	r2, [r7, #0]
 80025b2:	b2d2      	uxtb	r2, r2
 80025b4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80025b6:	4b63      	ldr	r3, [pc, #396]	; (8002744 <HAL_RCC_ClockConfig+0x1b8>)
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	f003 030f 	and.w	r3, r3, #15
 80025be:	683a      	ldr	r2, [r7, #0]
 80025c0:	429a      	cmp	r2, r3
 80025c2:	d001      	beq.n	80025c8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80025c4:	2301      	movs	r3, #1
 80025c6:	e0b8      	b.n	800273a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	f003 0302 	and.w	r3, r3, #2
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d020      	beq.n	8002616 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	f003 0304 	and.w	r3, r3, #4
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d005      	beq.n	80025ec <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80025e0:	4b59      	ldr	r3, [pc, #356]	; (8002748 <HAL_RCC_ClockConfig+0x1bc>)
 80025e2:	689b      	ldr	r3, [r3, #8]
 80025e4:	4a58      	ldr	r2, [pc, #352]	; (8002748 <HAL_RCC_ClockConfig+0x1bc>)
 80025e6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80025ea:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	f003 0308 	and.w	r3, r3, #8
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d005      	beq.n	8002604 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80025f8:	4b53      	ldr	r3, [pc, #332]	; (8002748 <HAL_RCC_ClockConfig+0x1bc>)
 80025fa:	689b      	ldr	r3, [r3, #8]
 80025fc:	4a52      	ldr	r2, [pc, #328]	; (8002748 <HAL_RCC_ClockConfig+0x1bc>)
 80025fe:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002602:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002604:	4b50      	ldr	r3, [pc, #320]	; (8002748 <HAL_RCC_ClockConfig+0x1bc>)
 8002606:	689b      	ldr	r3, [r3, #8]
 8002608:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	689b      	ldr	r3, [r3, #8]
 8002610:	494d      	ldr	r1, [pc, #308]	; (8002748 <HAL_RCC_ClockConfig+0x1bc>)
 8002612:	4313      	orrs	r3, r2
 8002614:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	f003 0301 	and.w	r3, r3, #1
 800261e:	2b00      	cmp	r3, #0
 8002620:	d044      	beq.n	80026ac <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	685b      	ldr	r3, [r3, #4]
 8002626:	2b01      	cmp	r3, #1
 8002628:	d107      	bne.n	800263a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800262a:	4b47      	ldr	r3, [pc, #284]	; (8002748 <HAL_RCC_ClockConfig+0x1bc>)
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002632:	2b00      	cmp	r3, #0
 8002634:	d119      	bne.n	800266a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002636:	2301      	movs	r3, #1
 8002638:	e07f      	b.n	800273a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	685b      	ldr	r3, [r3, #4]
 800263e:	2b02      	cmp	r3, #2
 8002640:	d003      	beq.n	800264a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002646:	2b03      	cmp	r3, #3
 8002648:	d107      	bne.n	800265a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800264a:	4b3f      	ldr	r3, [pc, #252]	; (8002748 <HAL_RCC_ClockConfig+0x1bc>)
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002652:	2b00      	cmp	r3, #0
 8002654:	d109      	bne.n	800266a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002656:	2301      	movs	r3, #1
 8002658:	e06f      	b.n	800273a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800265a:	4b3b      	ldr	r3, [pc, #236]	; (8002748 <HAL_RCC_ClockConfig+0x1bc>)
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	f003 0302 	and.w	r3, r3, #2
 8002662:	2b00      	cmp	r3, #0
 8002664:	d101      	bne.n	800266a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002666:	2301      	movs	r3, #1
 8002668:	e067      	b.n	800273a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800266a:	4b37      	ldr	r3, [pc, #220]	; (8002748 <HAL_RCC_ClockConfig+0x1bc>)
 800266c:	689b      	ldr	r3, [r3, #8]
 800266e:	f023 0203 	bic.w	r2, r3, #3
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	685b      	ldr	r3, [r3, #4]
 8002676:	4934      	ldr	r1, [pc, #208]	; (8002748 <HAL_RCC_ClockConfig+0x1bc>)
 8002678:	4313      	orrs	r3, r2
 800267a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800267c:	f7fe fade 	bl	8000c3c <HAL_GetTick>
 8002680:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002682:	e00a      	b.n	800269a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002684:	f7fe fada 	bl	8000c3c <HAL_GetTick>
 8002688:	4602      	mov	r2, r0
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	1ad3      	subs	r3, r2, r3
 800268e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002692:	4293      	cmp	r3, r2
 8002694:	d901      	bls.n	800269a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002696:	2303      	movs	r3, #3
 8002698:	e04f      	b.n	800273a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800269a:	4b2b      	ldr	r3, [pc, #172]	; (8002748 <HAL_RCC_ClockConfig+0x1bc>)
 800269c:	689b      	ldr	r3, [r3, #8]
 800269e:	f003 020c 	and.w	r2, r3, #12
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	685b      	ldr	r3, [r3, #4]
 80026a6:	009b      	lsls	r3, r3, #2
 80026a8:	429a      	cmp	r2, r3
 80026aa:	d1eb      	bne.n	8002684 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80026ac:	4b25      	ldr	r3, [pc, #148]	; (8002744 <HAL_RCC_ClockConfig+0x1b8>)
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	f003 030f 	and.w	r3, r3, #15
 80026b4:	683a      	ldr	r2, [r7, #0]
 80026b6:	429a      	cmp	r2, r3
 80026b8:	d20c      	bcs.n	80026d4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80026ba:	4b22      	ldr	r3, [pc, #136]	; (8002744 <HAL_RCC_ClockConfig+0x1b8>)
 80026bc:	683a      	ldr	r2, [r7, #0]
 80026be:	b2d2      	uxtb	r2, r2
 80026c0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80026c2:	4b20      	ldr	r3, [pc, #128]	; (8002744 <HAL_RCC_ClockConfig+0x1b8>)
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	f003 030f 	and.w	r3, r3, #15
 80026ca:	683a      	ldr	r2, [r7, #0]
 80026cc:	429a      	cmp	r2, r3
 80026ce:	d001      	beq.n	80026d4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80026d0:	2301      	movs	r3, #1
 80026d2:	e032      	b.n	800273a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	f003 0304 	and.w	r3, r3, #4
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d008      	beq.n	80026f2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80026e0:	4b19      	ldr	r3, [pc, #100]	; (8002748 <HAL_RCC_ClockConfig+0x1bc>)
 80026e2:	689b      	ldr	r3, [r3, #8]
 80026e4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	68db      	ldr	r3, [r3, #12]
 80026ec:	4916      	ldr	r1, [pc, #88]	; (8002748 <HAL_RCC_ClockConfig+0x1bc>)
 80026ee:	4313      	orrs	r3, r2
 80026f0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	f003 0308 	and.w	r3, r3, #8
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d009      	beq.n	8002712 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80026fe:	4b12      	ldr	r3, [pc, #72]	; (8002748 <HAL_RCC_ClockConfig+0x1bc>)
 8002700:	689b      	ldr	r3, [r3, #8]
 8002702:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	691b      	ldr	r3, [r3, #16]
 800270a:	00db      	lsls	r3, r3, #3
 800270c:	490e      	ldr	r1, [pc, #56]	; (8002748 <HAL_RCC_ClockConfig+0x1bc>)
 800270e:	4313      	orrs	r3, r2
 8002710:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002712:	f000 f821 	bl	8002758 <HAL_RCC_GetSysClockFreq>
 8002716:	4601      	mov	r1, r0
 8002718:	4b0b      	ldr	r3, [pc, #44]	; (8002748 <HAL_RCC_ClockConfig+0x1bc>)
 800271a:	689b      	ldr	r3, [r3, #8]
 800271c:	091b      	lsrs	r3, r3, #4
 800271e:	f003 030f 	and.w	r3, r3, #15
 8002722:	4a0a      	ldr	r2, [pc, #40]	; (800274c <HAL_RCC_ClockConfig+0x1c0>)
 8002724:	5cd3      	ldrb	r3, [r2, r3]
 8002726:	fa21 f303 	lsr.w	r3, r1, r3
 800272a:	4a09      	ldr	r2, [pc, #36]	; (8002750 <HAL_RCC_ClockConfig+0x1c4>)
 800272c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800272e:	4b09      	ldr	r3, [pc, #36]	; (8002754 <HAL_RCC_ClockConfig+0x1c8>)
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	4618      	mov	r0, r3
 8002734:	f7fe fa3e 	bl	8000bb4 <HAL_InitTick>

  return HAL_OK;
 8002738:	2300      	movs	r3, #0
}
 800273a:	4618      	mov	r0, r3
 800273c:	3710      	adds	r7, #16
 800273e:	46bd      	mov	sp, r7
 8002740:	bd80      	pop	{r7, pc}
 8002742:	bf00      	nop
 8002744:	40023c00 	.word	0x40023c00
 8002748:	40023800 	.word	0x40023800
 800274c:	08003b70 	.word	0x08003b70
 8002750:	20000000 	.word	0x20000000
 8002754:	20000004 	.word	0x20000004

08002758 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002758:	b5f0      	push	{r4, r5, r6, r7, lr}
 800275a:	b085      	sub	sp, #20
 800275c:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800275e:	2300      	movs	r3, #0
 8002760:	607b      	str	r3, [r7, #4]
 8002762:	2300      	movs	r3, #0
 8002764:	60fb      	str	r3, [r7, #12]
 8002766:	2300      	movs	r3, #0
 8002768:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800276a:	2300      	movs	r3, #0
 800276c:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800276e:	4b63      	ldr	r3, [pc, #396]	; (80028fc <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002770:	689b      	ldr	r3, [r3, #8]
 8002772:	f003 030c 	and.w	r3, r3, #12
 8002776:	2b04      	cmp	r3, #4
 8002778:	d007      	beq.n	800278a <HAL_RCC_GetSysClockFreq+0x32>
 800277a:	2b08      	cmp	r3, #8
 800277c:	d008      	beq.n	8002790 <HAL_RCC_GetSysClockFreq+0x38>
 800277e:	2b00      	cmp	r3, #0
 8002780:	f040 80b4 	bne.w	80028ec <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002784:	4b5e      	ldr	r3, [pc, #376]	; (8002900 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8002786:	60bb      	str	r3, [r7, #8]
       break;
 8002788:	e0b3      	b.n	80028f2 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800278a:	4b5e      	ldr	r3, [pc, #376]	; (8002904 <HAL_RCC_GetSysClockFreq+0x1ac>)
 800278c:	60bb      	str	r3, [r7, #8]
      break;
 800278e:	e0b0      	b.n	80028f2 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002790:	4b5a      	ldr	r3, [pc, #360]	; (80028fc <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002792:	685b      	ldr	r3, [r3, #4]
 8002794:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002798:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800279a:	4b58      	ldr	r3, [pc, #352]	; (80028fc <HAL_RCC_GetSysClockFreq+0x1a4>)
 800279c:	685b      	ldr	r3, [r3, #4]
 800279e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d04a      	beq.n	800283c <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80027a6:	4b55      	ldr	r3, [pc, #340]	; (80028fc <HAL_RCC_GetSysClockFreq+0x1a4>)
 80027a8:	685b      	ldr	r3, [r3, #4]
 80027aa:	099b      	lsrs	r3, r3, #6
 80027ac:	f04f 0400 	mov.w	r4, #0
 80027b0:	f240 11ff 	movw	r1, #511	; 0x1ff
 80027b4:	f04f 0200 	mov.w	r2, #0
 80027b8:	ea03 0501 	and.w	r5, r3, r1
 80027bc:	ea04 0602 	and.w	r6, r4, r2
 80027c0:	4629      	mov	r1, r5
 80027c2:	4632      	mov	r2, r6
 80027c4:	f04f 0300 	mov.w	r3, #0
 80027c8:	f04f 0400 	mov.w	r4, #0
 80027cc:	0154      	lsls	r4, r2, #5
 80027ce:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80027d2:	014b      	lsls	r3, r1, #5
 80027d4:	4619      	mov	r1, r3
 80027d6:	4622      	mov	r2, r4
 80027d8:	1b49      	subs	r1, r1, r5
 80027da:	eb62 0206 	sbc.w	r2, r2, r6
 80027de:	f04f 0300 	mov.w	r3, #0
 80027e2:	f04f 0400 	mov.w	r4, #0
 80027e6:	0194      	lsls	r4, r2, #6
 80027e8:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80027ec:	018b      	lsls	r3, r1, #6
 80027ee:	1a5b      	subs	r3, r3, r1
 80027f0:	eb64 0402 	sbc.w	r4, r4, r2
 80027f4:	f04f 0100 	mov.w	r1, #0
 80027f8:	f04f 0200 	mov.w	r2, #0
 80027fc:	00e2      	lsls	r2, r4, #3
 80027fe:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8002802:	00d9      	lsls	r1, r3, #3
 8002804:	460b      	mov	r3, r1
 8002806:	4614      	mov	r4, r2
 8002808:	195b      	adds	r3, r3, r5
 800280a:	eb44 0406 	adc.w	r4, r4, r6
 800280e:	f04f 0100 	mov.w	r1, #0
 8002812:	f04f 0200 	mov.w	r2, #0
 8002816:	0262      	lsls	r2, r4, #9
 8002818:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 800281c:	0259      	lsls	r1, r3, #9
 800281e:	460b      	mov	r3, r1
 8002820:	4614      	mov	r4, r2
 8002822:	4618      	mov	r0, r3
 8002824:	4621      	mov	r1, r4
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	f04f 0400 	mov.w	r4, #0
 800282c:	461a      	mov	r2, r3
 800282e:	4623      	mov	r3, r4
 8002830:	f7fd fd2e 	bl	8000290 <__aeabi_uldivmod>
 8002834:	4603      	mov	r3, r0
 8002836:	460c      	mov	r4, r1
 8002838:	60fb      	str	r3, [r7, #12]
 800283a:	e049      	b.n	80028d0 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800283c:	4b2f      	ldr	r3, [pc, #188]	; (80028fc <HAL_RCC_GetSysClockFreq+0x1a4>)
 800283e:	685b      	ldr	r3, [r3, #4]
 8002840:	099b      	lsrs	r3, r3, #6
 8002842:	f04f 0400 	mov.w	r4, #0
 8002846:	f240 11ff 	movw	r1, #511	; 0x1ff
 800284a:	f04f 0200 	mov.w	r2, #0
 800284e:	ea03 0501 	and.w	r5, r3, r1
 8002852:	ea04 0602 	and.w	r6, r4, r2
 8002856:	4629      	mov	r1, r5
 8002858:	4632      	mov	r2, r6
 800285a:	f04f 0300 	mov.w	r3, #0
 800285e:	f04f 0400 	mov.w	r4, #0
 8002862:	0154      	lsls	r4, r2, #5
 8002864:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002868:	014b      	lsls	r3, r1, #5
 800286a:	4619      	mov	r1, r3
 800286c:	4622      	mov	r2, r4
 800286e:	1b49      	subs	r1, r1, r5
 8002870:	eb62 0206 	sbc.w	r2, r2, r6
 8002874:	f04f 0300 	mov.w	r3, #0
 8002878:	f04f 0400 	mov.w	r4, #0
 800287c:	0194      	lsls	r4, r2, #6
 800287e:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8002882:	018b      	lsls	r3, r1, #6
 8002884:	1a5b      	subs	r3, r3, r1
 8002886:	eb64 0402 	sbc.w	r4, r4, r2
 800288a:	f04f 0100 	mov.w	r1, #0
 800288e:	f04f 0200 	mov.w	r2, #0
 8002892:	00e2      	lsls	r2, r4, #3
 8002894:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8002898:	00d9      	lsls	r1, r3, #3
 800289a:	460b      	mov	r3, r1
 800289c:	4614      	mov	r4, r2
 800289e:	195b      	adds	r3, r3, r5
 80028a0:	eb44 0406 	adc.w	r4, r4, r6
 80028a4:	f04f 0100 	mov.w	r1, #0
 80028a8:	f04f 0200 	mov.w	r2, #0
 80028ac:	02a2      	lsls	r2, r4, #10
 80028ae:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 80028b2:	0299      	lsls	r1, r3, #10
 80028b4:	460b      	mov	r3, r1
 80028b6:	4614      	mov	r4, r2
 80028b8:	4618      	mov	r0, r3
 80028ba:	4621      	mov	r1, r4
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	f04f 0400 	mov.w	r4, #0
 80028c2:	461a      	mov	r2, r3
 80028c4:	4623      	mov	r3, r4
 80028c6:	f7fd fce3 	bl	8000290 <__aeabi_uldivmod>
 80028ca:	4603      	mov	r3, r0
 80028cc:	460c      	mov	r4, r1
 80028ce:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80028d0:	4b0a      	ldr	r3, [pc, #40]	; (80028fc <HAL_RCC_GetSysClockFreq+0x1a4>)
 80028d2:	685b      	ldr	r3, [r3, #4]
 80028d4:	0c1b      	lsrs	r3, r3, #16
 80028d6:	f003 0303 	and.w	r3, r3, #3
 80028da:	3301      	adds	r3, #1
 80028dc:	005b      	lsls	r3, r3, #1
 80028de:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80028e0:	68fa      	ldr	r2, [r7, #12]
 80028e2:	683b      	ldr	r3, [r7, #0]
 80028e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80028e8:	60bb      	str	r3, [r7, #8]
      break;
 80028ea:	e002      	b.n	80028f2 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80028ec:	4b04      	ldr	r3, [pc, #16]	; (8002900 <HAL_RCC_GetSysClockFreq+0x1a8>)
 80028ee:	60bb      	str	r3, [r7, #8]
      break;
 80028f0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80028f2:	68bb      	ldr	r3, [r7, #8]
}
 80028f4:	4618      	mov	r0, r3
 80028f6:	3714      	adds	r7, #20
 80028f8:	46bd      	mov	sp, r7
 80028fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80028fc:	40023800 	.word	0x40023800
 8002900:	00f42400 	.word	0x00f42400
 8002904:	007a1200 	.word	0x007a1200

08002908 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002908:	b480      	push	{r7}
 800290a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800290c:	4b03      	ldr	r3, [pc, #12]	; (800291c <HAL_RCC_GetHCLKFreq+0x14>)
 800290e:	681b      	ldr	r3, [r3, #0]
}
 8002910:	4618      	mov	r0, r3
 8002912:	46bd      	mov	sp, r7
 8002914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002918:	4770      	bx	lr
 800291a:	bf00      	nop
 800291c:	20000000 	.word	0x20000000

08002920 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002920:	b580      	push	{r7, lr}
 8002922:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002924:	f7ff fff0 	bl	8002908 <HAL_RCC_GetHCLKFreq>
 8002928:	4601      	mov	r1, r0
 800292a:	4b05      	ldr	r3, [pc, #20]	; (8002940 <HAL_RCC_GetPCLK1Freq+0x20>)
 800292c:	689b      	ldr	r3, [r3, #8]
 800292e:	0a9b      	lsrs	r3, r3, #10
 8002930:	f003 0307 	and.w	r3, r3, #7
 8002934:	4a03      	ldr	r2, [pc, #12]	; (8002944 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002936:	5cd3      	ldrb	r3, [r2, r3]
 8002938:	fa21 f303 	lsr.w	r3, r1, r3
}
 800293c:	4618      	mov	r0, r3
 800293e:	bd80      	pop	{r7, pc}
 8002940:	40023800 	.word	0x40023800
 8002944:	08003b80 	.word	0x08003b80

08002948 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002948:	b580      	push	{r7, lr}
 800294a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800294c:	f7ff ffdc 	bl	8002908 <HAL_RCC_GetHCLKFreq>
 8002950:	4601      	mov	r1, r0
 8002952:	4b05      	ldr	r3, [pc, #20]	; (8002968 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002954:	689b      	ldr	r3, [r3, #8]
 8002956:	0b5b      	lsrs	r3, r3, #13
 8002958:	f003 0307 	and.w	r3, r3, #7
 800295c:	4a03      	ldr	r2, [pc, #12]	; (800296c <HAL_RCC_GetPCLK2Freq+0x24>)
 800295e:	5cd3      	ldrb	r3, [r2, r3]
 8002960:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002964:	4618      	mov	r0, r3
 8002966:	bd80      	pop	{r7, pc}
 8002968:	40023800 	.word	0x40023800
 800296c:	08003b80 	.word	0x08003b80

08002970 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002970:	b580      	push	{r7, lr}
 8002972:	b082      	sub	sp, #8
 8002974:	af00      	add	r7, sp, #0
 8002976:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	2b00      	cmp	r3, #0
 800297c:	d101      	bne.n	8002982 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800297e:	2301      	movs	r3, #1
 8002980:	e03f      	b.n	8002a02 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002988:	b2db      	uxtb	r3, r3
 800298a:	2b00      	cmp	r3, #0
 800298c:	d106      	bne.n	800299c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	2200      	movs	r2, #0
 8002992:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002996:	6878      	ldr	r0, [r7, #4]
 8002998:	f7fe f808 	bl	80009ac <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	2224      	movs	r2, #36	; 0x24
 80029a0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	68da      	ldr	r2, [r3, #12]
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80029b2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80029b4:	6878      	ldr	r0, [r7, #4]
 80029b6:	f000 f90b 	bl	8002bd0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	691a      	ldr	r2, [r3, #16]
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80029c8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	695a      	ldr	r2, [r3, #20]
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80029d8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	68da      	ldr	r2, [r3, #12]
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80029e8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	2200      	movs	r2, #0
 80029ee:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	2220      	movs	r2, #32
 80029f4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	2220      	movs	r2, #32
 80029fc:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8002a00:	2300      	movs	r3, #0
}
 8002a02:	4618      	mov	r0, r3
 8002a04:	3708      	adds	r7, #8
 8002a06:	46bd      	mov	sp, r7
 8002a08:	bd80      	pop	{r7, pc}

08002a0a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002a0a:	b580      	push	{r7, lr}
 8002a0c:	b088      	sub	sp, #32
 8002a0e:	af02      	add	r7, sp, #8
 8002a10:	60f8      	str	r0, [r7, #12]
 8002a12:	60b9      	str	r1, [r7, #8]
 8002a14:	603b      	str	r3, [r7, #0]
 8002a16:	4613      	mov	r3, r2
 8002a18:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8002a1a:	2300      	movs	r3, #0
 8002a1c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002a24:	b2db      	uxtb	r3, r3
 8002a26:	2b20      	cmp	r3, #32
 8002a28:	f040 8083 	bne.w	8002b32 <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8002a2c:	68bb      	ldr	r3, [r7, #8]
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d002      	beq.n	8002a38 <HAL_UART_Transmit+0x2e>
 8002a32:	88fb      	ldrh	r3, [r7, #6]
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d101      	bne.n	8002a3c <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8002a38:	2301      	movs	r3, #1
 8002a3a:	e07b      	b.n	8002b34 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002a42:	2b01      	cmp	r3, #1
 8002a44:	d101      	bne.n	8002a4a <HAL_UART_Transmit+0x40>
 8002a46:	2302      	movs	r3, #2
 8002a48:	e074      	b.n	8002b34 <HAL_UART_Transmit+0x12a>
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	2201      	movs	r2, #1
 8002a4e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	2200      	movs	r2, #0
 8002a56:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	2221      	movs	r2, #33	; 0x21
 8002a5c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8002a60:	f7fe f8ec 	bl	8000c3c <HAL_GetTick>
 8002a64:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	88fa      	ldrh	r2, [r7, #6]
 8002a6a:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	88fa      	ldrh	r2, [r7, #6]
 8002a70:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	2200      	movs	r2, #0
 8002a76:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 8002a7a:	e042      	b.n	8002b02 <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002a80:	b29b      	uxth	r3, r3
 8002a82:	3b01      	subs	r3, #1
 8002a84:	b29a      	uxth	r2, r3
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	689b      	ldr	r3, [r3, #8]
 8002a8e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002a92:	d122      	bne.n	8002ada <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002a94:	683b      	ldr	r3, [r7, #0]
 8002a96:	9300      	str	r3, [sp, #0]
 8002a98:	697b      	ldr	r3, [r7, #20]
 8002a9a:	2200      	movs	r2, #0
 8002a9c:	2180      	movs	r1, #128	; 0x80
 8002a9e:	68f8      	ldr	r0, [r7, #12]
 8002aa0:	f000 f84c 	bl	8002b3c <UART_WaitOnFlagUntilTimeout>
 8002aa4:	4603      	mov	r3, r0
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d001      	beq.n	8002aae <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 8002aaa:	2303      	movs	r3, #3
 8002aac:	e042      	b.n	8002b34 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 8002aae:	68bb      	ldr	r3, [r7, #8]
 8002ab0:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8002ab2:	693b      	ldr	r3, [r7, #16]
 8002ab4:	881b      	ldrh	r3, [r3, #0]
 8002ab6:	461a      	mov	r2, r3
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002ac0:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	691b      	ldr	r3, [r3, #16]
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d103      	bne.n	8002ad2 <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 8002aca:	68bb      	ldr	r3, [r7, #8]
 8002acc:	3302      	adds	r3, #2
 8002ace:	60bb      	str	r3, [r7, #8]
 8002ad0:	e017      	b.n	8002b02 <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 8002ad2:	68bb      	ldr	r3, [r7, #8]
 8002ad4:	3301      	adds	r3, #1
 8002ad6:	60bb      	str	r3, [r7, #8]
 8002ad8:	e013      	b.n	8002b02 <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002ada:	683b      	ldr	r3, [r7, #0]
 8002adc:	9300      	str	r3, [sp, #0]
 8002ade:	697b      	ldr	r3, [r7, #20]
 8002ae0:	2200      	movs	r2, #0
 8002ae2:	2180      	movs	r1, #128	; 0x80
 8002ae4:	68f8      	ldr	r0, [r7, #12]
 8002ae6:	f000 f829 	bl	8002b3c <UART_WaitOnFlagUntilTimeout>
 8002aea:	4603      	mov	r3, r0
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d001      	beq.n	8002af4 <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 8002af0:	2303      	movs	r3, #3
 8002af2:	e01f      	b.n	8002b34 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8002af4:	68bb      	ldr	r3, [r7, #8]
 8002af6:	1c5a      	adds	r2, r3, #1
 8002af8:	60ba      	str	r2, [r7, #8]
 8002afa:	781a      	ldrb	r2, [r3, #0]
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002b06:	b29b      	uxth	r3, r3
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d1b7      	bne.n	8002a7c <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002b0c:	683b      	ldr	r3, [r7, #0]
 8002b0e:	9300      	str	r3, [sp, #0]
 8002b10:	697b      	ldr	r3, [r7, #20]
 8002b12:	2200      	movs	r2, #0
 8002b14:	2140      	movs	r1, #64	; 0x40
 8002b16:	68f8      	ldr	r0, [r7, #12]
 8002b18:	f000 f810 	bl	8002b3c <UART_WaitOnFlagUntilTimeout>
 8002b1c:	4603      	mov	r3, r0
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d001      	beq.n	8002b26 <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 8002b22:	2303      	movs	r3, #3
 8002b24:	e006      	b.n	8002b34 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	2220      	movs	r2, #32
 8002b2a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 8002b2e:	2300      	movs	r3, #0
 8002b30:	e000      	b.n	8002b34 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 8002b32:	2302      	movs	r3, #2
  }
}
 8002b34:	4618      	mov	r0, r3
 8002b36:	3718      	adds	r7, #24
 8002b38:	46bd      	mov	sp, r7
 8002b3a:	bd80      	pop	{r7, pc}

08002b3c <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8002b3c:	b580      	push	{r7, lr}
 8002b3e:	b084      	sub	sp, #16
 8002b40:	af00      	add	r7, sp, #0
 8002b42:	60f8      	str	r0, [r7, #12]
 8002b44:	60b9      	str	r1, [r7, #8]
 8002b46:	603b      	str	r3, [r7, #0]
 8002b48:	4613      	mov	r3, r2
 8002b4a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002b4c:	e02c      	b.n	8002ba8 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002b4e:	69bb      	ldr	r3, [r7, #24]
 8002b50:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002b54:	d028      	beq.n	8002ba8 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002b56:	69bb      	ldr	r3, [r7, #24]
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d007      	beq.n	8002b6c <UART_WaitOnFlagUntilTimeout+0x30>
 8002b5c:	f7fe f86e 	bl	8000c3c <HAL_GetTick>
 8002b60:	4602      	mov	r2, r0
 8002b62:	683b      	ldr	r3, [r7, #0]
 8002b64:	1ad3      	subs	r3, r2, r3
 8002b66:	69ba      	ldr	r2, [r7, #24]
 8002b68:	429a      	cmp	r2, r3
 8002b6a:	d21d      	bcs.n	8002ba8 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	68da      	ldr	r2, [r3, #12]
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8002b7a:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	695a      	ldr	r2, [r3, #20]
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	f022 0201 	bic.w	r2, r2, #1
 8002b8a:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	2220      	movs	r2, #32
 8002b90:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	2220      	movs	r2, #32
 8002b98:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	2200      	movs	r2, #0
 8002ba0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8002ba4:	2303      	movs	r3, #3
 8002ba6:	e00f      	b.n	8002bc8 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	681a      	ldr	r2, [r3, #0]
 8002bae:	68bb      	ldr	r3, [r7, #8]
 8002bb0:	4013      	ands	r3, r2
 8002bb2:	68ba      	ldr	r2, [r7, #8]
 8002bb4:	429a      	cmp	r2, r3
 8002bb6:	bf0c      	ite	eq
 8002bb8:	2301      	moveq	r3, #1
 8002bba:	2300      	movne	r3, #0
 8002bbc:	b2db      	uxtb	r3, r3
 8002bbe:	461a      	mov	r2, r3
 8002bc0:	79fb      	ldrb	r3, [r7, #7]
 8002bc2:	429a      	cmp	r2, r3
 8002bc4:	d0c3      	beq.n	8002b4e <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002bc6:	2300      	movs	r3, #0
}
 8002bc8:	4618      	mov	r0, r3
 8002bca:	3710      	adds	r7, #16
 8002bcc:	46bd      	mov	sp, r7
 8002bce:	bd80      	pop	{r7, pc}

08002bd0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002bd0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002bd4:	b085      	sub	sp, #20
 8002bd6:	af00      	add	r7, sp, #0
 8002bd8:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	691b      	ldr	r3, [r3, #16]
 8002be0:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	68da      	ldr	r2, [r3, #12]
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	430a      	orrs	r2, r1
 8002bee:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	689a      	ldr	r2, [r3, #8]
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	691b      	ldr	r3, [r3, #16]
 8002bf8:	431a      	orrs	r2, r3
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	695b      	ldr	r3, [r3, #20]
 8002bfe:	431a      	orrs	r2, r3
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	69db      	ldr	r3, [r3, #28]
 8002c04:	4313      	orrs	r3, r2
 8002c06:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	68db      	ldr	r3, [r3, #12]
 8002c0e:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8002c12:	f023 030c 	bic.w	r3, r3, #12
 8002c16:	687a      	ldr	r2, [r7, #4]
 8002c18:	6812      	ldr	r2, [r2, #0]
 8002c1a:	68f9      	ldr	r1, [r7, #12]
 8002c1c:	430b      	orrs	r3, r1
 8002c1e:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	695b      	ldr	r3, [r3, #20]
 8002c26:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	699a      	ldr	r2, [r3, #24]
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	430a      	orrs	r2, r1
 8002c34:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	69db      	ldr	r3, [r3, #28]
 8002c3a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002c3e:	f040 818b 	bne.w	8002f58 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	4ac1      	ldr	r2, [pc, #772]	; (8002f4c <UART_SetConfig+0x37c>)
 8002c48:	4293      	cmp	r3, r2
 8002c4a:	d005      	beq.n	8002c58 <UART_SetConfig+0x88>
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	4abf      	ldr	r2, [pc, #764]	; (8002f50 <UART_SetConfig+0x380>)
 8002c52:	4293      	cmp	r3, r2
 8002c54:	f040 80bd 	bne.w	8002dd2 <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002c58:	f7ff fe76 	bl	8002948 <HAL_RCC_GetPCLK2Freq>
 8002c5c:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002c5e:	68bb      	ldr	r3, [r7, #8]
 8002c60:	461d      	mov	r5, r3
 8002c62:	f04f 0600 	mov.w	r6, #0
 8002c66:	46a8      	mov	r8, r5
 8002c68:	46b1      	mov	r9, r6
 8002c6a:	eb18 0308 	adds.w	r3, r8, r8
 8002c6e:	eb49 0409 	adc.w	r4, r9, r9
 8002c72:	4698      	mov	r8, r3
 8002c74:	46a1      	mov	r9, r4
 8002c76:	eb18 0805 	adds.w	r8, r8, r5
 8002c7a:	eb49 0906 	adc.w	r9, r9, r6
 8002c7e:	f04f 0100 	mov.w	r1, #0
 8002c82:	f04f 0200 	mov.w	r2, #0
 8002c86:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8002c8a:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8002c8e:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8002c92:	4688      	mov	r8, r1
 8002c94:	4691      	mov	r9, r2
 8002c96:	eb18 0005 	adds.w	r0, r8, r5
 8002c9a:	eb49 0106 	adc.w	r1, r9, r6
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	685b      	ldr	r3, [r3, #4]
 8002ca2:	461d      	mov	r5, r3
 8002ca4:	f04f 0600 	mov.w	r6, #0
 8002ca8:	196b      	adds	r3, r5, r5
 8002caa:	eb46 0406 	adc.w	r4, r6, r6
 8002cae:	461a      	mov	r2, r3
 8002cb0:	4623      	mov	r3, r4
 8002cb2:	f7fd faed 	bl	8000290 <__aeabi_uldivmod>
 8002cb6:	4603      	mov	r3, r0
 8002cb8:	460c      	mov	r4, r1
 8002cba:	461a      	mov	r2, r3
 8002cbc:	4ba5      	ldr	r3, [pc, #660]	; (8002f54 <UART_SetConfig+0x384>)
 8002cbe:	fba3 2302 	umull	r2, r3, r3, r2
 8002cc2:	095b      	lsrs	r3, r3, #5
 8002cc4:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8002cc8:	68bb      	ldr	r3, [r7, #8]
 8002cca:	461d      	mov	r5, r3
 8002ccc:	f04f 0600 	mov.w	r6, #0
 8002cd0:	46a9      	mov	r9, r5
 8002cd2:	46b2      	mov	sl, r6
 8002cd4:	eb19 0309 	adds.w	r3, r9, r9
 8002cd8:	eb4a 040a 	adc.w	r4, sl, sl
 8002cdc:	4699      	mov	r9, r3
 8002cde:	46a2      	mov	sl, r4
 8002ce0:	eb19 0905 	adds.w	r9, r9, r5
 8002ce4:	eb4a 0a06 	adc.w	sl, sl, r6
 8002ce8:	f04f 0100 	mov.w	r1, #0
 8002cec:	f04f 0200 	mov.w	r2, #0
 8002cf0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002cf4:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002cf8:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002cfc:	4689      	mov	r9, r1
 8002cfe:	4692      	mov	sl, r2
 8002d00:	eb19 0005 	adds.w	r0, r9, r5
 8002d04:	eb4a 0106 	adc.w	r1, sl, r6
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	685b      	ldr	r3, [r3, #4]
 8002d0c:	461d      	mov	r5, r3
 8002d0e:	f04f 0600 	mov.w	r6, #0
 8002d12:	196b      	adds	r3, r5, r5
 8002d14:	eb46 0406 	adc.w	r4, r6, r6
 8002d18:	461a      	mov	r2, r3
 8002d1a:	4623      	mov	r3, r4
 8002d1c:	f7fd fab8 	bl	8000290 <__aeabi_uldivmod>
 8002d20:	4603      	mov	r3, r0
 8002d22:	460c      	mov	r4, r1
 8002d24:	461a      	mov	r2, r3
 8002d26:	4b8b      	ldr	r3, [pc, #556]	; (8002f54 <UART_SetConfig+0x384>)
 8002d28:	fba3 1302 	umull	r1, r3, r3, r2
 8002d2c:	095b      	lsrs	r3, r3, #5
 8002d2e:	2164      	movs	r1, #100	; 0x64
 8002d30:	fb01 f303 	mul.w	r3, r1, r3
 8002d34:	1ad3      	subs	r3, r2, r3
 8002d36:	00db      	lsls	r3, r3, #3
 8002d38:	3332      	adds	r3, #50	; 0x32
 8002d3a:	4a86      	ldr	r2, [pc, #536]	; (8002f54 <UART_SetConfig+0x384>)
 8002d3c:	fba2 2303 	umull	r2, r3, r2, r3
 8002d40:	095b      	lsrs	r3, r3, #5
 8002d42:	005b      	lsls	r3, r3, #1
 8002d44:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002d48:	4498      	add	r8, r3
 8002d4a:	68bb      	ldr	r3, [r7, #8]
 8002d4c:	461d      	mov	r5, r3
 8002d4e:	f04f 0600 	mov.w	r6, #0
 8002d52:	46a9      	mov	r9, r5
 8002d54:	46b2      	mov	sl, r6
 8002d56:	eb19 0309 	adds.w	r3, r9, r9
 8002d5a:	eb4a 040a 	adc.w	r4, sl, sl
 8002d5e:	4699      	mov	r9, r3
 8002d60:	46a2      	mov	sl, r4
 8002d62:	eb19 0905 	adds.w	r9, r9, r5
 8002d66:	eb4a 0a06 	adc.w	sl, sl, r6
 8002d6a:	f04f 0100 	mov.w	r1, #0
 8002d6e:	f04f 0200 	mov.w	r2, #0
 8002d72:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002d76:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002d7a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002d7e:	4689      	mov	r9, r1
 8002d80:	4692      	mov	sl, r2
 8002d82:	eb19 0005 	adds.w	r0, r9, r5
 8002d86:	eb4a 0106 	adc.w	r1, sl, r6
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	685b      	ldr	r3, [r3, #4]
 8002d8e:	461d      	mov	r5, r3
 8002d90:	f04f 0600 	mov.w	r6, #0
 8002d94:	196b      	adds	r3, r5, r5
 8002d96:	eb46 0406 	adc.w	r4, r6, r6
 8002d9a:	461a      	mov	r2, r3
 8002d9c:	4623      	mov	r3, r4
 8002d9e:	f7fd fa77 	bl	8000290 <__aeabi_uldivmod>
 8002da2:	4603      	mov	r3, r0
 8002da4:	460c      	mov	r4, r1
 8002da6:	461a      	mov	r2, r3
 8002da8:	4b6a      	ldr	r3, [pc, #424]	; (8002f54 <UART_SetConfig+0x384>)
 8002daa:	fba3 1302 	umull	r1, r3, r3, r2
 8002dae:	095b      	lsrs	r3, r3, #5
 8002db0:	2164      	movs	r1, #100	; 0x64
 8002db2:	fb01 f303 	mul.w	r3, r1, r3
 8002db6:	1ad3      	subs	r3, r2, r3
 8002db8:	00db      	lsls	r3, r3, #3
 8002dba:	3332      	adds	r3, #50	; 0x32
 8002dbc:	4a65      	ldr	r2, [pc, #404]	; (8002f54 <UART_SetConfig+0x384>)
 8002dbe:	fba2 2303 	umull	r2, r3, r2, r3
 8002dc2:	095b      	lsrs	r3, r3, #5
 8002dc4:	f003 0207 	and.w	r2, r3, #7
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	4442      	add	r2, r8
 8002dce:	609a      	str	r2, [r3, #8]
 8002dd0:	e26f      	b.n	80032b2 <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002dd2:	f7ff fda5 	bl	8002920 <HAL_RCC_GetPCLK1Freq>
 8002dd6:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002dd8:	68bb      	ldr	r3, [r7, #8]
 8002dda:	461d      	mov	r5, r3
 8002ddc:	f04f 0600 	mov.w	r6, #0
 8002de0:	46a8      	mov	r8, r5
 8002de2:	46b1      	mov	r9, r6
 8002de4:	eb18 0308 	adds.w	r3, r8, r8
 8002de8:	eb49 0409 	adc.w	r4, r9, r9
 8002dec:	4698      	mov	r8, r3
 8002dee:	46a1      	mov	r9, r4
 8002df0:	eb18 0805 	adds.w	r8, r8, r5
 8002df4:	eb49 0906 	adc.w	r9, r9, r6
 8002df8:	f04f 0100 	mov.w	r1, #0
 8002dfc:	f04f 0200 	mov.w	r2, #0
 8002e00:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8002e04:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8002e08:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8002e0c:	4688      	mov	r8, r1
 8002e0e:	4691      	mov	r9, r2
 8002e10:	eb18 0005 	adds.w	r0, r8, r5
 8002e14:	eb49 0106 	adc.w	r1, r9, r6
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	685b      	ldr	r3, [r3, #4]
 8002e1c:	461d      	mov	r5, r3
 8002e1e:	f04f 0600 	mov.w	r6, #0
 8002e22:	196b      	adds	r3, r5, r5
 8002e24:	eb46 0406 	adc.w	r4, r6, r6
 8002e28:	461a      	mov	r2, r3
 8002e2a:	4623      	mov	r3, r4
 8002e2c:	f7fd fa30 	bl	8000290 <__aeabi_uldivmod>
 8002e30:	4603      	mov	r3, r0
 8002e32:	460c      	mov	r4, r1
 8002e34:	461a      	mov	r2, r3
 8002e36:	4b47      	ldr	r3, [pc, #284]	; (8002f54 <UART_SetConfig+0x384>)
 8002e38:	fba3 2302 	umull	r2, r3, r3, r2
 8002e3c:	095b      	lsrs	r3, r3, #5
 8002e3e:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8002e42:	68bb      	ldr	r3, [r7, #8]
 8002e44:	461d      	mov	r5, r3
 8002e46:	f04f 0600 	mov.w	r6, #0
 8002e4a:	46a9      	mov	r9, r5
 8002e4c:	46b2      	mov	sl, r6
 8002e4e:	eb19 0309 	adds.w	r3, r9, r9
 8002e52:	eb4a 040a 	adc.w	r4, sl, sl
 8002e56:	4699      	mov	r9, r3
 8002e58:	46a2      	mov	sl, r4
 8002e5a:	eb19 0905 	adds.w	r9, r9, r5
 8002e5e:	eb4a 0a06 	adc.w	sl, sl, r6
 8002e62:	f04f 0100 	mov.w	r1, #0
 8002e66:	f04f 0200 	mov.w	r2, #0
 8002e6a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002e6e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002e72:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002e76:	4689      	mov	r9, r1
 8002e78:	4692      	mov	sl, r2
 8002e7a:	eb19 0005 	adds.w	r0, r9, r5
 8002e7e:	eb4a 0106 	adc.w	r1, sl, r6
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	685b      	ldr	r3, [r3, #4]
 8002e86:	461d      	mov	r5, r3
 8002e88:	f04f 0600 	mov.w	r6, #0
 8002e8c:	196b      	adds	r3, r5, r5
 8002e8e:	eb46 0406 	adc.w	r4, r6, r6
 8002e92:	461a      	mov	r2, r3
 8002e94:	4623      	mov	r3, r4
 8002e96:	f7fd f9fb 	bl	8000290 <__aeabi_uldivmod>
 8002e9a:	4603      	mov	r3, r0
 8002e9c:	460c      	mov	r4, r1
 8002e9e:	461a      	mov	r2, r3
 8002ea0:	4b2c      	ldr	r3, [pc, #176]	; (8002f54 <UART_SetConfig+0x384>)
 8002ea2:	fba3 1302 	umull	r1, r3, r3, r2
 8002ea6:	095b      	lsrs	r3, r3, #5
 8002ea8:	2164      	movs	r1, #100	; 0x64
 8002eaa:	fb01 f303 	mul.w	r3, r1, r3
 8002eae:	1ad3      	subs	r3, r2, r3
 8002eb0:	00db      	lsls	r3, r3, #3
 8002eb2:	3332      	adds	r3, #50	; 0x32
 8002eb4:	4a27      	ldr	r2, [pc, #156]	; (8002f54 <UART_SetConfig+0x384>)
 8002eb6:	fba2 2303 	umull	r2, r3, r2, r3
 8002eba:	095b      	lsrs	r3, r3, #5
 8002ebc:	005b      	lsls	r3, r3, #1
 8002ebe:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002ec2:	4498      	add	r8, r3
 8002ec4:	68bb      	ldr	r3, [r7, #8]
 8002ec6:	461d      	mov	r5, r3
 8002ec8:	f04f 0600 	mov.w	r6, #0
 8002ecc:	46a9      	mov	r9, r5
 8002ece:	46b2      	mov	sl, r6
 8002ed0:	eb19 0309 	adds.w	r3, r9, r9
 8002ed4:	eb4a 040a 	adc.w	r4, sl, sl
 8002ed8:	4699      	mov	r9, r3
 8002eda:	46a2      	mov	sl, r4
 8002edc:	eb19 0905 	adds.w	r9, r9, r5
 8002ee0:	eb4a 0a06 	adc.w	sl, sl, r6
 8002ee4:	f04f 0100 	mov.w	r1, #0
 8002ee8:	f04f 0200 	mov.w	r2, #0
 8002eec:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002ef0:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002ef4:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002ef8:	4689      	mov	r9, r1
 8002efa:	4692      	mov	sl, r2
 8002efc:	eb19 0005 	adds.w	r0, r9, r5
 8002f00:	eb4a 0106 	adc.w	r1, sl, r6
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	685b      	ldr	r3, [r3, #4]
 8002f08:	461d      	mov	r5, r3
 8002f0a:	f04f 0600 	mov.w	r6, #0
 8002f0e:	196b      	adds	r3, r5, r5
 8002f10:	eb46 0406 	adc.w	r4, r6, r6
 8002f14:	461a      	mov	r2, r3
 8002f16:	4623      	mov	r3, r4
 8002f18:	f7fd f9ba 	bl	8000290 <__aeabi_uldivmod>
 8002f1c:	4603      	mov	r3, r0
 8002f1e:	460c      	mov	r4, r1
 8002f20:	461a      	mov	r2, r3
 8002f22:	4b0c      	ldr	r3, [pc, #48]	; (8002f54 <UART_SetConfig+0x384>)
 8002f24:	fba3 1302 	umull	r1, r3, r3, r2
 8002f28:	095b      	lsrs	r3, r3, #5
 8002f2a:	2164      	movs	r1, #100	; 0x64
 8002f2c:	fb01 f303 	mul.w	r3, r1, r3
 8002f30:	1ad3      	subs	r3, r2, r3
 8002f32:	00db      	lsls	r3, r3, #3
 8002f34:	3332      	adds	r3, #50	; 0x32
 8002f36:	4a07      	ldr	r2, [pc, #28]	; (8002f54 <UART_SetConfig+0x384>)
 8002f38:	fba2 2303 	umull	r2, r3, r2, r3
 8002f3c:	095b      	lsrs	r3, r3, #5
 8002f3e:	f003 0207 	and.w	r2, r3, #7
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	4442      	add	r2, r8
 8002f48:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8002f4a:	e1b2      	b.n	80032b2 <UART_SetConfig+0x6e2>
 8002f4c:	40011000 	.word	0x40011000
 8002f50:	40011400 	.word	0x40011400
 8002f54:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	4ad7      	ldr	r2, [pc, #860]	; (80032bc <UART_SetConfig+0x6ec>)
 8002f5e:	4293      	cmp	r3, r2
 8002f60:	d005      	beq.n	8002f6e <UART_SetConfig+0x39e>
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	4ad6      	ldr	r2, [pc, #856]	; (80032c0 <UART_SetConfig+0x6f0>)
 8002f68:	4293      	cmp	r3, r2
 8002f6a:	f040 80d1 	bne.w	8003110 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 8002f6e:	f7ff fceb 	bl	8002948 <HAL_RCC_GetPCLK2Freq>
 8002f72:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002f74:	68bb      	ldr	r3, [r7, #8]
 8002f76:	469a      	mov	sl, r3
 8002f78:	f04f 0b00 	mov.w	fp, #0
 8002f7c:	46d0      	mov	r8, sl
 8002f7e:	46d9      	mov	r9, fp
 8002f80:	eb18 0308 	adds.w	r3, r8, r8
 8002f84:	eb49 0409 	adc.w	r4, r9, r9
 8002f88:	4698      	mov	r8, r3
 8002f8a:	46a1      	mov	r9, r4
 8002f8c:	eb18 080a 	adds.w	r8, r8, sl
 8002f90:	eb49 090b 	adc.w	r9, r9, fp
 8002f94:	f04f 0100 	mov.w	r1, #0
 8002f98:	f04f 0200 	mov.w	r2, #0
 8002f9c:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8002fa0:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8002fa4:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8002fa8:	4688      	mov	r8, r1
 8002faa:	4691      	mov	r9, r2
 8002fac:	eb1a 0508 	adds.w	r5, sl, r8
 8002fb0:	eb4b 0609 	adc.w	r6, fp, r9
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	685b      	ldr	r3, [r3, #4]
 8002fb8:	4619      	mov	r1, r3
 8002fba:	f04f 0200 	mov.w	r2, #0
 8002fbe:	f04f 0300 	mov.w	r3, #0
 8002fc2:	f04f 0400 	mov.w	r4, #0
 8002fc6:	0094      	lsls	r4, r2, #2
 8002fc8:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8002fcc:	008b      	lsls	r3, r1, #2
 8002fce:	461a      	mov	r2, r3
 8002fd0:	4623      	mov	r3, r4
 8002fd2:	4628      	mov	r0, r5
 8002fd4:	4631      	mov	r1, r6
 8002fd6:	f7fd f95b 	bl	8000290 <__aeabi_uldivmod>
 8002fda:	4603      	mov	r3, r0
 8002fdc:	460c      	mov	r4, r1
 8002fde:	461a      	mov	r2, r3
 8002fe0:	4bb8      	ldr	r3, [pc, #736]	; (80032c4 <UART_SetConfig+0x6f4>)
 8002fe2:	fba3 2302 	umull	r2, r3, r3, r2
 8002fe6:	095b      	lsrs	r3, r3, #5
 8002fe8:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8002fec:	68bb      	ldr	r3, [r7, #8]
 8002fee:	469b      	mov	fp, r3
 8002ff0:	f04f 0c00 	mov.w	ip, #0
 8002ff4:	46d9      	mov	r9, fp
 8002ff6:	46e2      	mov	sl, ip
 8002ff8:	eb19 0309 	adds.w	r3, r9, r9
 8002ffc:	eb4a 040a 	adc.w	r4, sl, sl
 8003000:	4699      	mov	r9, r3
 8003002:	46a2      	mov	sl, r4
 8003004:	eb19 090b 	adds.w	r9, r9, fp
 8003008:	eb4a 0a0c 	adc.w	sl, sl, ip
 800300c:	f04f 0100 	mov.w	r1, #0
 8003010:	f04f 0200 	mov.w	r2, #0
 8003014:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003018:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800301c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003020:	4689      	mov	r9, r1
 8003022:	4692      	mov	sl, r2
 8003024:	eb1b 0509 	adds.w	r5, fp, r9
 8003028:	eb4c 060a 	adc.w	r6, ip, sl
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	685b      	ldr	r3, [r3, #4]
 8003030:	4619      	mov	r1, r3
 8003032:	f04f 0200 	mov.w	r2, #0
 8003036:	f04f 0300 	mov.w	r3, #0
 800303a:	f04f 0400 	mov.w	r4, #0
 800303e:	0094      	lsls	r4, r2, #2
 8003040:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003044:	008b      	lsls	r3, r1, #2
 8003046:	461a      	mov	r2, r3
 8003048:	4623      	mov	r3, r4
 800304a:	4628      	mov	r0, r5
 800304c:	4631      	mov	r1, r6
 800304e:	f7fd f91f 	bl	8000290 <__aeabi_uldivmod>
 8003052:	4603      	mov	r3, r0
 8003054:	460c      	mov	r4, r1
 8003056:	461a      	mov	r2, r3
 8003058:	4b9a      	ldr	r3, [pc, #616]	; (80032c4 <UART_SetConfig+0x6f4>)
 800305a:	fba3 1302 	umull	r1, r3, r3, r2
 800305e:	095b      	lsrs	r3, r3, #5
 8003060:	2164      	movs	r1, #100	; 0x64
 8003062:	fb01 f303 	mul.w	r3, r1, r3
 8003066:	1ad3      	subs	r3, r2, r3
 8003068:	011b      	lsls	r3, r3, #4
 800306a:	3332      	adds	r3, #50	; 0x32
 800306c:	4a95      	ldr	r2, [pc, #596]	; (80032c4 <UART_SetConfig+0x6f4>)
 800306e:	fba2 2303 	umull	r2, r3, r2, r3
 8003072:	095b      	lsrs	r3, r3, #5
 8003074:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003078:	4498      	add	r8, r3
 800307a:	68bb      	ldr	r3, [r7, #8]
 800307c:	469b      	mov	fp, r3
 800307e:	f04f 0c00 	mov.w	ip, #0
 8003082:	46d9      	mov	r9, fp
 8003084:	46e2      	mov	sl, ip
 8003086:	eb19 0309 	adds.w	r3, r9, r9
 800308a:	eb4a 040a 	adc.w	r4, sl, sl
 800308e:	4699      	mov	r9, r3
 8003090:	46a2      	mov	sl, r4
 8003092:	eb19 090b 	adds.w	r9, r9, fp
 8003096:	eb4a 0a0c 	adc.w	sl, sl, ip
 800309a:	f04f 0100 	mov.w	r1, #0
 800309e:	f04f 0200 	mov.w	r2, #0
 80030a2:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80030a6:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80030aa:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80030ae:	4689      	mov	r9, r1
 80030b0:	4692      	mov	sl, r2
 80030b2:	eb1b 0509 	adds.w	r5, fp, r9
 80030b6:	eb4c 060a 	adc.w	r6, ip, sl
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	685b      	ldr	r3, [r3, #4]
 80030be:	4619      	mov	r1, r3
 80030c0:	f04f 0200 	mov.w	r2, #0
 80030c4:	f04f 0300 	mov.w	r3, #0
 80030c8:	f04f 0400 	mov.w	r4, #0
 80030cc:	0094      	lsls	r4, r2, #2
 80030ce:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80030d2:	008b      	lsls	r3, r1, #2
 80030d4:	461a      	mov	r2, r3
 80030d6:	4623      	mov	r3, r4
 80030d8:	4628      	mov	r0, r5
 80030da:	4631      	mov	r1, r6
 80030dc:	f7fd f8d8 	bl	8000290 <__aeabi_uldivmod>
 80030e0:	4603      	mov	r3, r0
 80030e2:	460c      	mov	r4, r1
 80030e4:	461a      	mov	r2, r3
 80030e6:	4b77      	ldr	r3, [pc, #476]	; (80032c4 <UART_SetConfig+0x6f4>)
 80030e8:	fba3 1302 	umull	r1, r3, r3, r2
 80030ec:	095b      	lsrs	r3, r3, #5
 80030ee:	2164      	movs	r1, #100	; 0x64
 80030f0:	fb01 f303 	mul.w	r3, r1, r3
 80030f4:	1ad3      	subs	r3, r2, r3
 80030f6:	011b      	lsls	r3, r3, #4
 80030f8:	3332      	adds	r3, #50	; 0x32
 80030fa:	4a72      	ldr	r2, [pc, #456]	; (80032c4 <UART_SetConfig+0x6f4>)
 80030fc:	fba2 2303 	umull	r2, r3, r2, r3
 8003100:	095b      	lsrs	r3, r3, #5
 8003102:	f003 020f 	and.w	r2, r3, #15
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	4442      	add	r2, r8
 800310c:	609a      	str	r2, [r3, #8]
 800310e:	e0d0      	b.n	80032b2 <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 8003110:	f7ff fc06 	bl	8002920 <HAL_RCC_GetPCLK1Freq>
 8003114:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003116:	68bb      	ldr	r3, [r7, #8]
 8003118:	469a      	mov	sl, r3
 800311a:	f04f 0b00 	mov.w	fp, #0
 800311e:	46d0      	mov	r8, sl
 8003120:	46d9      	mov	r9, fp
 8003122:	eb18 0308 	adds.w	r3, r8, r8
 8003126:	eb49 0409 	adc.w	r4, r9, r9
 800312a:	4698      	mov	r8, r3
 800312c:	46a1      	mov	r9, r4
 800312e:	eb18 080a 	adds.w	r8, r8, sl
 8003132:	eb49 090b 	adc.w	r9, r9, fp
 8003136:	f04f 0100 	mov.w	r1, #0
 800313a:	f04f 0200 	mov.w	r2, #0
 800313e:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8003142:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8003146:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800314a:	4688      	mov	r8, r1
 800314c:	4691      	mov	r9, r2
 800314e:	eb1a 0508 	adds.w	r5, sl, r8
 8003152:	eb4b 0609 	adc.w	r6, fp, r9
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	685b      	ldr	r3, [r3, #4]
 800315a:	4619      	mov	r1, r3
 800315c:	f04f 0200 	mov.w	r2, #0
 8003160:	f04f 0300 	mov.w	r3, #0
 8003164:	f04f 0400 	mov.w	r4, #0
 8003168:	0094      	lsls	r4, r2, #2
 800316a:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800316e:	008b      	lsls	r3, r1, #2
 8003170:	461a      	mov	r2, r3
 8003172:	4623      	mov	r3, r4
 8003174:	4628      	mov	r0, r5
 8003176:	4631      	mov	r1, r6
 8003178:	f7fd f88a 	bl	8000290 <__aeabi_uldivmod>
 800317c:	4603      	mov	r3, r0
 800317e:	460c      	mov	r4, r1
 8003180:	461a      	mov	r2, r3
 8003182:	4b50      	ldr	r3, [pc, #320]	; (80032c4 <UART_SetConfig+0x6f4>)
 8003184:	fba3 2302 	umull	r2, r3, r3, r2
 8003188:	095b      	lsrs	r3, r3, #5
 800318a:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800318e:	68bb      	ldr	r3, [r7, #8]
 8003190:	469b      	mov	fp, r3
 8003192:	f04f 0c00 	mov.w	ip, #0
 8003196:	46d9      	mov	r9, fp
 8003198:	46e2      	mov	sl, ip
 800319a:	eb19 0309 	adds.w	r3, r9, r9
 800319e:	eb4a 040a 	adc.w	r4, sl, sl
 80031a2:	4699      	mov	r9, r3
 80031a4:	46a2      	mov	sl, r4
 80031a6:	eb19 090b 	adds.w	r9, r9, fp
 80031aa:	eb4a 0a0c 	adc.w	sl, sl, ip
 80031ae:	f04f 0100 	mov.w	r1, #0
 80031b2:	f04f 0200 	mov.w	r2, #0
 80031b6:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80031ba:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80031be:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80031c2:	4689      	mov	r9, r1
 80031c4:	4692      	mov	sl, r2
 80031c6:	eb1b 0509 	adds.w	r5, fp, r9
 80031ca:	eb4c 060a 	adc.w	r6, ip, sl
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	685b      	ldr	r3, [r3, #4]
 80031d2:	4619      	mov	r1, r3
 80031d4:	f04f 0200 	mov.w	r2, #0
 80031d8:	f04f 0300 	mov.w	r3, #0
 80031dc:	f04f 0400 	mov.w	r4, #0
 80031e0:	0094      	lsls	r4, r2, #2
 80031e2:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80031e6:	008b      	lsls	r3, r1, #2
 80031e8:	461a      	mov	r2, r3
 80031ea:	4623      	mov	r3, r4
 80031ec:	4628      	mov	r0, r5
 80031ee:	4631      	mov	r1, r6
 80031f0:	f7fd f84e 	bl	8000290 <__aeabi_uldivmod>
 80031f4:	4603      	mov	r3, r0
 80031f6:	460c      	mov	r4, r1
 80031f8:	461a      	mov	r2, r3
 80031fa:	4b32      	ldr	r3, [pc, #200]	; (80032c4 <UART_SetConfig+0x6f4>)
 80031fc:	fba3 1302 	umull	r1, r3, r3, r2
 8003200:	095b      	lsrs	r3, r3, #5
 8003202:	2164      	movs	r1, #100	; 0x64
 8003204:	fb01 f303 	mul.w	r3, r1, r3
 8003208:	1ad3      	subs	r3, r2, r3
 800320a:	011b      	lsls	r3, r3, #4
 800320c:	3332      	adds	r3, #50	; 0x32
 800320e:	4a2d      	ldr	r2, [pc, #180]	; (80032c4 <UART_SetConfig+0x6f4>)
 8003210:	fba2 2303 	umull	r2, r3, r2, r3
 8003214:	095b      	lsrs	r3, r3, #5
 8003216:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800321a:	4498      	add	r8, r3
 800321c:	68bb      	ldr	r3, [r7, #8]
 800321e:	469b      	mov	fp, r3
 8003220:	f04f 0c00 	mov.w	ip, #0
 8003224:	46d9      	mov	r9, fp
 8003226:	46e2      	mov	sl, ip
 8003228:	eb19 0309 	adds.w	r3, r9, r9
 800322c:	eb4a 040a 	adc.w	r4, sl, sl
 8003230:	4699      	mov	r9, r3
 8003232:	46a2      	mov	sl, r4
 8003234:	eb19 090b 	adds.w	r9, r9, fp
 8003238:	eb4a 0a0c 	adc.w	sl, sl, ip
 800323c:	f04f 0100 	mov.w	r1, #0
 8003240:	f04f 0200 	mov.w	r2, #0
 8003244:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003248:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800324c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003250:	4689      	mov	r9, r1
 8003252:	4692      	mov	sl, r2
 8003254:	eb1b 0509 	adds.w	r5, fp, r9
 8003258:	eb4c 060a 	adc.w	r6, ip, sl
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	685b      	ldr	r3, [r3, #4]
 8003260:	4619      	mov	r1, r3
 8003262:	f04f 0200 	mov.w	r2, #0
 8003266:	f04f 0300 	mov.w	r3, #0
 800326a:	f04f 0400 	mov.w	r4, #0
 800326e:	0094      	lsls	r4, r2, #2
 8003270:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003274:	008b      	lsls	r3, r1, #2
 8003276:	461a      	mov	r2, r3
 8003278:	4623      	mov	r3, r4
 800327a:	4628      	mov	r0, r5
 800327c:	4631      	mov	r1, r6
 800327e:	f7fd f807 	bl	8000290 <__aeabi_uldivmod>
 8003282:	4603      	mov	r3, r0
 8003284:	460c      	mov	r4, r1
 8003286:	461a      	mov	r2, r3
 8003288:	4b0e      	ldr	r3, [pc, #56]	; (80032c4 <UART_SetConfig+0x6f4>)
 800328a:	fba3 1302 	umull	r1, r3, r3, r2
 800328e:	095b      	lsrs	r3, r3, #5
 8003290:	2164      	movs	r1, #100	; 0x64
 8003292:	fb01 f303 	mul.w	r3, r1, r3
 8003296:	1ad3      	subs	r3, r2, r3
 8003298:	011b      	lsls	r3, r3, #4
 800329a:	3332      	adds	r3, #50	; 0x32
 800329c:	4a09      	ldr	r2, [pc, #36]	; (80032c4 <UART_SetConfig+0x6f4>)
 800329e:	fba2 2303 	umull	r2, r3, r2, r3
 80032a2:	095b      	lsrs	r3, r3, #5
 80032a4:	f003 020f 	and.w	r2, r3, #15
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	4442      	add	r2, r8
 80032ae:	609a      	str	r2, [r3, #8]
}
 80032b0:	e7ff      	b.n	80032b2 <UART_SetConfig+0x6e2>
 80032b2:	bf00      	nop
 80032b4:	3714      	adds	r7, #20
 80032b6:	46bd      	mov	sp, r7
 80032b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80032bc:	40011000 	.word	0x40011000
 80032c0:	40011400 	.word	0x40011400
 80032c4:	51eb851f 	.word	0x51eb851f

080032c8 <__errno>:
 80032c8:	4b01      	ldr	r3, [pc, #4]	; (80032d0 <__errno+0x8>)
 80032ca:	6818      	ldr	r0, [r3, #0]
 80032cc:	4770      	bx	lr
 80032ce:	bf00      	nop
 80032d0:	2000000c 	.word	0x2000000c

080032d4 <__libc_init_array>:
 80032d4:	b570      	push	{r4, r5, r6, lr}
 80032d6:	4e0d      	ldr	r6, [pc, #52]	; (800330c <__libc_init_array+0x38>)
 80032d8:	4c0d      	ldr	r4, [pc, #52]	; (8003310 <__libc_init_array+0x3c>)
 80032da:	1ba4      	subs	r4, r4, r6
 80032dc:	10a4      	asrs	r4, r4, #2
 80032de:	2500      	movs	r5, #0
 80032e0:	42a5      	cmp	r5, r4
 80032e2:	d109      	bne.n	80032f8 <__libc_init_array+0x24>
 80032e4:	4e0b      	ldr	r6, [pc, #44]	; (8003314 <__libc_init_array+0x40>)
 80032e6:	4c0c      	ldr	r4, [pc, #48]	; (8003318 <__libc_init_array+0x44>)
 80032e8:	f000 fc26 	bl	8003b38 <_init>
 80032ec:	1ba4      	subs	r4, r4, r6
 80032ee:	10a4      	asrs	r4, r4, #2
 80032f0:	2500      	movs	r5, #0
 80032f2:	42a5      	cmp	r5, r4
 80032f4:	d105      	bne.n	8003302 <__libc_init_array+0x2e>
 80032f6:	bd70      	pop	{r4, r5, r6, pc}
 80032f8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80032fc:	4798      	blx	r3
 80032fe:	3501      	adds	r5, #1
 8003300:	e7ee      	b.n	80032e0 <__libc_init_array+0xc>
 8003302:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003306:	4798      	blx	r3
 8003308:	3501      	adds	r5, #1
 800330a:	e7f2      	b.n	80032f2 <__libc_init_array+0x1e>
 800330c:	08003bc4 	.word	0x08003bc4
 8003310:	08003bc4 	.word	0x08003bc4
 8003314:	08003bc4 	.word	0x08003bc4
 8003318:	08003bc8 	.word	0x08003bc8

0800331c <memset>:
 800331c:	4402      	add	r2, r0
 800331e:	4603      	mov	r3, r0
 8003320:	4293      	cmp	r3, r2
 8003322:	d100      	bne.n	8003326 <memset+0xa>
 8003324:	4770      	bx	lr
 8003326:	f803 1b01 	strb.w	r1, [r3], #1
 800332a:	e7f9      	b.n	8003320 <memset+0x4>

0800332c <siprintf>:
 800332c:	b40e      	push	{r1, r2, r3}
 800332e:	b500      	push	{lr}
 8003330:	b09c      	sub	sp, #112	; 0x70
 8003332:	ab1d      	add	r3, sp, #116	; 0x74
 8003334:	9002      	str	r0, [sp, #8]
 8003336:	9006      	str	r0, [sp, #24]
 8003338:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800333c:	4809      	ldr	r0, [pc, #36]	; (8003364 <siprintf+0x38>)
 800333e:	9107      	str	r1, [sp, #28]
 8003340:	9104      	str	r1, [sp, #16]
 8003342:	4909      	ldr	r1, [pc, #36]	; (8003368 <siprintf+0x3c>)
 8003344:	f853 2b04 	ldr.w	r2, [r3], #4
 8003348:	9105      	str	r1, [sp, #20]
 800334a:	6800      	ldr	r0, [r0, #0]
 800334c:	9301      	str	r3, [sp, #4]
 800334e:	a902      	add	r1, sp, #8
 8003350:	f000 f866 	bl	8003420 <_svfiprintf_r>
 8003354:	9b02      	ldr	r3, [sp, #8]
 8003356:	2200      	movs	r2, #0
 8003358:	701a      	strb	r2, [r3, #0]
 800335a:	b01c      	add	sp, #112	; 0x70
 800335c:	f85d eb04 	ldr.w	lr, [sp], #4
 8003360:	b003      	add	sp, #12
 8003362:	4770      	bx	lr
 8003364:	2000000c 	.word	0x2000000c
 8003368:	ffff0208 	.word	0xffff0208

0800336c <__ssputs_r>:
 800336c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003370:	688e      	ldr	r6, [r1, #8]
 8003372:	429e      	cmp	r6, r3
 8003374:	4682      	mov	sl, r0
 8003376:	460c      	mov	r4, r1
 8003378:	4690      	mov	r8, r2
 800337a:	4699      	mov	r9, r3
 800337c:	d837      	bhi.n	80033ee <__ssputs_r+0x82>
 800337e:	898a      	ldrh	r2, [r1, #12]
 8003380:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8003384:	d031      	beq.n	80033ea <__ssputs_r+0x7e>
 8003386:	6825      	ldr	r5, [r4, #0]
 8003388:	6909      	ldr	r1, [r1, #16]
 800338a:	1a6f      	subs	r7, r5, r1
 800338c:	6965      	ldr	r5, [r4, #20]
 800338e:	2302      	movs	r3, #2
 8003390:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003394:	fb95 f5f3 	sdiv	r5, r5, r3
 8003398:	f109 0301 	add.w	r3, r9, #1
 800339c:	443b      	add	r3, r7
 800339e:	429d      	cmp	r5, r3
 80033a0:	bf38      	it	cc
 80033a2:	461d      	movcc	r5, r3
 80033a4:	0553      	lsls	r3, r2, #21
 80033a6:	d530      	bpl.n	800340a <__ssputs_r+0x9e>
 80033a8:	4629      	mov	r1, r5
 80033aa:	f000 fb2b 	bl	8003a04 <_malloc_r>
 80033ae:	4606      	mov	r6, r0
 80033b0:	b950      	cbnz	r0, 80033c8 <__ssputs_r+0x5c>
 80033b2:	230c      	movs	r3, #12
 80033b4:	f8ca 3000 	str.w	r3, [sl]
 80033b8:	89a3      	ldrh	r3, [r4, #12]
 80033ba:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80033be:	81a3      	strh	r3, [r4, #12]
 80033c0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80033c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80033c8:	463a      	mov	r2, r7
 80033ca:	6921      	ldr	r1, [r4, #16]
 80033cc:	f000 faa8 	bl	8003920 <memcpy>
 80033d0:	89a3      	ldrh	r3, [r4, #12]
 80033d2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80033d6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80033da:	81a3      	strh	r3, [r4, #12]
 80033dc:	6126      	str	r6, [r4, #16]
 80033de:	6165      	str	r5, [r4, #20]
 80033e0:	443e      	add	r6, r7
 80033e2:	1bed      	subs	r5, r5, r7
 80033e4:	6026      	str	r6, [r4, #0]
 80033e6:	60a5      	str	r5, [r4, #8]
 80033e8:	464e      	mov	r6, r9
 80033ea:	454e      	cmp	r6, r9
 80033ec:	d900      	bls.n	80033f0 <__ssputs_r+0x84>
 80033ee:	464e      	mov	r6, r9
 80033f0:	4632      	mov	r2, r6
 80033f2:	4641      	mov	r1, r8
 80033f4:	6820      	ldr	r0, [r4, #0]
 80033f6:	f000 fa9e 	bl	8003936 <memmove>
 80033fa:	68a3      	ldr	r3, [r4, #8]
 80033fc:	1b9b      	subs	r3, r3, r6
 80033fe:	60a3      	str	r3, [r4, #8]
 8003400:	6823      	ldr	r3, [r4, #0]
 8003402:	441e      	add	r6, r3
 8003404:	6026      	str	r6, [r4, #0]
 8003406:	2000      	movs	r0, #0
 8003408:	e7dc      	b.n	80033c4 <__ssputs_r+0x58>
 800340a:	462a      	mov	r2, r5
 800340c:	f000 fb54 	bl	8003ab8 <_realloc_r>
 8003410:	4606      	mov	r6, r0
 8003412:	2800      	cmp	r0, #0
 8003414:	d1e2      	bne.n	80033dc <__ssputs_r+0x70>
 8003416:	6921      	ldr	r1, [r4, #16]
 8003418:	4650      	mov	r0, sl
 800341a:	f000 faa5 	bl	8003968 <_free_r>
 800341e:	e7c8      	b.n	80033b2 <__ssputs_r+0x46>

08003420 <_svfiprintf_r>:
 8003420:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003424:	461d      	mov	r5, r3
 8003426:	898b      	ldrh	r3, [r1, #12]
 8003428:	061f      	lsls	r7, r3, #24
 800342a:	b09d      	sub	sp, #116	; 0x74
 800342c:	4680      	mov	r8, r0
 800342e:	460c      	mov	r4, r1
 8003430:	4616      	mov	r6, r2
 8003432:	d50f      	bpl.n	8003454 <_svfiprintf_r+0x34>
 8003434:	690b      	ldr	r3, [r1, #16]
 8003436:	b96b      	cbnz	r3, 8003454 <_svfiprintf_r+0x34>
 8003438:	2140      	movs	r1, #64	; 0x40
 800343a:	f000 fae3 	bl	8003a04 <_malloc_r>
 800343e:	6020      	str	r0, [r4, #0]
 8003440:	6120      	str	r0, [r4, #16]
 8003442:	b928      	cbnz	r0, 8003450 <_svfiprintf_r+0x30>
 8003444:	230c      	movs	r3, #12
 8003446:	f8c8 3000 	str.w	r3, [r8]
 800344a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800344e:	e0c8      	b.n	80035e2 <_svfiprintf_r+0x1c2>
 8003450:	2340      	movs	r3, #64	; 0x40
 8003452:	6163      	str	r3, [r4, #20]
 8003454:	2300      	movs	r3, #0
 8003456:	9309      	str	r3, [sp, #36]	; 0x24
 8003458:	2320      	movs	r3, #32
 800345a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800345e:	2330      	movs	r3, #48	; 0x30
 8003460:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003464:	9503      	str	r5, [sp, #12]
 8003466:	f04f 0b01 	mov.w	fp, #1
 800346a:	4637      	mov	r7, r6
 800346c:	463d      	mov	r5, r7
 800346e:	f815 3b01 	ldrb.w	r3, [r5], #1
 8003472:	b10b      	cbz	r3, 8003478 <_svfiprintf_r+0x58>
 8003474:	2b25      	cmp	r3, #37	; 0x25
 8003476:	d13e      	bne.n	80034f6 <_svfiprintf_r+0xd6>
 8003478:	ebb7 0a06 	subs.w	sl, r7, r6
 800347c:	d00b      	beq.n	8003496 <_svfiprintf_r+0x76>
 800347e:	4653      	mov	r3, sl
 8003480:	4632      	mov	r2, r6
 8003482:	4621      	mov	r1, r4
 8003484:	4640      	mov	r0, r8
 8003486:	f7ff ff71 	bl	800336c <__ssputs_r>
 800348a:	3001      	adds	r0, #1
 800348c:	f000 80a4 	beq.w	80035d8 <_svfiprintf_r+0x1b8>
 8003490:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003492:	4453      	add	r3, sl
 8003494:	9309      	str	r3, [sp, #36]	; 0x24
 8003496:	783b      	ldrb	r3, [r7, #0]
 8003498:	2b00      	cmp	r3, #0
 800349a:	f000 809d 	beq.w	80035d8 <_svfiprintf_r+0x1b8>
 800349e:	2300      	movs	r3, #0
 80034a0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80034a4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80034a8:	9304      	str	r3, [sp, #16]
 80034aa:	9307      	str	r3, [sp, #28]
 80034ac:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80034b0:	931a      	str	r3, [sp, #104]	; 0x68
 80034b2:	462f      	mov	r7, r5
 80034b4:	2205      	movs	r2, #5
 80034b6:	f817 1b01 	ldrb.w	r1, [r7], #1
 80034ba:	4850      	ldr	r0, [pc, #320]	; (80035fc <_svfiprintf_r+0x1dc>)
 80034bc:	f7fc fe98 	bl	80001f0 <memchr>
 80034c0:	9b04      	ldr	r3, [sp, #16]
 80034c2:	b9d0      	cbnz	r0, 80034fa <_svfiprintf_r+0xda>
 80034c4:	06d9      	lsls	r1, r3, #27
 80034c6:	bf44      	itt	mi
 80034c8:	2220      	movmi	r2, #32
 80034ca:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80034ce:	071a      	lsls	r2, r3, #28
 80034d0:	bf44      	itt	mi
 80034d2:	222b      	movmi	r2, #43	; 0x2b
 80034d4:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80034d8:	782a      	ldrb	r2, [r5, #0]
 80034da:	2a2a      	cmp	r2, #42	; 0x2a
 80034dc:	d015      	beq.n	800350a <_svfiprintf_r+0xea>
 80034de:	9a07      	ldr	r2, [sp, #28]
 80034e0:	462f      	mov	r7, r5
 80034e2:	2000      	movs	r0, #0
 80034e4:	250a      	movs	r5, #10
 80034e6:	4639      	mov	r1, r7
 80034e8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80034ec:	3b30      	subs	r3, #48	; 0x30
 80034ee:	2b09      	cmp	r3, #9
 80034f0:	d94d      	bls.n	800358e <_svfiprintf_r+0x16e>
 80034f2:	b1b8      	cbz	r0, 8003524 <_svfiprintf_r+0x104>
 80034f4:	e00f      	b.n	8003516 <_svfiprintf_r+0xf6>
 80034f6:	462f      	mov	r7, r5
 80034f8:	e7b8      	b.n	800346c <_svfiprintf_r+0x4c>
 80034fa:	4a40      	ldr	r2, [pc, #256]	; (80035fc <_svfiprintf_r+0x1dc>)
 80034fc:	1a80      	subs	r0, r0, r2
 80034fe:	fa0b f000 	lsl.w	r0, fp, r0
 8003502:	4318      	orrs	r0, r3
 8003504:	9004      	str	r0, [sp, #16]
 8003506:	463d      	mov	r5, r7
 8003508:	e7d3      	b.n	80034b2 <_svfiprintf_r+0x92>
 800350a:	9a03      	ldr	r2, [sp, #12]
 800350c:	1d11      	adds	r1, r2, #4
 800350e:	6812      	ldr	r2, [r2, #0]
 8003510:	9103      	str	r1, [sp, #12]
 8003512:	2a00      	cmp	r2, #0
 8003514:	db01      	blt.n	800351a <_svfiprintf_r+0xfa>
 8003516:	9207      	str	r2, [sp, #28]
 8003518:	e004      	b.n	8003524 <_svfiprintf_r+0x104>
 800351a:	4252      	negs	r2, r2
 800351c:	f043 0302 	orr.w	r3, r3, #2
 8003520:	9207      	str	r2, [sp, #28]
 8003522:	9304      	str	r3, [sp, #16]
 8003524:	783b      	ldrb	r3, [r7, #0]
 8003526:	2b2e      	cmp	r3, #46	; 0x2e
 8003528:	d10c      	bne.n	8003544 <_svfiprintf_r+0x124>
 800352a:	787b      	ldrb	r3, [r7, #1]
 800352c:	2b2a      	cmp	r3, #42	; 0x2a
 800352e:	d133      	bne.n	8003598 <_svfiprintf_r+0x178>
 8003530:	9b03      	ldr	r3, [sp, #12]
 8003532:	1d1a      	adds	r2, r3, #4
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	9203      	str	r2, [sp, #12]
 8003538:	2b00      	cmp	r3, #0
 800353a:	bfb8      	it	lt
 800353c:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8003540:	3702      	adds	r7, #2
 8003542:	9305      	str	r3, [sp, #20]
 8003544:	4d2e      	ldr	r5, [pc, #184]	; (8003600 <_svfiprintf_r+0x1e0>)
 8003546:	7839      	ldrb	r1, [r7, #0]
 8003548:	2203      	movs	r2, #3
 800354a:	4628      	mov	r0, r5
 800354c:	f7fc fe50 	bl	80001f0 <memchr>
 8003550:	b138      	cbz	r0, 8003562 <_svfiprintf_r+0x142>
 8003552:	2340      	movs	r3, #64	; 0x40
 8003554:	1b40      	subs	r0, r0, r5
 8003556:	fa03 f000 	lsl.w	r0, r3, r0
 800355a:	9b04      	ldr	r3, [sp, #16]
 800355c:	4303      	orrs	r3, r0
 800355e:	3701      	adds	r7, #1
 8003560:	9304      	str	r3, [sp, #16]
 8003562:	7839      	ldrb	r1, [r7, #0]
 8003564:	4827      	ldr	r0, [pc, #156]	; (8003604 <_svfiprintf_r+0x1e4>)
 8003566:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800356a:	2206      	movs	r2, #6
 800356c:	1c7e      	adds	r6, r7, #1
 800356e:	f7fc fe3f 	bl	80001f0 <memchr>
 8003572:	2800      	cmp	r0, #0
 8003574:	d038      	beq.n	80035e8 <_svfiprintf_r+0x1c8>
 8003576:	4b24      	ldr	r3, [pc, #144]	; (8003608 <_svfiprintf_r+0x1e8>)
 8003578:	bb13      	cbnz	r3, 80035c0 <_svfiprintf_r+0x1a0>
 800357a:	9b03      	ldr	r3, [sp, #12]
 800357c:	3307      	adds	r3, #7
 800357e:	f023 0307 	bic.w	r3, r3, #7
 8003582:	3308      	adds	r3, #8
 8003584:	9303      	str	r3, [sp, #12]
 8003586:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003588:	444b      	add	r3, r9
 800358a:	9309      	str	r3, [sp, #36]	; 0x24
 800358c:	e76d      	b.n	800346a <_svfiprintf_r+0x4a>
 800358e:	fb05 3202 	mla	r2, r5, r2, r3
 8003592:	2001      	movs	r0, #1
 8003594:	460f      	mov	r7, r1
 8003596:	e7a6      	b.n	80034e6 <_svfiprintf_r+0xc6>
 8003598:	2300      	movs	r3, #0
 800359a:	3701      	adds	r7, #1
 800359c:	9305      	str	r3, [sp, #20]
 800359e:	4619      	mov	r1, r3
 80035a0:	250a      	movs	r5, #10
 80035a2:	4638      	mov	r0, r7
 80035a4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80035a8:	3a30      	subs	r2, #48	; 0x30
 80035aa:	2a09      	cmp	r2, #9
 80035ac:	d903      	bls.n	80035b6 <_svfiprintf_r+0x196>
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d0c8      	beq.n	8003544 <_svfiprintf_r+0x124>
 80035b2:	9105      	str	r1, [sp, #20]
 80035b4:	e7c6      	b.n	8003544 <_svfiprintf_r+0x124>
 80035b6:	fb05 2101 	mla	r1, r5, r1, r2
 80035ba:	2301      	movs	r3, #1
 80035bc:	4607      	mov	r7, r0
 80035be:	e7f0      	b.n	80035a2 <_svfiprintf_r+0x182>
 80035c0:	ab03      	add	r3, sp, #12
 80035c2:	9300      	str	r3, [sp, #0]
 80035c4:	4622      	mov	r2, r4
 80035c6:	4b11      	ldr	r3, [pc, #68]	; (800360c <_svfiprintf_r+0x1ec>)
 80035c8:	a904      	add	r1, sp, #16
 80035ca:	4640      	mov	r0, r8
 80035cc:	f3af 8000 	nop.w
 80035d0:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 80035d4:	4681      	mov	r9, r0
 80035d6:	d1d6      	bne.n	8003586 <_svfiprintf_r+0x166>
 80035d8:	89a3      	ldrh	r3, [r4, #12]
 80035da:	065b      	lsls	r3, r3, #25
 80035dc:	f53f af35 	bmi.w	800344a <_svfiprintf_r+0x2a>
 80035e0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80035e2:	b01d      	add	sp, #116	; 0x74
 80035e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80035e8:	ab03      	add	r3, sp, #12
 80035ea:	9300      	str	r3, [sp, #0]
 80035ec:	4622      	mov	r2, r4
 80035ee:	4b07      	ldr	r3, [pc, #28]	; (800360c <_svfiprintf_r+0x1ec>)
 80035f0:	a904      	add	r1, sp, #16
 80035f2:	4640      	mov	r0, r8
 80035f4:	f000 f882 	bl	80036fc <_printf_i>
 80035f8:	e7ea      	b.n	80035d0 <_svfiprintf_r+0x1b0>
 80035fa:	bf00      	nop
 80035fc:	08003b88 	.word	0x08003b88
 8003600:	08003b8e 	.word	0x08003b8e
 8003604:	08003b92 	.word	0x08003b92
 8003608:	00000000 	.word	0x00000000
 800360c:	0800336d 	.word	0x0800336d

08003610 <_printf_common>:
 8003610:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003614:	4691      	mov	r9, r2
 8003616:	461f      	mov	r7, r3
 8003618:	688a      	ldr	r2, [r1, #8]
 800361a:	690b      	ldr	r3, [r1, #16]
 800361c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003620:	4293      	cmp	r3, r2
 8003622:	bfb8      	it	lt
 8003624:	4613      	movlt	r3, r2
 8003626:	f8c9 3000 	str.w	r3, [r9]
 800362a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800362e:	4606      	mov	r6, r0
 8003630:	460c      	mov	r4, r1
 8003632:	b112      	cbz	r2, 800363a <_printf_common+0x2a>
 8003634:	3301      	adds	r3, #1
 8003636:	f8c9 3000 	str.w	r3, [r9]
 800363a:	6823      	ldr	r3, [r4, #0]
 800363c:	0699      	lsls	r1, r3, #26
 800363e:	bf42      	ittt	mi
 8003640:	f8d9 3000 	ldrmi.w	r3, [r9]
 8003644:	3302      	addmi	r3, #2
 8003646:	f8c9 3000 	strmi.w	r3, [r9]
 800364a:	6825      	ldr	r5, [r4, #0]
 800364c:	f015 0506 	ands.w	r5, r5, #6
 8003650:	d107      	bne.n	8003662 <_printf_common+0x52>
 8003652:	f104 0a19 	add.w	sl, r4, #25
 8003656:	68e3      	ldr	r3, [r4, #12]
 8003658:	f8d9 2000 	ldr.w	r2, [r9]
 800365c:	1a9b      	subs	r3, r3, r2
 800365e:	42ab      	cmp	r3, r5
 8003660:	dc28      	bgt.n	80036b4 <_printf_common+0xa4>
 8003662:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8003666:	6822      	ldr	r2, [r4, #0]
 8003668:	3300      	adds	r3, #0
 800366a:	bf18      	it	ne
 800366c:	2301      	movne	r3, #1
 800366e:	0692      	lsls	r2, r2, #26
 8003670:	d42d      	bmi.n	80036ce <_printf_common+0xbe>
 8003672:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003676:	4639      	mov	r1, r7
 8003678:	4630      	mov	r0, r6
 800367a:	47c0      	blx	r8
 800367c:	3001      	adds	r0, #1
 800367e:	d020      	beq.n	80036c2 <_printf_common+0xb2>
 8003680:	6823      	ldr	r3, [r4, #0]
 8003682:	68e5      	ldr	r5, [r4, #12]
 8003684:	f8d9 2000 	ldr.w	r2, [r9]
 8003688:	f003 0306 	and.w	r3, r3, #6
 800368c:	2b04      	cmp	r3, #4
 800368e:	bf08      	it	eq
 8003690:	1aad      	subeq	r5, r5, r2
 8003692:	68a3      	ldr	r3, [r4, #8]
 8003694:	6922      	ldr	r2, [r4, #16]
 8003696:	bf0c      	ite	eq
 8003698:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800369c:	2500      	movne	r5, #0
 800369e:	4293      	cmp	r3, r2
 80036a0:	bfc4      	itt	gt
 80036a2:	1a9b      	subgt	r3, r3, r2
 80036a4:	18ed      	addgt	r5, r5, r3
 80036a6:	f04f 0900 	mov.w	r9, #0
 80036aa:	341a      	adds	r4, #26
 80036ac:	454d      	cmp	r5, r9
 80036ae:	d11a      	bne.n	80036e6 <_printf_common+0xd6>
 80036b0:	2000      	movs	r0, #0
 80036b2:	e008      	b.n	80036c6 <_printf_common+0xb6>
 80036b4:	2301      	movs	r3, #1
 80036b6:	4652      	mov	r2, sl
 80036b8:	4639      	mov	r1, r7
 80036ba:	4630      	mov	r0, r6
 80036bc:	47c0      	blx	r8
 80036be:	3001      	adds	r0, #1
 80036c0:	d103      	bne.n	80036ca <_printf_common+0xba>
 80036c2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80036c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80036ca:	3501      	adds	r5, #1
 80036cc:	e7c3      	b.n	8003656 <_printf_common+0x46>
 80036ce:	18e1      	adds	r1, r4, r3
 80036d0:	1c5a      	adds	r2, r3, #1
 80036d2:	2030      	movs	r0, #48	; 0x30
 80036d4:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80036d8:	4422      	add	r2, r4
 80036da:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80036de:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80036e2:	3302      	adds	r3, #2
 80036e4:	e7c5      	b.n	8003672 <_printf_common+0x62>
 80036e6:	2301      	movs	r3, #1
 80036e8:	4622      	mov	r2, r4
 80036ea:	4639      	mov	r1, r7
 80036ec:	4630      	mov	r0, r6
 80036ee:	47c0      	blx	r8
 80036f0:	3001      	adds	r0, #1
 80036f2:	d0e6      	beq.n	80036c2 <_printf_common+0xb2>
 80036f4:	f109 0901 	add.w	r9, r9, #1
 80036f8:	e7d8      	b.n	80036ac <_printf_common+0x9c>
	...

080036fc <_printf_i>:
 80036fc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003700:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8003704:	460c      	mov	r4, r1
 8003706:	7e09      	ldrb	r1, [r1, #24]
 8003708:	b085      	sub	sp, #20
 800370a:	296e      	cmp	r1, #110	; 0x6e
 800370c:	4617      	mov	r7, r2
 800370e:	4606      	mov	r6, r0
 8003710:	4698      	mov	r8, r3
 8003712:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8003714:	f000 80b3 	beq.w	800387e <_printf_i+0x182>
 8003718:	d822      	bhi.n	8003760 <_printf_i+0x64>
 800371a:	2963      	cmp	r1, #99	; 0x63
 800371c:	d036      	beq.n	800378c <_printf_i+0x90>
 800371e:	d80a      	bhi.n	8003736 <_printf_i+0x3a>
 8003720:	2900      	cmp	r1, #0
 8003722:	f000 80b9 	beq.w	8003898 <_printf_i+0x19c>
 8003726:	2958      	cmp	r1, #88	; 0x58
 8003728:	f000 8083 	beq.w	8003832 <_printf_i+0x136>
 800372c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003730:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8003734:	e032      	b.n	800379c <_printf_i+0xa0>
 8003736:	2964      	cmp	r1, #100	; 0x64
 8003738:	d001      	beq.n	800373e <_printf_i+0x42>
 800373a:	2969      	cmp	r1, #105	; 0x69
 800373c:	d1f6      	bne.n	800372c <_printf_i+0x30>
 800373e:	6820      	ldr	r0, [r4, #0]
 8003740:	6813      	ldr	r3, [r2, #0]
 8003742:	0605      	lsls	r5, r0, #24
 8003744:	f103 0104 	add.w	r1, r3, #4
 8003748:	d52a      	bpl.n	80037a0 <_printf_i+0xa4>
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	6011      	str	r1, [r2, #0]
 800374e:	2b00      	cmp	r3, #0
 8003750:	da03      	bge.n	800375a <_printf_i+0x5e>
 8003752:	222d      	movs	r2, #45	; 0x2d
 8003754:	425b      	negs	r3, r3
 8003756:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800375a:	486f      	ldr	r0, [pc, #444]	; (8003918 <_printf_i+0x21c>)
 800375c:	220a      	movs	r2, #10
 800375e:	e039      	b.n	80037d4 <_printf_i+0xd8>
 8003760:	2973      	cmp	r1, #115	; 0x73
 8003762:	f000 809d 	beq.w	80038a0 <_printf_i+0x1a4>
 8003766:	d808      	bhi.n	800377a <_printf_i+0x7e>
 8003768:	296f      	cmp	r1, #111	; 0x6f
 800376a:	d020      	beq.n	80037ae <_printf_i+0xb2>
 800376c:	2970      	cmp	r1, #112	; 0x70
 800376e:	d1dd      	bne.n	800372c <_printf_i+0x30>
 8003770:	6823      	ldr	r3, [r4, #0]
 8003772:	f043 0320 	orr.w	r3, r3, #32
 8003776:	6023      	str	r3, [r4, #0]
 8003778:	e003      	b.n	8003782 <_printf_i+0x86>
 800377a:	2975      	cmp	r1, #117	; 0x75
 800377c:	d017      	beq.n	80037ae <_printf_i+0xb2>
 800377e:	2978      	cmp	r1, #120	; 0x78
 8003780:	d1d4      	bne.n	800372c <_printf_i+0x30>
 8003782:	2378      	movs	r3, #120	; 0x78
 8003784:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003788:	4864      	ldr	r0, [pc, #400]	; (800391c <_printf_i+0x220>)
 800378a:	e055      	b.n	8003838 <_printf_i+0x13c>
 800378c:	6813      	ldr	r3, [r2, #0]
 800378e:	1d19      	adds	r1, r3, #4
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	6011      	str	r1, [r2, #0]
 8003794:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003798:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800379c:	2301      	movs	r3, #1
 800379e:	e08c      	b.n	80038ba <_printf_i+0x1be>
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	6011      	str	r1, [r2, #0]
 80037a4:	f010 0f40 	tst.w	r0, #64	; 0x40
 80037a8:	bf18      	it	ne
 80037aa:	b21b      	sxthne	r3, r3
 80037ac:	e7cf      	b.n	800374e <_printf_i+0x52>
 80037ae:	6813      	ldr	r3, [r2, #0]
 80037b0:	6825      	ldr	r5, [r4, #0]
 80037b2:	1d18      	adds	r0, r3, #4
 80037b4:	6010      	str	r0, [r2, #0]
 80037b6:	0628      	lsls	r0, r5, #24
 80037b8:	d501      	bpl.n	80037be <_printf_i+0xc2>
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	e002      	b.n	80037c4 <_printf_i+0xc8>
 80037be:	0668      	lsls	r0, r5, #25
 80037c0:	d5fb      	bpl.n	80037ba <_printf_i+0xbe>
 80037c2:	881b      	ldrh	r3, [r3, #0]
 80037c4:	4854      	ldr	r0, [pc, #336]	; (8003918 <_printf_i+0x21c>)
 80037c6:	296f      	cmp	r1, #111	; 0x6f
 80037c8:	bf14      	ite	ne
 80037ca:	220a      	movne	r2, #10
 80037cc:	2208      	moveq	r2, #8
 80037ce:	2100      	movs	r1, #0
 80037d0:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80037d4:	6865      	ldr	r5, [r4, #4]
 80037d6:	60a5      	str	r5, [r4, #8]
 80037d8:	2d00      	cmp	r5, #0
 80037da:	f2c0 8095 	blt.w	8003908 <_printf_i+0x20c>
 80037de:	6821      	ldr	r1, [r4, #0]
 80037e0:	f021 0104 	bic.w	r1, r1, #4
 80037e4:	6021      	str	r1, [r4, #0]
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d13d      	bne.n	8003866 <_printf_i+0x16a>
 80037ea:	2d00      	cmp	r5, #0
 80037ec:	f040 808e 	bne.w	800390c <_printf_i+0x210>
 80037f0:	4665      	mov	r5, ip
 80037f2:	2a08      	cmp	r2, #8
 80037f4:	d10b      	bne.n	800380e <_printf_i+0x112>
 80037f6:	6823      	ldr	r3, [r4, #0]
 80037f8:	07db      	lsls	r3, r3, #31
 80037fa:	d508      	bpl.n	800380e <_printf_i+0x112>
 80037fc:	6923      	ldr	r3, [r4, #16]
 80037fe:	6862      	ldr	r2, [r4, #4]
 8003800:	429a      	cmp	r2, r3
 8003802:	bfde      	ittt	le
 8003804:	2330      	movle	r3, #48	; 0x30
 8003806:	f805 3c01 	strble.w	r3, [r5, #-1]
 800380a:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800380e:	ebac 0305 	sub.w	r3, ip, r5
 8003812:	6123      	str	r3, [r4, #16]
 8003814:	f8cd 8000 	str.w	r8, [sp]
 8003818:	463b      	mov	r3, r7
 800381a:	aa03      	add	r2, sp, #12
 800381c:	4621      	mov	r1, r4
 800381e:	4630      	mov	r0, r6
 8003820:	f7ff fef6 	bl	8003610 <_printf_common>
 8003824:	3001      	adds	r0, #1
 8003826:	d14d      	bne.n	80038c4 <_printf_i+0x1c8>
 8003828:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800382c:	b005      	add	sp, #20
 800382e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8003832:	4839      	ldr	r0, [pc, #228]	; (8003918 <_printf_i+0x21c>)
 8003834:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8003838:	6813      	ldr	r3, [r2, #0]
 800383a:	6821      	ldr	r1, [r4, #0]
 800383c:	1d1d      	adds	r5, r3, #4
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	6015      	str	r5, [r2, #0]
 8003842:	060a      	lsls	r2, r1, #24
 8003844:	d50b      	bpl.n	800385e <_printf_i+0x162>
 8003846:	07ca      	lsls	r2, r1, #31
 8003848:	bf44      	itt	mi
 800384a:	f041 0120 	orrmi.w	r1, r1, #32
 800384e:	6021      	strmi	r1, [r4, #0]
 8003850:	b91b      	cbnz	r3, 800385a <_printf_i+0x15e>
 8003852:	6822      	ldr	r2, [r4, #0]
 8003854:	f022 0220 	bic.w	r2, r2, #32
 8003858:	6022      	str	r2, [r4, #0]
 800385a:	2210      	movs	r2, #16
 800385c:	e7b7      	b.n	80037ce <_printf_i+0xd2>
 800385e:	064d      	lsls	r5, r1, #25
 8003860:	bf48      	it	mi
 8003862:	b29b      	uxthmi	r3, r3
 8003864:	e7ef      	b.n	8003846 <_printf_i+0x14a>
 8003866:	4665      	mov	r5, ip
 8003868:	fbb3 f1f2 	udiv	r1, r3, r2
 800386c:	fb02 3311 	mls	r3, r2, r1, r3
 8003870:	5cc3      	ldrb	r3, [r0, r3]
 8003872:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8003876:	460b      	mov	r3, r1
 8003878:	2900      	cmp	r1, #0
 800387a:	d1f5      	bne.n	8003868 <_printf_i+0x16c>
 800387c:	e7b9      	b.n	80037f2 <_printf_i+0xf6>
 800387e:	6813      	ldr	r3, [r2, #0]
 8003880:	6825      	ldr	r5, [r4, #0]
 8003882:	6961      	ldr	r1, [r4, #20]
 8003884:	1d18      	adds	r0, r3, #4
 8003886:	6010      	str	r0, [r2, #0]
 8003888:	0628      	lsls	r0, r5, #24
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	d501      	bpl.n	8003892 <_printf_i+0x196>
 800388e:	6019      	str	r1, [r3, #0]
 8003890:	e002      	b.n	8003898 <_printf_i+0x19c>
 8003892:	066a      	lsls	r2, r5, #25
 8003894:	d5fb      	bpl.n	800388e <_printf_i+0x192>
 8003896:	8019      	strh	r1, [r3, #0]
 8003898:	2300      	movs	r3, #0
 800389a:	6123      	str	r3, [r4, #16]
 800389c:	4665      	mov	r5, ip
 800389e:	e7b9      	b.n	8003814 <_printf_i+0x118>
 80038a0:	6813      	ldr	r3, [r2, #0]
 80038a2:	1d19      	adds	r1, r3, #4
 80038a4:	6011      	str	r1, [r2, #0]
 80038a6:	681d      	ldr	r5, [r3, #0]
 80038a8:	6862      	ldr	r2, [r4, #4]
 80038aa:	2100      	movs	r1, #0
 80038ac:	4628      	mov	r0, r5
 80038ae:	f7fc fc9f 	bl	80001f0 <memchr>
 80038b2:	b108      	cbz	r0, 80038b8 <_printf_i+0x1bc>
 80038b4:	1b40      	subs	r0, r0, r5
 80038b6:	6060      	str	r0, [r4, #4]
 80038b8:	6863      	ldr	r3, [r4, #4]
 80038ba:	6123      	str	r3, [r4, #16]
 80038bc:	2300      	movs	r3, #0
 80038be:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80038c2:	e7a7      	b.n	8003814 <_printf_i+0x118>
 80038c4:	6923      	ldr	r3, [r4, #16]
 80038c6:	462a      	mov	r2, r5
 80038c8:	4639      	mov	r1, r7
 80038ca:	4630      	mov	r0, r6
 80038cc:	47c0      	blx	r8
 80038ce:	3001      	adds	r0, #1
 80038d0:	d0aa      	beq.n	8003828 <_printf_i+0x12c>
 80038d2:	6823      	ldr	r3, [r4, #0]
 80038d4:	079b      	lsls	r3, r3, #30
 80038d6:	d413      	bmi.n	8003900 <_printf_i+0x204>
 80038d8:	68e0      	ldr	r0, [r4, #12]
 80038da:	9b03      	ldr	r3, [sp, #12]
 80038dc:	4298      	cmp	r0, r3
 80038de:	bfb8      	it	lt
 80038e0:	4618      	movlt	r0, r3
 80038e2:	e7a3      	b.n	800382c <_printf_i+0x130>
 80038e4:	2301      	movs	r3, #1
 80038e6:	464a      	mov	r2, r9
 80038e8:	4639      	mov	r1, r7
 80038ea:	4630      	mov	r0, r6
 80038ec:	47c0      	blx	r8
 80038ee:	3001      	adds	r0, #1
 80038f0:	d09a      	beq.n	8003828 <_printf_i+0x12c>
 80038f2:	3501      	adds	r5, #1
 80038f4:	68e3      	ldr	r3, [r4, #12]
 80038f6:	9a03      	ldr	r2, [sp, #12]
 80038f8:	1a9b      	subs	r3, r3, r2
 80038fa:	42ab      	cmp	r3, r5
 80038fc:	dcf2      	bgt.n	80038e4 <_printf_i+0x1e8>
 80038fe:	e7eb      	b.n	80038d8 <_printf_i+0x1dc>
 8003900:	2500      	movs	r5, #0
 8003902:	f104 0919 	add.w	r9, r4, #25
 8003906:	e7f5      	b.n	80038f4 <_printf_i+0x1f8>
 8003908:	2b00      	cmp	r3, #0
 800390a:	d1ac      	bne.n	8003866 <_printf_i+0x16a>
 800390c:	7803      	ldrb	r3, [r0, #0]
 800390e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003912:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003916:	e76c      	b.n	80037f2 <_printf_i+0xf6>
 8003918:	08003b99 	.word	0x08003b99
 800391c:	08003baa 	.word	0x08003baa

08003920 <memcpy>:
 8003920:	b510      	push	{r4, lr}
 8003922:	1e43      	subs	r3, r0, #1
 8003924:	440a      	add	r2, r1
 8003926:	4291      	cmp	r1, r2
 8003928:	d100      	bne.n	800392c <memcpy+0xc>
 800392a:	bd10      	pop	{r4, pc}
 800392c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003930:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003934:	e7f7      	b.n	8003926 <memcpy+0x6>

08003936 <memmove>:
 8003936:	4288      	cmp	r0, r1
 8003938:	b510      	push	{r4, lr}
 800393a:	eb01 0302 	add.w	r3, r1, r2
 800393e:	d807      	bhi.n	8003950 <memmove+0x1a>
 8003940:	1e42      	subs	r2, r0, #1
 8003942:	4299      	cmp	r1, r3
 8003944:	d00a      	beq.n	800395c <memmove+0x26>
 8003946:	f811 4b01 	ldrb.w	r4, [r1], #1
 800394a:	f802 4f01 	strb.w	r4, [r2, #1]!
 800394e:	e7f8      	b.n	8003942 <memmove+0xc>
 8003950:	4283      	cmp	r3, r0
 8003952:	d9f5      	bls.n	8003940 <memmove+0xa>
 8003954:	1881      	adds	r1, r0, r2
 8003956:	1ad2      	subs	r2, r2, r3
 8003958:	42d3      	cmn	r3, r2
 800395a:	d100      	bne.n	800395e <memmove+0x28>
 800395c:	bd10      	pop	{r4, pc}
 800395e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8003962:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8003966:	e7f7      	b.n	8003958 <memmove+0x22>

08003968 <_free_r>:
 8003968:	b538      	push	{r3, r4, r5, lr}
 800396a:	4605      	mov	r5, r0
 800396c:	2900      	cmp	r1, #0
 800396e:	d045      	beq.n	80039fc <_free_r+0x94>
 8003970:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003974:	1f0c      	subs	r4, r1, #4
 8003976:	2b00      	cmp	r3, #0
 8003978:	bfb8      	it	lt
 800397a:	18e4      	addlt	r4, r4, r3
 800397c:	f000 f8d2 	bl	8003b24 <__malloc_lock>
 8003980:	4a1f      	ldr	r2, [pc, #124]	; (8003a00 <_free_r+0x98>)
 8003982:	6813      	ldr	r3, [r2, #0]
 8003984:	4610      	mov	r0, r2
 8003986:	b933      	cbnz	r3, 8003996 <_free_r+0x2e>
 8003988:	6063      	str	r3, [r4, #4]
 800398a:	6014      	str	r4, [r2, #0]
 800398c:	4628      	mov	r0, r5
 800398e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003992:	f000 b8c8 	b.w	8003b26 <__malloc_unlock>
 8003996:	42a3      	cmp	r3, r4
 8003998:	d90c      	bls.n	80039b4 <_free_r+0x4c>
 800399a:	6821      	ldr	r1, [r4, #0]
 800399c:	1862      	adds	r2, r4, r1
 800399e:	4293      	cmp	r3, r2
 80039a0:	bf04      	itt	eq
 80039a2:	681a      	ldreq	r2, [r3, #0]
 80039a4:	685b      	ldreq	r3, [r3, #4]
 80039a6:	6063      	str	r3, [r4, #4]
 80039a8:	bf04      	itt	eq
 80039aa:	1852      	addeq	r2, r2, r1
 80039ac:	6022      	streq	r2, [r4, #0]
 80039ae:	6004      	str	r4, [r0, #0]
 80039b0:	e7ec      	b.n	800398c <_free_r+0x24>
 80039b2:	4613      	mov	r3, r2
 80039b4:	685a      	ldr	r2, [r3, #4]
 80039b6:	b10a      	cbz	r2, 80039bc <_free_r+0x54>
 80039b8:	42a2      	cmp	r2, r4
 80039ba:	d9fa      	bls.n	80039b2 <_free_r+0x4a>
 80039bc:	6819      	ldr	r1, [r3, #0]
 80039be:	1858      	adds	r0, r3, r1
 80039c0:	42a0      	cmp	r0, r4
 80039c2:	d10b      	bne.n	80039dc <_free_r+0x74>
 80039c4:	6820      	ldr	r0, [r4, #0]
 80039c6:	4401      	add	r1, r0
 80039c8:	1858      	adds	r0, r3, r1
 80039ca:	4282      	cmp	r2, r0
 80039cc:	6019      	str	r1, [r3, #0]
 80039ce:	d1dd      	bne.n	800398c <_free_r+0x24>
 80039d0:	6810      	ldr	r0, [r2, #0]
 80039d2:	6852      	ldr	r2, [r2, #4]
 80039d4:	605a      	str	r2, [r3, #4]
 80039d6:	4401      	add	r1, r0
 80039d8:	6019      	str	r1, [r3, #0]
 80039da:	e7d7      	b.n	800398c <_free_r+0x24>
 80039dc:	d902      	bls.n	80039e4 <_free_r+0x7c>
 80039de:	230c      	movs	r3, #12
 80039e0:	602b      	str	r3, [r5, #0]
 80039e2:	e7d3      	b.n	800398c <_free_r+0x24>
 80039e4:	6820      	ldr	r0, [r4, #0]
 80039e6:	1821      	adds	r1, r4, r0
 80039e8:	428a      	cmp	r2, r1
 80039ea:	bf04      	itt	eq
 80039ec:	6811      	ldreq	r1, [r2, #0]
 80039ee:	6852      	ldreq	r2, [r2, #4]
 80039f0:	6062      	str	r2, [r4, #4]
 80039f2:	bf04      	itt	eq
 80039f4:	1809      	addeq	r1, r1, r0
 80039f6:	6021      	streq	r1, [r4, #0]
 80039f8:	605c      	str	r4, [r3, #4]
 80039fa:	e7c7      	b.n	800398c <_free_r+0x24>
 80039fc:	bd38      	pop	{r3, r4, r5, pc}
 80039fe:	bf00      	nop
 8003a00:	20000090 	.word	0x20000090

08003a04 <_malloc_r>:
 8003a04:	b570      	push	{r4, r5, r6, lr}
 8003a06:	1ccd      	adds	r5, r1, #3
 8003a08:	f025 0503 	bic.w	r5, r5, #3
 8003a0c:	3508      	adds	r5, #8
 8003a0e:	2d0c      	cmp	r5, #12
 8003a10:	bf38      	it	cc
 8003a12:	250c      	movcc	r5, #12
 8003a14:	2d00      	cmp	r5, #0
 8003a16:	4606      	mov	r6, r0
 8003a18:	db01      	blt.n	8003a1e <_malloc_r+0x1a>
 8003a1a:	42a9      	cmp	r1, r5
 8003a1c:	d903      	bls.n	8003a26 <_malloc_r+0x22>
 8003a1e:	230c      	movs	r3, #12
 8003a20:	6033      	str	r3, [r6, #0]
 8003a22:	2000      	movs	r0, #0
 8003a24:	bd70      	pop	{r4, r5, r6, pc}
 8003a26:	f000 f87d 	bl	8003b24 <__malloc_lock>
 8003a2a:	4a21      	ldr	r2, [pc, #132]	; (8003ab0 <_malloc_r+0xac>)
 8003a2c:	6814      	ldr	r4, [r2, #0]
 8003a2e:	4621      	mov	r1, r4
 8003a30:	b991      	cbnz	r1, 8003a58 <_malloc_r+0x54>
 8003a32:	4c20      	ldr	r4, [pc, #128]	; (8003ab4 <_malloc_r+0xb0>)
 8003a34:	6823      	ldr	r3, [r4, #0]
 8003a36:	b91b      	cbnz	r3, 8003a40 <_malloc_r+0x3c>
 8003a38:	4630      	mov	r0, r6
 8003a3a:	f000 f863 	bl	8003b04 <_sbrk_r>
 8003a3e:	6020      	str	r0, [r4, #0]
 8003a40:	4629      	mov	r1, r5
 8003a42:	4630      	mov	r0, r6
 8003a44:	f000 f85e 	bl	8003b04 <_sbrk_r>
 8003a48:	1c43      	adds	r3, r0, #1
 8003a4a:	d124      	bne.n	8003a96 <_malloc_r+0x92>
 8003a4c:	230c      	movs	r3, #12
 8003a4e:	6033      	str	r3, [r6, #0]
 8003a50:	4630      	mov	r0, r6
 8003a52:	f000 f868 	bl	8003b26 <__malloc_unlock>
 8003a56:	e7e4      	b.n	8003a22 <_malloc_r+0x1e>
 8003a58:	680b      	ldr	r3, [r1, #0]
 8003a5a:	1b5b      	subs	r3, r3, r5
 8003a5c:	d418      	bmi.n	8003a90 <_malloc_r+0x8c>
 8003a5e:	2b0b      	cmp	r3, #11
 8003a60:	d90f      	bls.n	8003a82 <_malloc_r+0x7e>
 8003a62:	600b      	str	r3, [r1, #0]
 8003a64:	50cd      	str	r5, [r1, r3]
 8003a66:	18cc      	adds	r4, r1, r3
 8003a68:	4630      	mov	r0, r6
 8003a6a:	f000 f85c 	bl	8003b26 <__malloc_unlock>
 8003a6e:	f104 000b 	add.w	r0, r4, #11
 8003a72:	1d23      	adds	r3, r4, #4
 8003a74:	f020 0007 	bic.w	r0, r0, #7
 8003a78:	1ac3      	subs	r3, r0, r3
 8003a7a:	d0d3      	beq.n	8003a24 <_malloc_r+0x20>
 8003a7c:	425a      	negs	r2, r3
 8003a7e:	50e2      	str	r2, [r4, r3]
 8003a80:	e7d0      	b.n	8003a24 <_malloc_r+0x20>
 8003a82:	428c      	cmp	r4, r1
 8003a84:	684b      	ldr	r3, [r1, #4]
 8003a86:	bf16      	itet	ne
 8003a88:	6063      	strne	r3, [r4, #4]
 8003a8a:	6013      	streq	r3, [r2, #0]
 8003a8c:	460c      	movne	r4, r1
 8003a8e:	e7eb      	b.n	8003a68 <_malloc_r+0x64>
 8003a90:	460c      	mov	r4, r1
 8003a92:	6849      	ldr	r1, [r1, #4]
 8003a94:	e7cc      	b.n	8003a30 <_malloc_r+0x2c>
 8003a96:	1cc4      	adds	r4, r0, #3
 8003a98:	f024 0403 	bic.w	r4, r4, #3
 8003a9c:	42a0      	cmp	r0, r4
 8003a9e:	d005      	beq.n	8003aac <_malloc_r+0xa8>
 8003aa0:	1a21      	subs	r1, r4, r0
 8003aa2:	4630      	mov	r0, r6
 8003aa4:	f000 f82e 	bl	8003b04 <_sbrk_r>
 8003aa8:	3001      	adds	r0, #1
 8003aaa:	d0cf      	beq.n	8003a4c <_malloc_r+0x48>
 8003aac:	6025      	str	r5, [r4, #0]
 8003aae:	e7db      	b.n	8003a68 <_malloc_r+0x64>
 8003ab0:	20000090 	.word	0x20000090
 8003ab4:	20000094 	.word	0x20000094

08003ab8 <_realloc_r>:
 8003ab8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003aba:	4607      	mov	r7, r0
 8003abc:	4614      	mov	r4, r2
 8003abe:	460e      	mov	r6, r1
 8003ac0:	b921      	cbnz	r1, 8003acc <_realloc_r+0x14>
 8003ac2:	4611      	mov	r1, r2
 8003ac4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8003ac8:	f7ff bf9c 	b.w	8003a04 <_malloc_r>
 8003acc:	b922      	cbnz	r2, 8003ad8 <_realloc_r+0x20>
 8003ace:	f7ff ff4b 	bl	8003968 <_free_r>
 8003ad2:	4625      	mov	r5, r4
 8003ad4:	4628      	mov	r0, r5
 8003ad6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003ad8:	f000 f826 	bl	8003b28 <_malloc_usable_size_r>
 8003adc:	42a0      	cmp	r0, r4
 8003ade:	d20f      	bcs.n	8003b00 <_realloc_r+0x48>
 8003ae0:	4621      	mov	r1, r4
 8003ae2:	4638      	mov	r0, r7
 8003ae4:	f7ff ff8e 	bl	8003a04 <_malloc_r>
 8003ae8:	4605      	mov	r5, r0
 8003aea:	2800      	cmp	r0, #0
 8003aec:	d0f2      	beq.n	8003ad4 <_realloc_r+0x1c>
 8003aee:	4631      	mov	r1, r6
 8003af0:	4622      	mov	r2, r4
 8003af2:	f7ff ff15 	bl	8003920 <memcpy>
 8003af6:	4631      	mov	r1, r6
 8003af8:	4638      	mov	r0, r7
 8003afa:	f7ff ff35 	bl	8003968 <_free_r>
 8003afe:	e7e9      	b.n	8003ad4 <_realloc_r+0x1c>
 8003b00:	4635      	mov	r5, r6
 8003b02:	e7e7      	b.n	8003ad4 <_realloc_r+0x1c>

08003b04 <_sbrk_r>:
 8003b04:	b538      	push	{r3, r4, r5, lr}
 8003b06:	4c06      	ldr	r4, [pc, #24]	; (8003b20 <_sbrk_r+0x1c>)
 8003b08:	2300      	movs	r3, #0
 8003b0a:	4605      	mov	r5, r0
 8003b0c:	4608      	mov	r0, r1
 8003b0e:	6023      	str	r3, [r4, #0]
 8003b10:	f7fc ffc2 	bl	8000a98 <_sbrk>
 8003b14:	1c43      	adds	r3, r0, #1
 8003b16:	d102      	bne.n	8003b1e <_sbrk_r+0x1a>
 8003b18:	6823      	ldr	r3, [r4, #0]
 8003b1a:	b103      	cbz	r3, 8003b1e <_sbrk_r+0x1a>
 8003b1c:	602b      	str	r3, [r5, #0]
 8003b1e:	bd38      	pop	{r3, r4, r5, pc}
 8003b20:	20000130 	.word	0x20000130

08003b24 <__malloc_lock>:
 8003b24:	4770      	bx	lr

08003b26 <__malloc_unlock>:
 8003b26:	4770      	bx	lr

08003b28 <_malloc_usable_size_r>:
 8003b28:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003b2c:	1f18      	subs	r0, r3, #4
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	bfbc      	itt	lt
 8003b32:	580b      	ldrlt	r3, [r1, r0]
 8003b34:	18c0      	addlt	r0, r0, r3
 8003b36:	4770      	bx	lr

08003b38 <_init>:
 8003b38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003b3a:	bf00      	nop
 8003b3c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003b3e:	bc08      	pop	{r3}
 8003b40:	469e      	mov	lr, r3
 8003b42:	4770      	bx	lr

08003b44 <_fini>:
 8003b44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003b46:	bf00      	nop
 8003b48:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003b4a:	bc08      	pop	{r3}
 8003b4c:	469e      	mov	lr, r3
 8003b4e:	4770      	bx	lr
